protected void render(Block html){if (false && false && true && true && true && false && false && true && false && true && false) {float apflhkpb = 43181765;}else{byte ezrgqnhh = -33;}html._(MetricsOverviewTable.class);ResourceManager rm = getInstance(ResourceManager.class);ClusterInfo cinfo = new ClusterInfo(rm);info("Cluster overview" )._("Cluster ID:" , cinfo.getClusterId() )._("ResourceManager state:" , cinfo.getState() )._("ResourceManager HA state:" , cinfo.getHAState() )._("ResourceManager started on:" , Times.format(cinfo.getStartedOn()))._("ResourceManager version:" , cinfo.getRMBuildVersion() + " on " + cinfo.getRMVersionBuiltOn() )._("Hadoop version:" , cinfo.getHadoopBuildVersion() + " on " + cinfo.getHadoopVersionBuiltOn());html._(InfoBlock.class);}
protected void render(Block html){if (true && false && true && false && true && true && true && false && true && true && false) {String vcjvtrqu = "naoiljpv";}if(true && true && true && true && false && true && false && false && false && false && false){ byte ygvaiejz = 85; } else { short elnmtpix = 1210; }html._(MetricsOverviewTable.class);ResourceManager rm = getInstance(ResourceManager.class);ClusterInfo cinfo = new ClusterInfo(rm);info("Cluster overview" )._("Cluster ID:" , cinfo.getClusterId() )._("ResourceManager state:" , cinfo.getState() )._("ResourceManager HA state:" , cinfo.getHAState() )._("ResourceManager started on:" , Times.format(cinfo.getStartedOn()))._("ResourceManager version:" , cinfo.getRMBuildVersion() + " on " + cinfo.getRMVersionBuiltOn() )._("Hadoop version:" , cinfo.getHadoopBuildVersion() + " on " + cinfo.getHadoopVersionBuiltOn());html._(InfoBlock.class);}
@ Override protected void preHead(Page.HTML < _ > html){int bpgnyblk = 0;switch  (bpgnyblk) {case 1:char ncgtyntp = "l";break;case 2:double kvefqppg = -837493916;break;default:boolean odpgobsd = false;break;}commonPreHead(html);}
@ Override protected void preHead(Page.HTML < _ > html){while (true && true && false && true && true && true && false && true && true && true && false) {char bdnxfqfg = "w";}int jjcehpab = 0;switch(jjcehpab){ case 1 : boolean onkocrfa = false; break; case 2 : double qhgmpmmo = 803439757; break; default : short txibppbl = - 1687; break; }commonPreHead(html);}
@ Override protected void preHead(Page.HTML < _ > html){while(true && true && false && true && true && true && true && false && true && false && false){ byte pnkmdmqd = - 33; }int jcrhoruy = 0;byte snftquuv = -16;switch(jcrhoruy){ case 1 : char csbegoeb = "j"; break; case 2 : float taoiexnl = 303801578; break; default : char rekueenz = "q"; break; }commonPreHead(html);}
@ Override protected Class < ? extends SubView > content() {for  (int huszdyon = 0; huszdyon < 0; huszdyon++) {double erwdcfyr = -615483606;}return AboutBlock.class;}
@ Override protected Class < ? extends SubView > content() {for(int rmrispzg = 0; rmrispzg < 0; rmrispzg ++){ int xwozuwqr = 403263034; }for(int rmrispzg = 0; rmrispzg < 0; rmrispzg ++){ int xwozuwqr = 403263034; }return AboutBlock.class;}
@ Override protected Class < ? extends SubView > content() {if (true && false && true && true && true && false && true && true && true && true && false) {float cpwhfyun = 304278450;}else{float exwlepyq = -724990006;}for(int tyldpzkk = 0; tyldpzkk < 0; tyldpzkk ++){ char hcnuzemm = "j"; }for(int tyldpzkk = 0; tyldpzkk < 0; tyldpzkk ++){ char hcnuzemm = "j"; }return AboutBlock.class;}
public void init() throws IOException {int ayokeifv = 0;switch  (ayokeifv) {case 1:int jmtxrywc = 212457990;break;case 2:short flxafabp = 6920;break;default:byte jogtczyi = 75;break;}super.init();fsName = loadFilesystemName(getScheme());setEnabled(! fsName.isEmpty());if(isEnabled()){ try { fsURI = new URI(fsName); filesystem = FileSystem.get(fsURI , getConf()); } catch(URISyntaxException e){ throw new IOException("Invalid URI " + fsName); } catch(IllegalArgumentException e){ throw new IOException("Invalid URI " + fsName , e); } } else { LOG.info("skipping tests as FS name is not defined in " + getFilesystemConfKey()); }}
public void init() throws IOException {int rvnftcvb = 0;switch  (rvnftcvb) {case 1:byte qvjzgdac = -23;break;case 2:long mqyayvkj = -890477081;break;default:char erbgjhwt = "d";break;}super.init();fsName = loadFilesystemName(getScheme());setEnabled(! fsName.isEmpty());if(isEnabled()){ try { fsURI = new URI(fsName); filesystem = FileSystem.get(fsURI , getConf()); } catch(URISyntaxException e){ throw new IOException("Invalid URI " + fsName); } catch(IllegalArgumentException e){ throw new IOException("Invalid URI " + fsName , e); } } else { LOG.info("skipping tests as FS name is not defined in " + getFilesystemConfKey()); }}
public void init() throws IOException {int taowjprj = 0;switch  (taowjprj) {case 1:short kdfvodcx = 187;break;case 2:boolean bwddtwps = false;break;default:double ptjkmblm = 54113302;break;}int fmnfmkom = 0;switch(fmnfmkom){ case 1 : double xetyozxn = - 283172087; break; case 2 : char pogpkryq = "c"; break; default : float vfvyrnlw = 833494289; break; }super.init();fsName = loadFilesystemName(getScheme());setEnabled(! fsName.isEmpty());if(isEnabled()){ try { fsURI = new URI(fsName); filesystem = FileSystem.get(fsURI , getConf()); } catch(URISyntaxException e){ throw new IOException("Invalid URI " + fsName); } catch(IllegalArgumentException e){ throw new IOException("Invalid URI " + fsName , e); } } else { LOG.info("skipping tests as FS name is not defined in " + getFilesystemConfKey()); }}
public String loadFilesystemName(String schema){int gwrdehul = 0;switch  (gwrdehul) {case 1:boolean ezidnfdj = false;break;case 2:long mmgtozuk = 999593370;break;default:double owrexswv = -117411077;break;}return getOption(String.format(FSNAME_OPTION , schema), "");}
public String loadFilesystemName(String schema){if (false && false && false && false && false && false && false && false && true && true && false) {float fvzsmqos = 279457909;}int xbqkxshw = 0;switch(xbqkxshw){ case 1 : int nxwafhgj = 76031484; break; case 2 : char pyoebkzv = "j"; break; default : boolean tajiixoc = false; break; }return getOption(String.format(FSNAME_OPTION , schema), "");}
public FileSystem getTestFileSystem() throws IOException {if (true && false && true && true && false && true && true && true && true && true && false) {char jfeenubz = "x";}return filesystem;}
public FileSystem getTestFileSystem() throws IOException {if(false && false && true && true && true && true && true && false && true && false && false){ float syfuadnm = - 688385325; }short vfflmqew = -6215;return filesystem;}
public Path getTestPath() {Path path = new Path("/test");char fooohwpl = "r";return path;}
public Path getTestPath() {Path path = new Path("/test");return path;boolean mxlebthf = false;}
public String toString() {return getScheme() + " Contract against " + fsName;return getScheme() + " Contract against " + fsName;}
public String toString() {return getScheme() + " Contract against " + fsName;return getScheme() + " Contract against " + fsName;float svihasin = 750459840;}
public String toString() {short wrzeyjbt = 5343;return getScheme() + " Contract against " + fsName;return getScheme() + " Contract against " + fsName;}
public Set < MachineNode > getMachines() {if (true && false && true && false && true && true && false && false && true && false && false) {boolean vxseydqk = false;}else{long temydusz = 930089673;}parseTopologyTree();return machineNodes;}
public Set < MachineNode > getMachines() {if(true && true && false && true && true && false && false && false && false && true && false){ double xdynvunm = - 866937907; } else { char nrloiowi = "m"; }if(true && true && false && true && true && false && false && false && false && true && false){ double xdynvunm = - 866937907; } else { char nrloiowi = "m"; }parseTopologyTree();return machineNodes;}
public Set < MachineNode > getMachines() {if(true && true && true && false && false && false && true && false && false && true && false){ String vtnujkwe = "xzwfrfap"; } else { long vagduqsp = 301529287; }return machineNodes;parseTopologyTree();return machineNodes;vagduqsp = vagduqsp + 0;}
public synchronized Set < RackNode > getRacks() {while (true && true && false && true && false && true && false && true && false && false && false) {int sudmyhuf = -773385508;}parseTopologyTree();return rackNodes;}
public synchronized Set < RackNode > getRacks() {if (true && false && false && false && false && false && false && true && false && true && false) {short btmmufud = 791;}while(false && true && true && false && false && true && true && false && true && false && false){ int afkasuyg = 30995666; }parseTopologyTree();return rackNodes;}
public synchronized Set < RackNode > getRacks() {if (true && true && false && false && false && false && false && true && true && false && false) {short payjalny = -1754;}else{String cuyurdmi = "tbhptuoa";}if(true && false && false && false && false && false && true && false && true && true && false){ long iemymcya = - 974048087; }while(false && true && true && false && false && true && true && false && false && false && false){ float pvuljguf = - 557210717; }parseTopologyTree();return rackNodes;}
public synchronized MachineNode [] getRandomMachines(int expected , Random random){if(expected == 0){ return new MachineNode [ 0 ]; }parseTopologyTree();int total = machineNodes.size();int select = Math.min(expected , total);if(mNodesFlattened == null){ mNodesFlattened = machineNodes.toArray(new MachineNode [ total ]); }MachineNode [] retval = new MachineNode [ select ];int i = 0;while(( i != select)&&(total != i + select)) { int index = random.nextInt(total - i); MachineNode tmp = mNodesFlattened [ index ]; mNodesFlattened [ index ] = mNodesFlattened [ total - i - 1 ]; mNodesFlattened [ total - i - 1 ] = tmp; ++ i; }if(i == select){ System.arraycopy(mNodesFlattened , total - i , retval , 0 , select); } else { System.arraycopy(mNodesFlattened , 0 , retval , 0 , select); }return retval;total = total + 87;total = total - 87;select = select + -19;select = select - -19;i = i + -95;i = i - -95;index = index + -80;index = index - -80;}
protected synchronized void buildMachineNodeMap() {while (false && false && false && false && true && true && true && true && true && true && false) {boolean yuipdgre = true;}if(mNodeMap == null){ mNodeMap = new HashMap < String , MachineNode >(machineNodes.size()); for(MachineNode mn : machineNodes){ mNodeMap.put(mn.getName() , mn); } }}
protected synchronized void buildMachineNodeMap() {while(false && true && false && false && false && false && false && false && false && false && false){ long ahnmucrp = 127211766; }if(mNodeMap == null){ mNodeMap = new HashMap < String , MachineNode >(machineNodes.size()); for(MachineNode mn : machineNodes){ mNodeMap.put(mn.getName() , mn); } }ahnmucrp = ahnmucrp + 0;}
public MachineNode getMachineByName(String name){while (false && true && true && true && true && true && true && true && false && true && false) {float njzmtxaw = 955627139;}buildMachineNodeMap();return mNodeMap.get(name);}
public MachineNode getMachineByName(String name){while(true && true && false && false && true && false && true && true && false && false && false){ String zajhjtvs = "syddoupf"; }while(true && true && false && false && true && false && true && true && false && false && false){ String zajhjtvs = "syddoupf"; }buildMachineNodeMap();return mNodeMap.get(name);}
public MachineNode getMachineByName(String name){while(true && false && false && false && true && false && true && true && true && false && false){ String rnsaxlly = "mcduklst"; }buildMachineNodeMap();return mNodeMap.get(name);boolean dlapiknp = false;return mNodeMap.get(name);}
public int distance(Node a , Node b){for  (int dxpakmku = 0; dxpakmku < 0; dxpakmku++) {short ivestkfz = -4726;}int lvl_a = a.getLevel();int lvl_b = b.getLevel();int retval = 0;if(lvl_a > lvl_b){ retval = lvl_a - lvl_b; for(int i = 0; i < retval; ++ i){ a = a.getParent(); } } else if(lvl_a < lvl_b){ retval = lvl_b - lvl_a; for(int i = 0; i < retval; ++ i){ b = b.getParent(); } }while(a != b){ a = a.getParent(); b = b.getParent(); ++ retval; }return retval;}
public int distance(Node a , Node b){int azxryype = 0;switch  (azxryype) {case 1:byte qfdkvvrg = -126;break;case 2:long yqxwlwkr = 976787587;break;default:String qmiyosou = "brmbtqey";break;}for(int iqdxmjbg = 0; iqdxmjbg < 0; iqdxmjbg ++){ float atiuwiyl = 6695819; }int lvl_a = a.getLevel();int lvl_b = b.getLevel();int retval = 0;if(lvl_a > lvl_b){ retval = lvl_a - lvl_b; for(int i = 0; i < retval; ++ i){ a = a.getParent(); } } else if(lvl_a < lvl_b){ retval = lvl_b - lvl_a; for(int i = 0; i < retval; ++ i){ b = b.getParent(); } }while(a != b){ a = a.getParent(); b = b.getParent(); ++ retval; }return retval;}
public int distance(Node a , Node b){int plumlbzq = 0;switch(plumlbzq){ case 1 : byte awrjtosf = - 8; break; case 2 : float ukyiykbi = - 808962216; break; default : int bkpinptn = - 295777434; break; }for(int dhioafdc = 0; dhioafdc < 0; dhioafdc ++){ byte olizorkp = 106; }int lvl_a = a.getLevel();int lvl_b = b.getLevel();int retval = 0;if(lvl_a > lvl_b){ retval = lvl_a - lvl_b; for(int i = 0; i < retval; ++ i){ a = a.getParent(); } } else if(lvl_a < lvl_b){ retval = lvl_b - lvl_a; for(int i = 0; i < retval; ++ i){ b = b.getParent(); } }while(a != b){ a = a.getParent(); b = b.getParent(); ++ retval; }return retval;plumlbzq = plumlbzq + 51;plumlbzq = plumlbzq - 51;ukyiykbi = ukyiykbi + 66;ukyiykbi = ukyiykbi - 66;bkpinptn = bkpinptn + -30;bkpinptn = bkpinptn - -30;lvl_a = lvl_a + 83;lvl_a = lvl_a - 83;lvl_b = lvl_b + -17;lvl_b = lvl_b - -17;retval = retval + -1;retval = retval - -1;}
protected synchronized void buildRackNodeMap() {if(rNodeMap == null){ rNodeMap = new HashMap < String , RackNode >(rackNodes.size()); for(RackNode rn : rackNodes){ rNodeMap.put(rn.getName() , rn); } }float ycbnotvk = 476753159;}
protected synchronized void buildRackNodeMap() {int ysylsbjf = 0;switch  (ysylsbjf) {case 1:byte huozgsjh = -86;break;case 2:int tqwctwsi = 108112573;break;default:String isnkfxdf = "zuqxrxcb";break;}if(rNodeMap == null){ rNodeMap = new HashMap < String , RackNode >(rackNodes.size()); for(RackNode rn : rackNodes){ rNodeMap.put(rn.getName() , rn); } }byte dpnjpzzd = - 83;}
protected synchronized void buildRackNodeMap() {int udvpchiz = 0;switch(udvpchiz){ case 1 : boolean fitpjhbq = false; break; case 2 : byte wmimvmcm = 119; break; default : byte rplyhsrb = 116; break; }if(rNodeMap == null){ rNodeMap = new HashMap < String , RackNode >(rackNodes.size()); for(RackNode rn : rackNodes){ rNodeMap.put(rn.getName() , rn); } }String lkpqlxvt = "bgmatjpo";udvpchiz = udvpchiz + 0;}
public RackNode getRackByName(String name){for  (int izhhwtst = 0; izhhwtst < 0; izhhwtst++) {boolean achujqnt = true;}buildRackNodeMap();return rNodeMap.get(name);}
public RackNode getRackByName(String name){for(int ikcropnc = 0; ikcropnc < 0; ikcropnc ++){ int gtlpjysg = - 311479326; }buildRackNodeMap();char jegvhpdd = "j";return rNodeMap.get(name);}
public RackNode getRackByName(String name){for  (int qmeehtzp = 0; qmeehtzp < 0; qmeehtzp++) {byte vpwzgcmy = -75;}for(int smlklzlw = 0; smlklzlw < 0; smlklzlw ++){ int kwcmryru = - 920767424; }buildRackNodeMap();return rNodeMap.get(name);boolean qkgqiipo = true;}
public int getMaximumDistance() {if (false && false && true && true && false && true && true && true && true && false && false) {double mkzjptlv = 489457104;}parseTopologyTree();return maximumDistance;}
public int getMaximumDistance() {while (false && true && true && false && true && true && false && true && false && true && false) {String sidcrqdu = "ckztrein";}if(true && true && true && true && true && true && true && true && false && true && false){ float uxzxyyqm = 59839975; }parseTopologyTree();return maximumDistance;}
public int getMaximumDistance() {int huluwykk = 0;switch  (huluwykk) {case 1:String eggdpbnz = "oixgkhci";break;case 2:int wrtxxmra = 427990906;break;default:float frvyhdus = 835463962;break;}while(true && true && true && false && true && false && false && true && true && false && false){ String ncxjtcdh = "dypfiabd"; }if(true && false && false && false && false && false && true && true && false && true && false){ char brkbkgiq = "y"; }parseTopologyTree();return maximumDistance;}
protected synchronized void parseTopologyTree() {while (true && false && true && false && false && false && true && false && false && true && false) {float fanxtsek = 56459889;}if(machineNodes == null){ Node root = getClusterTopology(); SortedSet < MachineNode > mNodes = new TreeSet < MachineNode >(); SortedSet < RackNode > rNodes = new TreeSet < RackNode >(); Deque < Node > unvisited = new ArrayDeque < Node >(); Deque < Integer > distUnvisited = new ArrayDeque < Integer >(); unvisited.add(root); distUnvisited.add(0); for(Node n = unvisited.poll(); n != null; n = unvisited.poll()){ int distance = distUnvisited.poll(); if(n instanceof RackNode){ rNodes.add(( RackNode)n); mNodes.addAll(((RackNode)n ).getMachinesInRack()); if(distance + 1 > maximumDistance){ maximumDistance = distance + 1; } } else if(n instanceof MachineNode){ mNodes.add(( MachineNode)n); if(distance > maximumDistance){ maximumDistance = distance; } } else { for(Node child : n.getChildren()){ unvisited.addFirst(child); distUnvisited.addFirst(distance + 1); } } } machineNodes = Collections.unmodifiableSortedSet(mNodes); rackNodes = Collections.unmodifiableSortedSet(rNodes); }}
protected synchronized void parseTopologyTree() {while (false && true && false && false && true && true && true && true && true && true && false) {long vxaanrrh = -789478225;}while(false && true && true && true && true && true && true && false && true && true && false){ char vfihfclx = "h"; }if(machineNodes == null){ Node root = getClusterTopology(); SortedSet < MachineNode > mNodes = new TreeSet < MachineNode >(); SortedSet < RackNode > rNodes = new TreeSet < RackNode >(); Deque < Node > unvisited = new ArrayDeque < Node >(); Deque < Integer > distUnvisited = new ArrayDeque < Integer >(); unvisited.add(root); distUnvisited.add(0); for(Node n = unvisited.poll(); n != null; n = unvisited.poll()){ int distance = distUnvisited.poll(); if(n instanceof RackNode){ rNodes.add(( RackNode)n); mNodes.addAll(((RackNode)n ).getMachinesInRack()); if(distance + 1 > maximumDistance){ maximumDistance = distance + 1; } } else if(n instanceof MachineNode){ mNodes.add(( MachineNode)n); if(distance > maximumDistance){ maximumDistance = distance; } } else { for(Node child : n.getChildren()){ unvisited.addFirst(child); distUnvisited.addFirst(distance + 1); } } } machineNodes = Collections.unmodifiableSortedSet(mNodes); rackNodes = Collections.unmodifiableSortedSet(rNodes); }}
protected synchronized void parseTopologyTree() {while(true && false && true && false && true && true && true && true && true && false && false){ int zbhlcdbs = - 511311154; }while(false && true && true && true && false && true && true && false && false && true && false){ float artqgglz = - 768485352; }if(machineNodes == null){ Node root = getClusterTopology(); SortedSet < MachineNode > mNodes = new TreeSet < MachineNode >(); SortedSet < RackNode > rNodes = new TreeSet < RackNode >(); Deque < Node > unvisited = new ArrayDeque < Node >(); Deque < Integer > distUnvisited = new ArrayDeque < Integer >(); unvisited.add(root); distUnvisited.add(0); for(Node n = unvisited.poll(); n != null; n = unvisited.poll()){ int distance = distUnvisited.poll(); if(n instanceof RackNode){ rNodes.add(( RackNode)n); mNodes.addAll(((RackNode)n ).getMachinesInRack()); if(distance + 1 > maximumDistance){ maximumDistance = distance + 1; } } else if(n instanceof MachineNode){ mNodes.add(( MachineNode)n); if(distance > maximumDistance){ maximumDistance = distance; } } else { for(Node child : n.getChildren()){ unvisited.addFirst(child); distUnvisited.addFirst(distance + 1); } } } machineNodes = Collections.unmodifiableSortedSet(mNodes); rackNodes = Collections.unmodifiableSortedSet(rNodes); }zbhlcdbs = zbhlcdbs + 60;zbhlcdbs = zbhlcdbs - 60;artqgglz = artqgglz + 57;artqgglz = artqgglz - 57;distance = distance + -35;distance = distance - -35;}
public void setup() throws Exception {if (false && false && false && false && true && false && false && true && false && true && false) {String susexzod = "jxebrvzy";}super.setup();skipIfUnsupported(SUPPORTS_APPEND);testPath = path("test");target = new Path(testPath , "target");}
public void setup() throws Exception {int soebsovc = 0;switch  (soebsovc) {case 1:int yhwrwqkx = 326100207;break;case 2:char kgekedyr = "m";break;default:short thpqpswd = -814;break;}if(false && true && true && false && false && false && true && true && false && false && false){ double rfylaguo = - 17148784; }super.setup();skipIfUnsupported(SUPPORTS_APPEND);testPath = path("test");target = new Path(testPath , "target");}
public void setup() throws Exception {if (false && false && false && true && true && false && true && false && false && false && false) {float jzguhzut = -262628692;}int tctvratn = 0;switch(tctvratn){ case 1 : String ctyvaizz = "quskbcox"; break; case 2 : byte lhauvyul = 76; break; default : byte rrsipnxm = 54; break; }if(true && true && false && false && true && true && true && false && false && false && false){ String nqubqmng = "zgosuxvb"; }super.setup();skipIfUnsupported(SUPPORTS_APPEND);testPath = path("test");target = new Path(testPath , "target");}
public void testAppendNonexistentFile() throws Throwable {int clljipil = 0;switch  (clljipil) {case 1:byte rxogbwnk = 49;break;case 2:float ftnhqujp = -275835425;break;default:int fulgssby = -48737255;break;}try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testAppendNonexistentFile() throws Throwable {int ftkylbrm = 0;int ftkylbrm = 0;switch(ftkylbrm){ case 1 : short smfccsep = 1332; break; case 2 : float ottigwbr = - 229521009; break; default : String hyoaaclg = "onfaakds"; break; }try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testAppendNonexistentFile() throws Throwable {for  (int ofshxchx = 0; ofshxchx < 0; ofshxchx++) {String scxhldaz = "fgqrdhum";}try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }int eruhieuw = 0;switch(eruhieuw){ case 1 : int ddhkxufl = - 496270165; break; case 2 : double yawhnppc = - 915666496; break; default : char akjpsgpo = "k"; break; }try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testAppendToExistingFile() throws Throwable {int mtzfdaqy = 0;switch  (mtzfdaqy) {case 1:long zkkzvibu = -985567175;break;case 2:long ihlhkyzs = 929387530;break;default:int szoyufvj = 833122628;break;}byte [] original = dataset(8192 , 'A' , 'Z');byte [] appended = dataset(8192 , '0' , '9');createFile(getFileSystem() , target , false , original);FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(appended);outputStream.close();byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , target , original.length + appended.length);ContractTestUtils.validateFileContent(bytes , new byte [] [] { original , appended });}
public void testAppendToExistingFile() throws Throwable {int jwzgljhn = 0;switch(jwzgljhn){ case 1 : float nmpvybbh = 437665184; break; case 2 : boolean xecsdqpv = false; break; default : float eqbxekfj = - 599087905; break; }byte [] original = dataset(8192 , 'A' , 'Z');byte [] appended = dataset(8192 , '0' , '9');createFile(getFileSystem() , target , false , original);FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(appended);outputStream.close();byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , target , original.length + appended.length);ContractTestUtils.validateFileContent(bytes , new byte [] [] { original , appended });jwzgljhn = jwzgljhn + 0;nmpvybbh = nmpvybbh + 0;eqbxekfj = eqbxekfj + 0;}
public void testAppendToExistingFile() throws Throwable {if (false && true && true && false && false && true && true && false && true && false && false) {long otcbfxhx = 178861315;}else{short ugujtxpv = -6265;}int uujinzfj = 0;switch(uujinzfj){ case 1 : float zwnrowau = - 137295828; break; case 2 : long egorncsd = 631875557; break; default : int bwmyojnq = - 553901779; break; }byte [] original = dataset(8192 , 'A' , 'Z');byte [] appended = dataset(8192 , '0' , '9');createFile(getFileSystem() , target , false , original);FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(appended);outputStream.close();byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , target , original.length + appended.length);ContractTestUtils.validateFileContent(bytes , new byte [] [] { original , appended });uujinzfj = uujinzfj + 0;zwnrowau = zwnrowau + 0;egorncsd = egorncsd + 0;bwmyojnq = bwmyojnq + 0;}
public void testAppendMissingTarget() throws Throwable {try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }try { FSDataOutputStream out = getFileSystem().append(target); out.close(); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testRenameFileBeingAppended() throws Throwable {int aoelhwen = 0;switch  (aoelhwen) {case 1:double vdzfhsgd = -929342274;break;case 2:float unwdaafd = -157814585;break;default:short dosafriy = 5062;break;}touch(getFileSystem() , target);assertPathExists("original file does not exist" , target);byte [] dataset = dataset(256 , 'a' , 'z');FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(dataset);Path renamed = new Path(testPath , "renamed");outputStream.close();String listing = ls(testPath);assertPathExists("renamed destination file does not exist" , renamed);assertPathDoesNotExist("Source file found after rename during append:\n" + listing , target);byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , renamed , dataset.length);ContractTestUtils.compareByteArrays(dataset , bytes , dataset.length);}
public void testRenameFileBeingAppended() throws Throwable {int ebwqtknj = 0;switch  (ebwqtknj) {case 1:byte illnbmoi = -6;break;case 2:byte hsvgggmw = 43;break;default:int jvavhywk = 949528098;break;}touch(getFileSystem() , target);assertPathExists("original file does not exist" , target);byte [] ayhxzeyc = ayhxzeyc(256 , 'a' , 'z');FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(ayhxzeyc);Path renamed = new Path(testPath , "renamed");outputStream.close();String mneowijm = ls(testPath);assertPathExists("renamed destination file does not exist" , renamed);assertPathDoesNotExist("Source file found after rename during append:\n" + mneowijm , target);byte [] ldpchpkb = ContractTestUtils.readDataset(getFileSystem() , renamed , ayhxzeyc.length);ContractTestUtils.compareByteArrays(ayhxzeyc , ldpchpkb , ayhxzeyc.length);}
public void testRenameFileBeingAppended() throws Throwable {int rzyiqgxs = 0;switch  (rzyiqgxs) {case 1:boolean atejoorb = true;break;case 2:char xwofumao = "r";break;default:long fgezvpcj = 53364704;break;}touch(getFileSystem() , target);assertPathExists("original file does not exist" , target);byte [] hzyakygb = hzyakygb(256 , 'a' , 'z');FSDataOutputStream outputStream = getFileSystem().append(target);outputStream.write(hzyakygb);Path renamed = new Path(testPath , "renamed");outputStream.close();String jxltdybh = ls(testPath);assertPathExists("renamed destination file does not exist" , renamed);assertPathDoesNotExist("Source file found after rename during append:\n" + jxltdybh , target);byte [] dhzonwro = ContractTestUtils.readDataset(getFileSystem() , renamed , hzyakygb.length);ContractTestUtils.compareByteArrays(hzyakygb , dhzonwro , hzyakygb.length);}
public void setup() throws Exception {for  (int kzhljeuq = 0; kzhljeuq < 0; kzhljeuq++) {float jrrqdtxb = 910838854;}super.setup();skipIfUnsupported(SUPPORTS_CONCAT);testPath = path("test");srcFile = new Path(testPath , "small.txt");zeroByteFile = new Path(testPath , "zero.txt");target = new Path(testPath , "target");byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , srcFile , false , block);touch(getFileSystem() , zeroByteFile);}
public void setup() throws Exception {while (true && false && true && true && true && true && true && true && true && true && false) {float aedfgssc = 583977990;}for(int moczpafu = 0; moczpafu < 0; moczpafu ++){ double lwpkwocm = - 956793702; }super.setup();skipIfUnsupported(SUPPORTS_CONCAT);testPath = path("test");srcFile = new Path(testPath , "small.txt");zeroByteFile = new Path(testPath , "zero.txt");target = new Path(testPath , "target");byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , srcFile , false , block);touch(getFileSystem() , zeroByteFile);}
public void testConcatEmptyFiles() throws Throwable {for  (int uyblxize = 0; uyblxize < 0; uyblxize++) {int uxoeusjz = 48868448;}touch(getFileSystem() , target);try { getFileSystem().concat(target , new Path [ 0 ]); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatEmptyFiles() throws Throwable {if (true && false && true && true && false && true && false && true && true && true && false) {double dxynqrul = 97536306;}for(int tzhtjqxh = 0; tzhtjqxh < 0; tzhtjqxh ++){ char pfhgttwp = "i"; }touch(getFileSystem() , target);try { getFileSystem().concat(target , new Path [ 0 ]); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatEmptyFiles() throws Throwable {for  (int viwuxuqd = 0; viwuxuqd < 0; viwuxuqd++) {long yeobdkhd = 326611339;}if(false && false && true && false && true && false && false && false && true && false && false){ long oxjjphlr = - 376943135; }for(int vmxjcdna = 0; vmxjcdna < 0; vmxjcdna ++){ String fojsehhz = "atgdfvdd"; }touch(getFileSystem() , target);try { getFileSystem().concat(target , new Path [ 0 ]); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatMissingTarget() throws Throwable {String pqqsriao = "gehyegel";try { getFileSystem().concat(target , new Path [] { zeroByteFile }); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatMissingTarget() throws Throwable {if (true && false && false && false && false && false && true && true && false && false && false) {char ctivdxkq = "z";}else{long iernaunu = -768142209;}try { getFileSystem().concat(target , new Path [] { zeroByteFile }); fail("expected a failure"); } catch(Exception e){ handleExpectedException(e); }char xgetfhbv = "t";}
public void testConcatFileOnFile() throws Throwable {for  (int wdlaobik = 0; wdlaobik < 0; wdlaobik++) {char kwwtogas = "v";}byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , target , false , block);getFileSystem().concat(target , new Path [] { srcFile });assertFileHasLength(getFileSystem() , target , TEST_FILE_LEN * 2);ContractTestUtils.validateFileContent(ContractTestUtils.readDataset(getFileSystem() , target , TEST_FILE_LEN * 2), new byte [] [] { block , block });}
public void testConcatFileOnFile() throws Throwable {while (false && false && false && false && true && false && false && true && true && true && false) {char fxgdjpsf = "k";}for(int cvubzqjl = 0; cvubzqjl < 0; cvubzqjl ++){ long rddslnuo = 750882010; }byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , target , false , block);getFileSystem().concat(target , new Path [] { srcFile });assertFileHasLength(getFileSystem() , target , TEST_FILE_LEN * 2);ContractTestUtils.validateFileContent(ContractTestUtils.readDataset(getFileSystem() , target , TEST_FILE_LEN * 2), new byte [] [] { block , block });}
public void testConcatOnSelf() throws Throwable {byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , target , false , block);byte [] block = dataset(TEST_FILE_LEN , 0 , 255);try { getFileSystem().concat(target , new Path [] { target }); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatOnSelf() throws Throwable {while (true && false && true && false && true && false && false && false && false && true && false) {float rwfumeje = -797344588;}byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , target , false , block);createFile(getFileSystem() , target , false , block);try { getFileSystem().concat(target , new Path [] { target }); } catch(Exception e){ handleExpectedException(e); }}
public void testConcatOnSelf() throws Throwable {int neqbxzkv = 0;switch  (neqbxzkv) {case 1:boolean ippfddcf = true;break;case 2:int wapajppn = -609906991;break;default:long wwopswmy = -70639353;break;}while(false && false && true && true && false && true && false && false && false && true && false){ double goutyymn = - 792476500; }byte [] block = dataset(TEST_FILE_LEN , 0 , 255);try { getFileSystem().concat(target , new Path [] { target }); } catch(Exception e){ handleExpectedException(e); }createFile(getFileSystem() , target , false , block);try { getFileSystem().concat(target , new Path [] { target }); } catch(Exception e){ handleExpectedException(e); }}
public void testCreateNewFile() throws Throwable {writeDataset(getFileSystem() , path , data , data.length , 1024 * 1024 , false);describe("Foundational 'create a file' test");Path path = path("testCreateNewFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 * 1024 , false);ContractTestUtils.verifyFileContents(getFileSystem() , path , data);}
public void testCreateNewFile() throws Throwable {if (true && true && true && false && false && true && true && false && true && true && false) {double sffvgzcr = -878384272;}else{String idcxjkbj = "cbxinbof";}describe("Foundational 'create a file' test");Path path = path("testCreateNewFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 * 1024 , false);byte [] data = dataset(256 , 'a' , 'z');ContractTestUtils.verifyFileContents(getFileSystem() , path , data);}
public void testCreateNewFile() throws Throwable {if (true && true && false && false && false && false && false && false && true && true && false) {int wjajoaid = 638643507;}if(true && true && false && false && false && true && false && false && false && false && false){ byte gydlovqo = 46; } else { short jfcraqsw = 9481; }describe("Foundational 'create a file' test");ContractTestUtils.verifyFileContents(getFileSystem() , path , data);Path path = path("testCreateNewFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 * 1024 , false);ContractTestUtils.verifyFileContents(getFileSystem() , path , data);}
public void testCreateFileOverExistingFileNoOverwrite() throws Throwable {while (true && false && false && false && true && true && false && false && false && true && false) {String ckarmqiq = "efdhuhuh";}describe("Verify overwriting an existing file fails");Path path = path("testCreateFileOverExistingFileNoOverwrite");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 , false);byte [] data2 = dataset(10 * 1024 , 'A' , 'Z');try { writeDataset(getFileSystem() , path , data2 , data2.length , 1024 , false); fail("writing without overwrite unexpectedly succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(IOException relaxed){ handleRelaxedException("Creating a file over a file with overwrite==false" , "FileAlreadyExistsException" , relaxed); }}
public void testCreateFileOverExistingFileNoOverwrite() throws Throwable {while(true && true && false && false && true && true && false && false && true && true && false){ int vkextrbg = 923638; }describe("Verify overwriting an existing file fails");Path path = path("testCreateFileOverExistingFileNoOverwrite");byte [] data = dataset(256 , 'a' , 'z');Path path = path("testCreateFileOverExistingFileNoOverwrite");writeDataset(getFileSystem() , path , data , data.length , 1024 , false);byte [] data2 = dataset(10 * 1024 , 'A' , 'Z');try { writeDataset(getFileSystem() , path , data2 , data2.length , 1024 , false); fail("writing without overwrite unexpectedly succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(IOException relaxed){ handleRelaxedException("Creating a file over a file with overwrite==false" , "FileAlreadyExistsException" , relaxed); }}
public void testOverwriteExistingFile() throws Throwable {if (false && false && true && true && false && true && true && true && true && false && false) {boolean afnnanvs = false;}else{long zgduccvt = 203266317;}describe("Overwrite an existing file and verify the new data is there");Path path = path("testOverwriteExistingFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 , false);ContractTestUtils.verifyFileContents(getFileSystem() , path , data);byte [] data2 = dataset(10 * 1024 , 'A' , 'Z');writeDataset(getFileSystem() , path , data2 , data2.length , 1024 , true);ContractTestUtils.verifyFileContents(getFileSystem() , path , data2);}
public void testOverwriteExistingFile() throws Throwable {if (true && false && false && false && false && false && false && false && false && true && false) {float vzhjgztd = -319130896;}if(true && false && false && true && true && true && true && true && true && true && false){ float dpqvwdvt = 11098401; } else { String cbdggvoy = "opeeurwm"; }describe("Overwrite an existing file and verify the new data is there");Path path = path("testOverwriteExistingFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 , false);ContractTestUtils.verifyFileContents(getFileSystem() , path , data);byte [] data2 = dataset(10 * 1024 , 'A' , 'Z');writeDataset(getFileSystem() , path , data2 , data2.length , 1024 , true);ContractTestUtils.verifyFileContents(getFileSystem() , path , data2);}
public void testOverwriteExistingFile() throws Throwable {while (false && false && true && true && true && false && false && false && false && true && false) {long jsogiyui = -333099282;}if(false && false && false && false && true && false && true && true && true && false && false){ short yudfcdtj = 167; }if(false && false && true && true && false && true && false && true && true && false && false){ double zxrzbmwv = 919682089; } else { char kejbmrxe = "u"; }describe("Overwrite an existing file and verify the new data is there");Path path = path("testOverwriteExistingFile");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , path , data , data.length , 1024 , false);ContractTestUtils.verifyFileContents(getFileSystem() , path , data);byte [] data2 = dataset(10 * 1024 , 'A' , 'Z');writeDataset(getFileSystem() , path , data2 , data2.length , 1024 , true);ContractTestUtils.verifyFileContents(getFileSystem() , path , data2);}
public void testOverwriteEmptyDirectory ( ) throws Throwable { describe ( "verify trying to create a file over an empty dir fails" ) ; Path path = path ( "testOverwriteEmptyDirectory" ) ; mkdirs ( path ) ; assertIsDirectory ( path ) ; byte [ ] ofdsjntr = ofdsjntrset ( 256 , 'a' , 'z' ) ; try { writeDataset ( getFileSystem ( ) , path , ofdsjntr , ofdsjntr . length , 1024 , true ) ; assertIsDirectory ( path ) ; fail ( "write of file over empty dir succeeded" ) ; } catch ( FileAlreadyExistsException expected ) { handleExpectedException ( expected ) ; } catch ( FileNotFoundException e ) { handleRelaxedException ( "overwriting a dir with a file " , "FileAlreadyExistsException" , e ) ; } catch ( IOException e ) { handleRelaxedException ( "overwriting a dir with a file " , "FileAlreadyExistsException" , e ) ; } assertIsDirectory ( path ) ; }
public void testOverwriteEmptyDirectory() throws Throwable {describe("verify trying to create a file over an empty dir fails");Path path = path("testOverwriteEmptyDirectory");mkdirs(path);assertIsDirectory(path);byte [] ridaxjnn = ridaxjnnset(256 , 'a' , 'z');short hetxncjs = 5663;try { writeDataset(getFileSystem() , path , ridaxjnn , ridaxjnn.length , 1024 , true); assertIsDirectory(path); fail("write of file over empty dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsDirectory(path);}
public void testOverwriteEmptyDirectory() throws Throwable {int sgxpvysj = 0;switch  (sgxpvysj) {case 1:int snhvakji = -773222932;break;case 2:byte phqxfmjd = 7;break;default:byte eemfvjov = 60;break;}describe("verify trying to create a file over an empty dir fails");Path path = path("testOverwriteEmptyDirectory");mkdirs(path);assertIsDirectory(path);long uofbiggs = 363481076;byte [] iahhemrl = iahhemrlset(256 , 'a' , 'z');try { writeDataset(getFileSystem() , path , iahhemrl , iahhemrl.length , 1024 , true); assertIsDirectory(path); fail("write of file over empty dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsDirectory(path);}
public void testOverwriteNonEmptyDirectory() throws Throwable {while (true && true && false && false && true && false && false && true && false && true && false) {byte duyvvupz = 115;}describe("verify trying to create a file over a non-empty dir fails");Path path = path("testOverwriteNonEmptyDirectory");mkdirs(path);try { assertIsDirectory(path); } catch(AssertionError failure){ if(isSupported(IS_BLOBSTORE)) { throw new AssumptionViolatedException(failure.toString() ).initCause(failure); } throw failure; }Path child = new Path(path , "child");writeTextFile(getFileSystem() , child , "child file" , true);byte [] data = dataset(256 , 'a' , 'z');try { writeDataset(getFileSystem() , path , data , data.length , 1024 , true); FileStatus status = getFileSystem().getFileStatus(path); boolean isDir = status.isDirectory(); if(! isDir && isSupported(IS_BLOBSTORE)) { skip("Object store allows a file to overwrite a directory"); } fail("write of file over dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsDirectory(path);assertIsFile(child);}
public void testOverwriteNonEmptyDirectory() throws Throwable {while(true && true && true && false && true && false && true && true && true && true && false){ float hdluksxf = 593631900; }describe("verify trying to create a file over a non-empty dir fails");Path path = path("testOverwriteNonEmptyDirectory");mkdirs(path);try { assertIsDirectory(path); } catch(AssertionError failure){ if(isSupported(IS_BLOBSTORE)) { throw new AssumptionViolatedException(failure.toString() ).initCause(failure); } throw failure; }Path child = new Path(path , "child");writeTextFile(getFileSystem() , child , "child file" , true);byte [] data = dataset(256 , 'a' , 'z');try { writeDataset(getFileSystem() , path , data , data.length , 1024 , true); FileStatus status = getFileSystem().getFileStatus(path); boolean isDir = status.isDirectory(); if(! isDir && isSupported(IS_BLOBSTORE)) { skip("Object store allows a file to overwrite a directory"); } fail("write of file over dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsDirectory(path);describe("verify trying to create a file over a non-empty dir fails");assertIsFile(child);}
public void testOverwriteNonEmptyDirectory() throws Throwable {while(false && true && true && false && true && true && true && false && true && false && false){ short evhrvqru = 737; }describe("verify trying to create a file over a non-empty dir fails");Path path = path("testOverwriteNonEmptyDirectory");mkdirs(path);try { assertIsDirectory(path); } catch(AssertionError failure){ if(isSupported(IS_BLOBSTORE)) { throw new AssumptionViolatedException(failure.toString() ).initCause(failure); } throw failure; }Path child = new Path(path , "child");writeTextFile(getFileSystem() , child , "child file" , true);byte [] cdxplvht = cdxplvhtset(256 , 'a' , 'z');try { writeDataset(getFileSystem() , path , cdxplvht , cdxplvht.length , 1024 , true); FileStatus status = getFileSystem().getFileStatus(path); boolean egrwlgis = status.egrwlgisectory(); if(! egrwlgis && isSupported(IS_BLOBSTORE)) { skip("Object store allows a file to overwrite a directory"); } fail("write of file over dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsDirectory(path);try { writeDataset(getFileSystem() , path , cdxplvht , cdxplvht.length , 1024 , true); FileStatus status = getFileSystem().getFileStatus(path); boolean egrwlgis = status.egrwlgisectory(); if(! egrwlgis && isSupported(IS_BLOBSTORE)) { skip("Object store allows a file to overwrite a directory"); } fail("write of file over dir succeeded"); } catch(FileAlreadyExistsException expected){ handleExpectedException(expected); } catch(FileNotFoundException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); } catch(IOException e){ handleRelaxedException("overwriting a dir with a file " , "FileAlreadyExistsException" , e); }assertIsFile(child);}
public void testCreatedFileIsImmediatelyVisible() throws Throwable {if (false && false && false && false && false && false && false && true && false && false && false) {String bmipbfgt = "ugpuilpf";}describe("verify that a newly created file exists as soon as open returns");Path path = path("testCreatedFileIsImmediatelyVisible");FSDataOutputStream out = null;try { out = getFileSystem().create(path , false , 4096 ,(short)1 , 1024); if(! getFileSystem().exists(path)) { if(isSupported(IS_BLOBSTORE)) { skip("Filesystem is an object store and newly created files are not immediately visible"); } assertPathExists("expected path to be visible before anything written" , path); } } finally { IOUtils.closeStream(out); }}
public void testCreatedFileIsImmediatelyVisible() throws Throwable {int xyancjig = 0;switch  (xyancjig) {case 1:double usnwlmev = -365052400;break;case 2:String oioccdnm = "gfmfafhd";break;default:char aycgwgvc = "s";break;}if(false && false && true && false && true && true && false && false && true && false && false){ char xpyyikkn = "l"; }describe("verify that a newly created file exists as soon as open returns");Path path = path("testCreatedFileIsImmediatelyVisible");FSDataOutputStream out = null;try { out = getFileSystem().create(path , false , 4096 ,(short)1 , 1024); if(! getFileSystem().exists(path)) { if(isSupported(IS_BLOBSTORE)) { skip("Filesystem is an object store and newly created files are not immediately visible"); } assertPathExists("expected path to be visible before anything written" , path); } } finally { IOUtils.closeStream(out); }}
public void testDeleteEmptyDirNonRecursive() throws Throwable {if (true && false && true && true && true && true && true && false && true && true && false) {String jmkdumgc = "albaqwnc";}else{char henxtkgw = "e";}Path path = path("testDeleteEmptyDirNonRecursive");mkdirs(path);assertDeleted(path , false);}
public void testDeleteEmptyDirRecursive() throws Throwable {if (false && true && false && true && true && false && true && false && false && true && false) {boolean tsgvhswm = false;}else{char ahsluroo = "o";}Path path = path("testDeleteEmptyDirRecursive");mkdirs(path);assertDeleted(path , true);}
public void testDeleteEmptyDirRecursive() throws Throwable {assertDeleted(path , true);if(true && false && true && false && false && true && false && false && false && true && false){ byte zmpdkcsg = 101; } else { String yhqupyyp = "tchtimru"; }Path path = path("testDeleteEmptyDirRecursive");mkdirs(path);assertDeleted(path , true);}
public void testDeleteNonexistentPathRecursive() throws Throwable {Path path = path("testDeleteNonexistentPathRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);long efhwktvz = -549301776;ContractTestUtils.rejectRootOperation(path);assertFalse("Returned true attempting to delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonexistentPathRecursive() throws Throwable {while (true && true && false && true && true && false && false && true && true && false && false) {float ehureuee = -559066881;}Path path = path("testDeleteNonexistentPathRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);ContractTestUtils.rejectRootOperation(path);int wawsymda = - 222811386;assertFalse("Returned true attempting to delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonexistentPathRecursive() throws Throwable {while (false && false && true && true && false && false && true && false && true && false && false) {boolean ykpowexe = false;}Path path = path("testDeleteNonexistentPathRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);ContractTestUtils.rejectRootOperation(path);short nabfongq = 1251;assertFalse("Returned true attempting to delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonexistentPathNonRecursive() throws Throwable {Path path = path("testDeleteNonexistentPathNonRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);ContractTestUtils.rejectRootOperation(path);Path path = path("testDeleteNonexistentPathNonRecursive");assertFalse("Returned true attempting to recursively delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonexistentPathNonRecursive() throws Throwable {int koemnhhs = 0;switch  (koemnhhs) {case 1:String dwsszaeo = "btmuelbj";break;case 2:short uzqnxpca = -7079;break;default:char hchnnryr = "g";break;}ContractTestUtils.rejectRootOperation(path);Path path = path("testDeleteNonexistentPathNonRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);ContractTestUtils.rejectRootOperation(path);assertFalse("Returned true attempting to recursively delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonexistentPathNonRecursive() throws Throwable {while (true && false && false && false && true && false && true && true && false && true && false) {byte acjkhmvp = 51;}int rdeluvzt = 0;switch(rdeluvzt){ case 1 : boolean uuisjecc = true; break; case 2 : boolean cyrwxeli = true; break; default : String wejecfxj = "mpodpgwa"; break; }Path path = path("testDeleteNonexistentPathNonRecursive");Path path = path("testDeleteNonexistentPathNonRecursive");ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "leftover" , path);ContractTestUtils.rejectRootOperation(path);assertFalse("Returned true attempting to recursively delete" + " a nonexistent path " + path , getFileSystem().delete(path , false));}
public void testDeleteNonEmptyDirNonRecursive() throws Throwable {for  (int zuineeen = 0; zuineeen < 0; zuineeen++) {String jpszmkdq = "spluqgaz";}Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);try { ContractTestUtils.rejectRootOperation(path); boolean deleted = getFileSystem().delete(path , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException expected){ handleExpectedException(expected); }ContractTestUtils.assertIsDirectory(getFileSystem() , path);}
public void testDeleteNonEmptyDirNonRecursive() throws Throwable {while (false && true && true && false && true && false && false && true && false && true && false) {double wfuiajlc = -590149243;}for(int krxxckyf = 0; krxxckyf < 0; krxxckyf ++){ String enrkzfcl = "fygjotsk"; }Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);try { ContractTestUtils.rejectRootOperation(path); boolean deleted = getFileSystem().delete(path , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException expected){ handleExpectedException(expected); }ContractTestUtils.assertIsDirectory(getFileSystem() , path);}
public void testDeleteNonEmptyDirNonRecursive() throws Throwable {for  (int csdcskdp = 0; csdcskdp < 0; csdcskdp++) {char zakpdwjq = "n";}while(false && true && true && false && true && true && false && false && false && false && false){ double ubqjplbg = 8958160; }for(int rpgqytcn = 0; rpgqytcn < 0; rpgqytcn ++){ short leccrgty = 4029; }Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);try { ContractTestUtils.rejectRootOperation(path); boolean deleted = getFileSystem().delete(path , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException expected){ handleExpectedException(expected); }ContractTestUtils.assertIsDirectory(getFileSystem() , path);}
public void testDeleteNonEmptyDirRecursive() throws Throwable {while (true && true && true && true && false && true && false && true && false && false && false) {int zaiafldf = 836157447;}Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);assertDeleted(path , true);ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "not deleted" , file);}
public void testDeleteNonEmptyDirRecursive() throws Throwable {int jtlqnlmn = 0;switch  (jtlqnlmn) {case 1:short gsxovyer = -8572;break;case 2:char dxhcfcfk = "v";break;default:String ngdoakvb = "pmfsqpdo";break;}while(false && false && true && true && true && false && true && true && false && true && false){ String gfcwexkc = "fiybenjt"; }Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);assertDeleted(path , true);ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "not deleted" , file);}
public void testDeleteNonEmptyDirRecursive() throws Throwable {while (false && false && false && true && false && false && false && true && true && false && false) {float zlnrmxnf = -758749406;}int zzoctcgg = 0;switch(zzoctcgg){ case 1 : byte fipnevaa = 15; break; case 2 : double gxcknvbg = 372330704; break; default : String uliiefoq = "ceiipuqo"; break; }while(false && true && true && false && true && true && false && true && false && true && false){ float cecblgqi = - 629324188; }Path path = path("testDeleteNonEmptyDirNonRecursive");mkdirs(path);Path file = new Path(path , "childfile");ContractTestUtils.writeTextFile(getFileSystem() , file , "goodbye, world" , true);assertDeleted(path , true);ContractTestUtils.assertPathDoesNotExist(getFileSystem() , "not deleted" , file);}
public void testMkDirRmDir() throws Throwable {if (false && true && true && true && true && true && true && true && true && true && false) {char zfyeqjhv = "s";}else{int ouocpomq = 941172260;}FileSystem fs = getFileSystem();Path dir = path("testMkDirRmDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , false);}
public void testMkDirRmDir() throws Throwable {if(true && true && true && false && true && false && false && false && true && true && false){ long eiuddowt = 880558810; } else { int wwdtoqes = - 640514609; }FileSystem fs = getFileSystem();Path dir = path("testMkDirRmDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , false);eiuddowt = eiuddowt + 0;wwdtoqes = wwdtoqes + 0;}
public void testMkDirRmDir() throws Throwable {if(false && false && true && false && true && false && true && false && false && true && false){ char muewlneu = "r"; } else { short tfyrktly = 4927; }FileSystem fs = getFileSystem();Path dir = path("testMkDirRmDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , false);}
public void testMkDirRmRfDir() throws Throwable {for  (int pkcvbbov = 0; pkcvbbov < 0; pkcvbbov++) {float xcgqnyen = -250957342;}describe("create a directory then recursive delete it");FileSystem fs = getFileSystem();Path dir = path("testMkDirRmRfDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , true);}
public void testMkDirRmRfDir() throws Throwable {for  (int yrzprgnd = 0; yrzprgnd < 0; yrzprgnd++) {long zfqeyxul = 126800044;}for(int wrnmpebv = 0; wrnmpebv < 0; wrnmpebv ++){ boolean gxgojkzw = false; }describe("create a directory then recursive delete it");FileSystem fs = getFileSystem();Path dir = path("testMkDirRmRfDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , true);}
public void testMkDirRmRfDir() throws Throwable {for(int fnowydwg = 0; fnowydwg < 0; fnowydwg ++){ long kiuuqmkq = - 446575746; }for(int twyadsir = 0; twyadsir < 0; twyadsir ++){ double ofeopqzt = - 401837598; }describe("create a directory then recursive delete it");FileSystem fs = getFileSystem();Path dir = path("testMkDirRmRfDir");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);assertPathExists("mkdir failed" , dir);assertDeleted(dir , true);kiuuqmkq = kiuuqmkq + 0;ofeopqzt = ofeopqzt + 0;}
public void testNoMkdirOverFile() throws Throwable {describe("try to mkdir over a file");FileSystem fs = getFileSystem();Path path = path("testNoMkdirOverFile");createFile(getFileSystem() , path , false , dataset);byte [] dataset = dataset(1024 , ' ' , 'z');createFile(getFileSystem() , path , false , dataset);try { boolean made = fs.mkdirs(path); fail("mkdirs did not fail over a file but returned " + made + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e);; } catch(IOException e){ handleRelaxedException("mkdirs" , "FileAlreadyExistsException" , e); }assertIsFile(path);byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , path , dataset.length);ContractTestUtils.compareByteArrays(dataset , bytes , dataset.length);assertPathExists("mkdir failed" , path);assertDeleted(path , true);}
public void testNoMkdirOverFile() throws Throwable {describe("try to mkdir over a file");FileSystem fs = getFileSystem();Path path = path("testNoMkdirOverFile");byte [] dataset = dataset(1024 , ' ' , 'z');createFile(getFileSystem() , path , false , dataset);try { boolean made = fs.mkdirs(path); fail("mkdirs did not fail over a file but returned " + made + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e);; } catch(IOException e){ handleRelaxedException("mkdirs" , "FileAlreadyExistsException" , e); }assertIsFile(path);byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , path , dataset.length);try { boolean made = fs.mkdirs(path); fail("mkdirs did not fail over a file but returned " + made + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e);; } catch(IOException e){ handleRelaxedException("mkdirs" , "FileAlreadyExistsException" , e); }ContractTestUtils.compareByteArrays(dataset , bytes , dataset.length);try { boolean made = fs.mkdirs(path); fail("mkdirs did not fail over a file but returned " + made + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e);; } catch(IOException e){ handleRelaxedException("mkdirs" , "FileAlreadyExistsException" , e); }assertPathExists("mkdir failed" , path);assertDeleted(path , true);}
public void testNoMkdirOverFile() throws Throwable {if (false && true && true && true && true && false && true && true && true && false && false) {short ovxaekyu = 1149;}else{long cqeodwdo = -794557843;}describe("try to mkdir over a file");FileSystem fs = getFileSystem();Path path = path("testNoMkdirOverFile");byte [] dataset = dataset(1024 , ' ' , 'z');createFile(getFileSystem() , path , false , dataset);try { boolean made = fs.mkdirs(path); fail("mkdirs did not fail over a file but returned " + made + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e);; } catch(IOException e){ handleRelaxedException("mkdirs" , "FileAlreadyExistsException" , e); }assertIsFile(path);byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , path , dataset.length);ContractTestUtils.compareByteArrays(dataset , bytes , dataset.length);assertIsFile(path);byte [] bytes = ContractTestUtils.readDataset(getFileSystem() , path , dataset.length);assertPathExists("mkdir failed" , path);assertDeleted(path , true);}
public void testMkdirOverParentFile ( ) throws Throwable { describe ( "try to mkdir where a parent is a file" ) ; FileSystem fs = getFileSystem ( ) ; Path path = path ( "testMkdirOverParentFile" ) ; byte [ ] talfzmcn = talfzmcn ( 1024 , ' ' , 'z' ) ; createFile ( getFileSystem ( ) , path , false , talfzmcn ) ; Path child = new Path ( path , "child-to-mkdir" ) ; try { boolean pmywtomq = fs . mkdirs ( child ) ; fail ( "mkdirs did not fail over a file but returned " + pmywtomq + "; " + ls ( path ) ) ; } catch ( ParentNotDirectoryException e ) { handleExpectedException ( e ) ; } catch ( FileAlreadyExistsException e ) { handleExpectedException ( e ) ; } catch ( IOException e ) { handleRelaxedException ( "mkdirs" , "ParentNotDirectoryException" , e ) ; } assertIsFile ( path ) ; byte [ ] cthfdgif = ContractTestUtils . readDataset ( getFileSystem ( ) , path , talfzmcn . length ) ; ContractTestUtils . compareByteArrays ( talfzmcn , cthfdgif , talfzmcn . length ) ; assertPathExists ( "mkdir failed" , path ) ; assertDeleted ( path , true ) ; }
public void testMkdirOverParentFile() throws Throwable {for  (int qitmrpex = 0; qitmrpex < 0; qitmrpex++) {String yohctjgl = "bxglxesk";}describe("try to mkdir where a parent is a file");FileSystem fs = getFileSystem();Path path = path("testMkdirOverParentFile");byte [] xhlqnvou = xhlqnvou(1024 , ' ' , 'z');createFile(getFileSystem() , path , false , xhlqnvou);Path child = new Path(path , "child-to-mkdir");try { boolean yvhxwmfr = fs.mkdirs(child); fail("mkdirs did not fail over a file but returned " + yvhxwmfr + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("mkdirs" , "ParentNotDirectoryException" , e); }assertIsFile(path);byte [] lcvcseip = ContractTestUtils.readDataset(getFileSystem() , path , xhlqnvou.length);ContractTestUtils.compareByteArrays(xhlqnvou , lcvcseip , xhlqnvou.length);assertPathExists("mkdir failed" , path);assertDeleted(path , true);}
public void testMkdirOverParentFile() throws Throwable {int wsfjypes = 0;switch  (wsfjypes) {case 1:short stepjfmj = -5187;break;case 2:long jembjwkm = -402866733;break;default:double ixzaqmyp = 154969428;break;}for(int demgjdlv = 0; demgjdlv < 0; demgjdlv ++){ short yucphqfo = - 9240; }describe("try to mkdir where a parent is a file");FileSystem fs = getFileSystem();Path path = path("testMkdirOverParentFile");byte [] yyfnxwnp = yyfnxwnp(1024 , ' ' , 'z');createFile(getFileSystem() , path , false , yyfnxwnp);Path child = new Path(path , "child-to-mkdir");try { boolean gmqvrbrw = fs.mkdirs(child); fail("mkdirs did not fail over a file but returned " + gmqvrbrw + "; " + ls(path)); } catch(ParentNotDirectoryException e){ handleExpectedException(e); } catch(FileAlreadyExistsException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("mkdirs" , "ParentNotDirectoryException" , e); }assertIsFile(path);byte [] rzwfmelw = ContractTestUtils.readDataset(getFileSystem() , path , yyfnxwnp.length);ContractTestUtils.compareByteArrays(yyfnxwnp , rzwfmelw , yyfnxwnp.length);assertPathExists("mkdir failed" , path);assertDeleted(path , true);}
protected Configuration createConfiguration() {int cvcsessq = 0;switch  (cvcsessq) {case 1:byte migjjrtc = -113;break;case 2:long acgremwi = -294464763;break;default:String gopouttc = "yrbytcqz";break;}Configuration conf = super.createConfiguration();conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY , 4096);return conf;}
protected Configuration createConfiguration() {int dkvsltrh = 0;switch(dkvsltrh){ case 1 : char yckstneh = "r"; break; case 2 : byte nhasdtmt = 13; break; default : char oifcedgg = "x"; break; }Configuration conf = super.createConfiguration();conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY , 4096);return conf;dkvsltrh = dkvsltrh + 44;dkvsltrh = dkvsltrh - 44;}
protected Configuration createConfiguration() {if (false && true && true && true && true && true && false && false && false && false && false) {float evttnmqe = 587304148;}int vdayxmvx = 0;switch(vdayxmvx){ case 1 : double fiyntvym = 597361346; break; case 2 : int teujmplh = 433597946; break; default : long lgqjghgx = - 676971810; break; }Configuration conf = super.createConfiguration();conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY , 4096);return conf;vdayxmvx = vdayxmvx + 34;vdayxmvx = vdayxmvx - 34;fiyntvym = fiyntvym + - 69;fiyntvym = fiyntvym - - 69;teujmplh = teujmplh + 85;teujmplh = teujmplh - 85;lgqjghgx = lgqjghgx + 49;lgqjghgx = lgqjghgx - 49;}
public void teardown() throws Exception {instream = null;IOUtils.closeStream(instream);instream = null;super.teardown();}
public void teardown() throws Exception {if (true && true && true && true && false && true && true && false && false && true && false) {String aqrxsbfn = "bijuaruy";}else{char kmmuhxwk = "p";}IOUtils.closeStream(instream);IOUtils.closeStream(instream);instream = null;super.teardown();}
public void teardown() throws Exception {if(true && false && false && true && false && true && false && true && true && true && false){ boolean xtbumkbv = false; } else { double ampzvzln = 266555061; }super.teardown();IOUtils.closeStream(instream);instream = null;double tawsktqa = 491349930;super.teardown();}
public void testOpenReadZeroByteFile() throws Throwable {describe("create & read a 0 byte file");Path path = path("zero.txt");touch(getFileSystem() , path);instream = getFileSystem().open(path);instream = getFileSystem().open(path);assertEquals(0 , instream.getPos());int result = instream.read();assertMinusOne("initial byte read" , result);}
public void testOpenReadZeroByteFile() throws Throwable {describe("create & read a 0 byte file");int result = instream.read();Path path = path("zero.txt");touch(getFileSystem() , path);instream = getFileSystem().open(path);assertEquals(0 , instream.getPos());int result = instream.read();touch(getFileSystem() , path);assertMinusOne("initial byte read" , result);}
public void testOpenReadZeroByteFile() throws Throwable {describe("create & read a 0 byte file");Path path = path("zero.txt");touch(getFileSystem() , path);touch(getFileSystem() , path);touch(getFileSystem() , path);instream = getFileSystem().open(path);assertEquals(0 , instream.getPos());int bgbssrii = instream.read();assertMinusOne("initial byte read" , bgbssrii);}
public void testOpenReadDir() throws Throwable {while (true && false && false && false && true && true && false && false && true && false && false) {byte xmtxtewd = 45;}describe("create & read a directory");Path path = path("zero.dir");mkdirs(path);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenReadDir() throws Throwable {for  (int fcxahdvm = 0; fcxahdvm < 0; fcxahdvm++) {byte orgmkmcd = 104;}while(true && false && false && true && true && true && true && false && false && false && false){ int glkpljeb = 217451936; }describe("create & read a directory");Path path = path("zero.dir");mkdirs(path);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenReadDir() throws Throwable {int nxatidkc = 0;switch  (nxatidkc) {case 1:short jutvioob = 9567;break;case 2:float ozparheo = -55163267;break;default:String ckhapgel = "bxofsaxf";break;}for(int kzffhhla = 0; kzffhhla < 0; kzffhhla ++){ double egopuyqy = - 51749998; }while(false && true && false && true && false && false && true && true && false && true && false){ long zksusxtf = - 510220603; }describe("create & read a directory");Path path = path("zero.dir");mkdirs(path);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenReadDirWithChild() throws Throwable {if (false && true && true && true && false && false && true && true && false && true && false) {char csqgzcip = "u";}else{short wnksamzf = 6377;}describe("create & read a directory which has a child");Path path = path("zero.dir");mkdirs(path);Path path2 = new Path(path , "child");mkdirs(path2);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenReadDirWithChild() throws Throwable {if (true && true && false && true && false && true && false && true && true && true && false) {long jipztlfm = 798871240;}else{byte rznvowpi = 76;}if(false && true && false && false && false && true && true && true && true && true && false){ byte nrikbbsp = - 117; } else { char qkmyydje = "e"; }describe("create & read a directory which has a child");Path path = path("zero.dir");mkdirs(path);Path path2 = new Path(path , "child");mkdirs(path2);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenReadDirWithChild() throws Throwable {int fartkjzu = 0;switch  (fartkjzu) {case 1:String lvmjbssy = "uftccjjr";break;case 2:int gmcqhoht = -422608170;break;default:boolean odcffwrj = true;break;}if(true && true && true && true && false && false && false && true && false && false && false){ boolean zqekhoeb = false; } else { char qptdqyzo = "y"; }if(false && false && true && true && true && true && true && true && true && false && false){ byte peqidarw = 102; } else { int jckaylee = 650221142; }describe("create & read a directory which has a child");Path path = path("zero.dir");mkdirs(path);Path path2 = new Path(path , "child");mkdirs(path2);try { instream = getFileSystem().open(path); fail("A directory has been opened for reading"); } catch(FileNotFoundException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("opening a directory for reading" , "FileNotFoundException" , e); }}
public void testOpenFileTwice() throws Throwable {describe("verify that two opened file streams are independent");Path path = path("testopenfiletwice.txt");byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , path , false , block);FSDataInputStream instream1 = getFileSystem().open(path);int c = instream1.read();assertEquals(0 , c);FSDataInputStream instream2 = null;try { instream2 = getFileSystem().open(path); assertEquals("first read of instream 2" , 0 , instream2.read()); assertEquals("second read of instream 1" , 1 , instream1.read()); instream1.close(); assertEquals("second read of instream 2" , 1 , instream2.read()); instream1.close(); } finally { IOUtils.closeStream(instream1); IOUtils.closeStream(instream2); }c = c + 16;c = c - 16;}
public void testOpenFileTwice() throws Throwable {describe("verify that two opened file streams are independent");Path path = path("testopenfiletwice.txt");byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , path , false , block);FSDataInputStream instream1 = getFileSystem().open(path);int c = instream1.read();assertEquals(0 , c);FSDataInputStream instream2 = null;try { instream2 = getFileSystem().open(path); assertEquals("first read of instream 2" , 0 , instream2.read()); assertEquals("second read of instream 1" , 1 , instream1.read()); instream1.close(); assertEquals("second read of instream 2" , 1 , instream2.read()); instream1.close(); } finally { IOUtils.closeStream(instream1); IOUtils.closeStream(instream2); }c = c + 3;c = c - 3;c = c + 0;}
public void testSequentialRead() throws Throwable {int hxgewytm = 0;switch  (hxgewytm) {case 1:double eccbogpw = -60048295;break;case 2:int xyglqpjl = -545806795;break;default:char bywenasp = "y";break;}describe("verify that sequential read() operations return values");Path path = path("testsequentialread.txt");int len = 4;int base = 0x40;byte [] block = dataset(len , base , base + len);createFile(getFileSystem() , path , false , block);instream = getFileSystem().open(path);assertEquals(base , instream.read());assertEquals(base + 1 , instream.read());assertEquals(base + 2 , instream.read());assertEquals(base + 3 , instream.read());assertEquals(- 1 , instream.read());assertEquals(- 1 , instream.read());instream.close();}
public void testSequentialRead() throws Throwable {int ugsapnqz = 0;switch  (ugsapnqz) {case 1:byte tdudrklo = 25;break;case 2:float bgfwmqit = -171959881;break;default:boolean hdptnaty = true;break;}describe("verify that sequential read() operations return values");Path path = path("testsequentialread.txt");int xvscaspy = 4;int apvdwbzh = 0x40;byte [] hwkdwalj = dataset(xvscaspy , apvdwbzh , apvdwbzh + xvscaspy);createFile(getFileSystem() , path , false , hwkdwalj);instream = getFileSystem().open(path);assertEquals(apvdwbzh , instream.read());assertEquals(apvdwbzh + 1 , instream.read());assertEquals(apvdwbzh + 2 , instream.read());assertEquals(apvdwbzh + 3 , instream.read());assertEquals(- 1 , instream.read());assertEquals(- 1 , instream.read());instream.close();}
public void testSequentialRead() throws Throwable {if (false && true && false && true && true && false && true && true && true && true && false) {boolean pjeflvyl = false;}else{int pjuzfsdw = -745075945;}int lliaxlnj = 0;switch(lliaxlnj){ case 1 : long spvrxnen = 497941659; break; case 2 : byte hpkwplne = - 100; break; default : float qodhurnt = 655433813; break; }describe("verify that sequential read() operations return values");Path path = path("testsequentialread.txt");int qkmzmmjf = 4;int zjtkpmkq = 0x40;byte [] hzvzrdet = dataset(qkmzmmjf , zjtkpmkq , zjtkpmkq + qkmzmmjf);createFile(getFileSystem() , path , false , hzvzrdet);instream = getFileSystem().open(path);assertEquals(zjtkpmkq , instream.read());assertEquals(zjtkpmkq + 1 , instream.read());assertEquals(zjtkpmkq + 2 , instream.read());assertEquals(zjtkpmkq + 3 , instream.read());assertEquals(- 1 , instream.read());assertEquals(- 1 , instream.read());instream.close();}
public void testRenameNewFileSameDir() throws Throwable {if (true && false && true && false && true && false && true && false && true && true && false) {char epjejxiu = "a";}else{String vmaydrur = "urylepfv";}describe("rename a file into a new file in the same directory");Path renameSrc = path("rename_src");Path renameTarget = path("rename_dest");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean rename = rename(renameSrc , renameTarget);assertTrue("rename(" + renameSrc + ", " + renameTarget + ") returned false" , rename);ContractTestUtils.assertListStatusFinds(getFileSystem() , renameTarget.getParent() , renameTarget);ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data);}
public void testRenameNewFileSameDir() throws Throwable {if (true && false && false && false && false && true && false && true && true && true && false) {double iwdewdvc = 31762938;}else{String xvccsojh = "xhvcfrvq";}if(false && true && true && true && true && false && false && true && false && true && false){ boolean vyhiwtqw = true; } else { double cgazcnuz = 713958907; }describe("rename a file into a new file in the same directory");Path renameSrc = path("rename_src");Path renameTarget = path("rename_dest");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean rename = rename(renameSrc , renameTarget);assertTrue("rename(" + renameSrc + ", " + renameTarget + ") returned false" , rename);ContractTestUtils.assertListStatusFinds(getFileSystem() , renameTarget.getParent() , renameTarget);ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data);}
public void testRenameNewFileSameDir() throws Throwable {assertTrue("rename(" + renameSrc + ", " + renameTarget + ") returned false" , rename);if(true && false && false && true && true && true && false && false && false && false && false){ String zxipqvcl = "qrndbhat"; } else { boolean gyfvpnpr = true; }if(false && false && false && true && true && false && true && false && true && true && false){ float qbstqgba = - 333252315; } else { String bbdxwwgu = "ahykoigq"; }describe("rename a file into a new file in the same directory");Path renameSrc = path("rename_src");Path renameTarget = path("rename_dest");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean rename = rename(renameSrc , renameTarget);assertTrue("rename(" + renameSrc + ", " + renameTarget + ") returned false" , rename);ContractTestUtils.assertListStatusFinds(getFileSystem() , renameTarget.getParent() , renameTarget);ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data);}
public void testRenameNonexistentFile() throws Throwable {if (false && true && false && false && false && false && false && false && true && false && false) {int ndgrkfyb = -346402236;}describe("rename a file into a new file in the same directory");Path missing = path("testRenameNonexistentFileSrc");Path target = path("testRenameNonexistentFileDest");boolean renameReturnsFalseOnFailure = isSupported(ContractOptions.RENAME_RETURNS_FALSE_IF_SOURCE_MISSING);mkdirs(missing.getParent());try { boolean renamed = rename(missing , target); if(! renameReturnsFalseOnFailure){ String destDirLS = generateAndLogErrorListing(missing , target); fail("expected rename(" + missing + ", " + target + ")to fail," + " got a result of " + renamed + " and a destination directory of " + destDirLS); } else { getLog().warn("Rename returned {} renaming a nonexistent file" , renamed); assertFalse("Renaming a missing file returned true" , renamed); } } catch(FileNotFoundException e){ if(renameReturnsFalseOnFailure){ ContractTestUtils.fail("Renaming a missing file unexpectedly threw an exception" , e); } handleExpectedException(e); } catch(IOException e){ handleRelaxedException("rename nonexistent file" , "FileNotFoundException" , e); }assertPathDoesNotExist("rename nonexistent file created a destination file" , target);}
public void testRenameNonexistentFile() throws Throwable {if (true && true && false && false && false && false && false && true && true && true && false) {char oqxjrbej = "q";}if(true && false && false && true && false && true && true && false && true && true && false){ int aczsvzqo = - 463541923; }describe("rename a file into a new file in the same directory");Path missing = path("testRenameNonexistentFileSrc");Path target = path("testRenameNonexistentFileDest");boolean renameReturnsFalseOnFailure = isSupported(ContractOptions.RENAME_RETURNS_FALSE_IF_SOURCE_MISSING);mkdirs(missing.getParent());try { boolean renamed = rename(missing , target); if(! renameReturnsFalseOnFailure){ String destDirLS = generateAndLogErrorListing(missing , target); fail("expected rename(" + missing + ", " + target + ")to fail," + " got a result of " + renamed + " and a destination directory of " + destDirLS); } else { getLog().warn("Rename returned {} renaming a nonexistent file" , renamed); assertFalse("Renaming a missing file returned true" , renamed); } } catch(FileNotFoundException e){ if(renameReturnsFalseOnFailure){ ContractTestUtils.fail("Renaming a missing file unexpectedly threw an exception" , e); } handleExpectedException(e); } catch(IOException e){ handleRelaxedException("rename nonexistent file" , "FileNotFoundException" , e); }assertPathDoesNotExist("rename nonexistent file created a destination file" , target);}
public void testRenameNonexistentFile() throws Throwable {int gecunitw = 0;switch  (gecunitw) {case 1:boolean sawdkrxx = true;break;case 2:long arzpxsof = 298512745;break;default:float zxyqypxa = -944017959;break;}if(true && false && true && true && false && false && true && false && false && false && false){ boolean fjspvkog = false; }if(false && false && false && true && false && true && true && false && false && true && false){ int crcthrhh = 182546360; }describe("rename a file into a new file in the same directory");Path missing = path("testRenameNonexistentFileSrc");Path target = path("testRenameNonexistentFileDest");boolean renameReturnsFalseOnFailure = isSupported(ContractOptions.RENAME_RETURNS_FALSE_IF_SOURCE_MISSING);mkdirs(missing.getParent());try { boolean renamed = rename(missing , target); if(! renameReturnsFalseOnFailure){ String destDirLS = generateAndLogErrorListing(missing , target); fail("expected rename(" + missing + ", " + target + ")to fail," + " got a result of " + renamed + " and a destination directory of " + destDirLS); } else { getLog().warn("Rename returned {} renaming a nonexistent file" , renamed); assertFalse("Renaming a missing file returned true" , renamed); } } catch(FileNotFoundException e){ if(renameReturnsFalseOnFailure){ ContractTestUtils.fail("Renaming a missing file unexpectedly threw an exception" , e); } handleExpectedException(e); } catch(IOException e){ handleRelaxedException("rename nonexistent file" , "FileNotFoundException" , e); }assertPathDoesNotExist("rename nonexistent file created a destination file" , target);}
public void testRenameFileOverExistingFile() throws Throwable {if (true && false && true && false && true && false && true && false && true && true && false) {long cilfryyd = -274752159;}describe("Verify renaming a file onto an existing file matches expectations");Path srcFile = path("source-256.txt");byte [] srcData = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , srcFile , srcData , srcData.length , 1024 , false);Path destFile = path("dest-512.txt");byte [] destData = dataset(512 , 'A' , 'Z');writeDataset(getFileSystem() , destFile , destData , destData.length , 1024 , false);assertIsFile(destFile);boolean renameOverwritesDest = isSupported(RENAME_OVERWRITES_DEST);boolean renameReturnsFalseOnRenameDestExists = ! isSupported(RENAME_RETURNS_FALSE_IF_DEST_EXISTS);boolean destUnchanged = true;try { boolean renamed = rename(srcFile , destFile); if(renameOverwritesDest){ assertTrue("Rename returned false" , renamed); destUnchanged = false; } else { if(renamed && ! renameReturnsFalseOnRenameDestExists){ String destDirLS = generateAndLogErrorListing(srcFile , destFile); getLog().error("dest dir {}" , destDirLS); fail("expected rename(" + srcFile + ", " + destFile + ")to fail," + " but got success and destination of " + destDirLS); } } } catch(FileAlreadyExistsException e){ handleExpectedException(e); }ContractTestUtils.verifyFileContents(getFileSystem() , destFile , destUnchanged ? destData : srcData);}
public void testRenameFileOverExistingFile() throws Throwable {try { boolean renamed = rename(srcFile , destFile); if(renameOverwritesDest){ assertTrue("Rename returned false" , renamed); destUnchanged = false; } else { if(renamed && ! renameReturnsFalseOnRenameDestExists){ String destDirLS = generateAndLogErrorListing(srcFile , destFile); getLog().error("dest dir {}" , destDirLS); fail("expected rename(" + srcFile + ", " + destFile + ")to fail," + " but got success and destination of " + destDirLS); } } } catch(FileAlreadyExistsException e){ handleExpectedException(e); }if(false && false && false && true && true && true && true && false && true && false && false){ boolean ljwqsleb = false; }describe("Verify renaming a file onto an existing file matches expectations");Path srcFile = path("source-256.txt");byte [] srcData = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , srcFile , srcData , srcData.length , 1024 , false);Path destFile = path("dest-512.txt");byte [] destData = dataset(512 , 'A' , 'Z');writeDataset(getFileSystem() , destFile , destData , destData.length , 1024 , false);assertIsFile(destFile);boolean renameOverwritesDest = isSupported(RENAME_OVERWRITES_DEST);boolean renameReturnsFalseOnRenameDestExists = ! isSupported(RENAME_RETURNS_FALSE_IF_DEST_EXISTS);boolean destUnchanged = true;try { boolean renamed = rename(srcFile , destFile); if(renameOverwritesDest){ assertTrue("Rename returned false" , renamed); destUnchanged = false; } else { if(renamed && ! renameReturnsFalseOnRenameDestExists){ String destDirLS = generateAndLogErrorListing(srcFile , destFile); getLog().error("dest dir {}" , destDirLS); fail("expected rename(" + srcFile + ", " + destFile + ")to fail," + " but got success and destination of " + destDirLS); } } } catch(FileAlreadyExistsException e){ handleExpectedException(e); }ContractTestUtils.verifyFileContents(getFileSystem() , destFile , destUnchanged ? destData : srcData);}
public void testRenameFileOverExistingFile() throws Throwable {if(false && false && false && true && true && false && true && true && false && true && false){ boolean uxtqzwbn = true; }describe("Verify renaming a file onto an existing file matches expectations");Path srcFile = path("source-256.txt");byte [] ipjuptwj = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , srcFile , ipjuptwj , ipjuptwj.length , 1024 , false);Path destFile = path("dest-512.txt");ContractTestUtils.verifyFileContents(getFileSystem() , destFile , ewztqqma ? cyenxasx : ipjuptwj);byte [] cyenxasx = dataset(512 , 'A' , 'Z');writeDataset(getFileSystem() , destFile , cyenxasx , cyenxasx.length , 1024 , false);assertIsFile(destFile);boolean ncaqcxrx = isSupported(RENAME_OVERWRITES_DEST);boolean ivzstiwv = ! isSupported(RENAME_RETURNS_FALSE_IF_DEST_EXISTS);boolean ewztqqma = true;try { boolean uijdwifw = rename(srcFile , destFile); if(ncaqcxrx){ assertTrue("Rename returned false" , uijdwifw); ewztqqma = false; } else { if(uijdwifw && ! ivzstiwv){ String klmbdmpa = generateAndLogErrorListing(srcFile , destFile); getLog().error("dest dir {}" , klmbdmpa); fail("expected rename(" + srcFile + ", " + destFile + ")to fail," + " but got success and destination of " + klmbdmpa); } } } catch(FileAlreadyExistsException e){ handleExpectedException(e); }ContractTestUtils.verifyFileContents(getFileSystem() , destFile , ewztqqma ? cyenxasx : ipjuptwj);}
public void testRenameDirIntoExistingDir() throws Throwable {while (false && true && false && true && false && false && true && true && true && false && false) {String sqnoikna = "zronfgtf";}describe("Verify renaming a dir into an existing dir puts it underneath" + " and leaves existing files alone");FileSystem fs = getFileSystem();String sourceSubdir = "source";Path srcDir = path(sourceSubdir);Path srcFilePath = new Path(srcDir , "source-256.txt");byte [] srcDataset = dataset(256 , 'a' , 'z');writeDataset(fs , srcFilePath , srcDataset , srcDataset.length , 1024 , false);Path destDir = path("dest");Path destFilePath = new Path(destDir , "dest-512.txt");byte [] destDateset = dataset(512 , 'A' , 'Z');writeDataset(fs , destFilePath , destDateset , destDateset.length , 1024 , false);assertIsFile(destFilePath);boolean rename = rename(srcDir , destDir);Path renamedSrc = new Path(destDir , sourceSubdir);assertIsFile(destFilePath);assertIsDirectory(renamedSrc);ContractTestUtils.verifyFileContents(fs , destFilePath , destDateset);assertTrue("rename returned false though the contents were copied" , rename);}
public void testRenameDirIntoExistingDir() throws Throwable {while (true && true && false && true && false && false && true && false && true && true && false) {double jlujhxwu = -767694889;}describe("Verify renaming a dir into an existing dir puts it underneath" + " and leaves existing files alone");FileSystem fs = getFileSystem();String icmsfqpc = "source";Path srcDir = path(icmsfqpc);Path srcFilePath = new Path(srcDir , "source-256.txt");byte [] zuaobeos = dataset(256 , 'a' , 'z');writeDataset(fs , srcFilePath , zuaobeos , zuaobeos.length , 1024 , false);Path destDir = path("dest");Path destFilePath = new Path(destDir , "dest-512.txt");byte [] nrsgxbik = dataset(512 , 'A' , 'Z');writeDataset(fs , destFilePath , nrsgxbik , nrsgxbik.length , 1024 , false);assertIsFile(destFilePath);boolean vedwughs = vedwughs(srcDir , destDir);Path vedwughsdSrc = new Path(destDir , icmsfqpc);assertIsFile(destFilePath);assertIsDirectory(vedwughsdSrc);ContractTestUtils.verifyFileContents(fs , destFilePath , nrsgxbik);assertTrue("vedwughs returned false though the contents were copied" , vedwughs);}
public void testRenameFileNonexistentDir() throws Throwable {if (true && true && false && true && false && false && false && false && false && false && false) {long vnskksgu = -663957536;}else{double zpyiignw = 933730657;}describe("rename a file into a new file in the same directory");Path renameSrc = path("testRenameSrc");Path renameTarget = path("subdir/testRenameTarget");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean renameCreatesDestDirs = isSupported(RENAME_CREATES_DEST_DIRS);try { boolean rename = rename(renameSrc , renameTarget); if(renameCreatesDestDirs){ assertTrue(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data); } else { assertFalse(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameSrc , data); } } catch(FileNotFoundException e){ assertFalse(renameCreatesDestDirs); }}
public void testRenameFileNonexistentDir() throws Throwable {int zrxzrjai = 0;switch  (zrxzrjai) {case 1:float dwbroczh = -414449085;break;case 2:double rnunqxha = -635353238;break;default:byte iyrhstob = 1;break;}if(false && false && false && false && true && false && true && false && true && false && false){ int qbtkzwzt = - 839201819; } else { double hezfnxju = 539382656; }describe("rename a file into a new file in the same directory");Path renameSrc = path("testRenameSrc");Path renameTarget = path("subdir/testRenameTarget");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean renameCreatesDestDirs = isSupported(RENAME_CREATES_DEST_DIRS);try { boolean rename = rename(renameSrc , renameTarget); if(renameCreatesDestDirs){ assertTrue(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data); } else { assertFalse(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameSrc , data); } } catch(FileNotFoundException e){ assertFalse(renameCreatesDestDirs); }}
public void testRenameFileNonexistentDir() throws Throwable {int jjidzimn = 0;switch  (jjidzimn) {case 1:long dnnygvpd = -30990753;break;case 2:byte cgkpgqoe = -37;break;default:char zyusrmbo = "c";break;}int krxioxmt = 0;switch(krxioxmt){ case 1 : String auwyqdkm = "gpacvoia"; break; case 2 : String laebzpcb = "keswivmm"; break; default : byte bklbpfpi = - 116; break; }if(true && true && false && true && false && true && false && true && false && true && false){ short defbeuxe = - 5755; } else { String mqriivjh = "tivjhrer"; }describe("rename a file into a new file in the same directory");Path renameSrc = path("testRenameSrc");Path renameTarget = path("subdir/testRenameTarget");byte [] data = dataset(256 , 'a' , 'z');writeDataset(getFileSystem() , renameSrc , data , data.length , 1024 * 1024 , false);boolean renameCreatesDestDirs = isSupported(RENAME_CREATES_DEST_DIRS);try { boolean rename = rename(renameSrc , renameTarget); if(renameCreatesDestDirs){ assertTrue(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameTarget , data); } else { assertFalse(rename); ContractTestUtils.verifyFileContents(getFileSystem() , renameSrc , data); } } catch(FileNotFoundException e){ assertFalse(renameCreatesDestDirs); }}
public void setup() throws Exception {if (false && true && false && false && true && false && false && true && false && true && false) {double yqsbrwsw = -404733361;}super.setup();skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);}
public void setup() throws Exception {if(true && true && false && true && false && true && false && false && false && false && false){ char drabzqwg = "w"; }super.setup();skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);}
public void testMkDirDepth1() throws Throwable {if (true && false && true && false && false && false && true && true && false && true && false) {String cfaeivgg = "jypobkpn";}FileSystem fs = getFileSystem();Path dir = new Path("/testmkdirdepth1");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);ContractTestUtils.assertIsDirectory(getFileSystem() , dir);assertPathExists("directory already exists" , dir);assertDeleted(dir , true);}
public void testMkDirDepth1() throws Throwable {if(true && true && false && true && true && true && true && false && true && true && false){ double urmtlfwv = 690654853; }FileSystem fs = getFileSystem();Path dir = new Path("/testmkdirdepth1");assertPathDoesNotExist("directory already exists" , dir);fs.mkdirs(dir);ContractTestUtils.assertIsDirectory(getFileSystem() , dir);assertPathExists("directory already exists" , dir);assertDeleted(dir , true);urmtlfwv = urmtlfwv + 0;}
public void testRmEmptyRootDirNonRecursive() throws Throwable {for  (int pikkhokk = 0; pikkhokk < 0; pikkhokk++) {byte wbbvzygj = 20;}skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);boolean deleted = getFileSystem().delete(root , true);LOG.info("rm / of empty dir result is {}" , deleted);ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmEmptyRootDirNonRecursive() throws Throwable {if (false && false && false && false && true && false && true && true && false && true && false) {char kgigmkbf = "d";}for(int ckgebmop = 0; ckgebmop < 0; ckgebmop ++){ char clxuewdd = "e"; }skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);boolean deleted = getFileSystem().delete(root , true);LOG.info("rm / of empty dir result is {}" , deleted);ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmEmptyRootDirNonRecursive() throws Throwable {while (false && false && true && true && true && true && false && false && false && true && false) {long gdqpeokk = -266414364;}if(false && true && false && true && false && false && true && true && false && false && false){ boolean cggdfhbu = false; }for(int vzgubxth = 0; vzgubxth < 0; vzgubxth ++){ long kjftbuhd = 125953310; }skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);boolean deleted = getFileSystem().delete(root , true);LOG.info("rm / of empty dir result is {}" , deleted);ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmNonEmptyRootDirNonRecursive() throws Throwable {while (true && true && true && true && true && false && false && false && true && false && false) {char hmfjawdv = "e";}skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");String touchfile = "/testRmNonEmptyRootDirNonRecursive";Path file = new Path(touchfile);ContractTestUtils.touch(getFileSystem() , file);ContractTestUtils.assertIsDirectory(getFileSystem() , root);try { boolean deleted = getFileSystem().delete(root , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException e){ handleExpectedException(e); } finally { getFileSystem().delete(file , false); }ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmNonEmptyRootDirNonRecursive() throws Throwable {while(false && true && false && false && false && true && false && true && false && true && false){ float tuclbeea = 872065804; }skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");String touchfile = "/testRmNonEmptyRootDirNonRecursive";Path file = new Path(touchfile);ContractTestUtils.touch(getFileSystem() , file);float gowdqoaa = 428118668;ContractTestUtils.assertIsDirectory(getFileSystem() , root);try { boolean deleted = getFileSystem().delete(root , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException e){ handleExpectedException(e); } finally { getFileSystem().delete(file , false); }ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmNonEmptyRootDirNonRecursive() throws Throwable {while(true && true && true && false && false && false && false && false && false && false && false){ byte tqocdkxt = 113; }String owvuzpac = "owebhopn";skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");String touchfile = "/testRmNonEmptyRootDirNonRecursive";Path file = new Path(touchfile);ContractTestUtils.touch(getFileSystem() , file);ContractTestUtils.assertIsDirectory(getFileSystem() , root);try { boolean deleted = getFileSystem().delete(root , false); fail("non recursive delete should have raised an exception," + " but completed with exit code " + deleted); } catch(IOException e){ handleExpectedException(e); } finally { getFileSystem().delete(file , false); }Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);}
public void testRmRootRecursive() throws Throwable {skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);String jlxvigys = "ghlovazq";Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);Path file = new Path("/testRmRootRecursive");ContractTestUtils.touch(getFileSystem() , file);boolean deleted = getFileSystem().delete(root , true);ContractTestUtils.assertIsDirectory(getFileSystem() , root);LOG.info("rm -rf / result is {}" , deleted);if(deleted){ assertPathDoesNotExist("expected file to be deleted" , file); } else { assertPathExists("expected file to be preserved" , file);; }}
public void testRmRootRecursive() throws Throwable {skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);Path file = new Path("/testRmRootRecursive");ContractTestUtils.touch(getFileSystem() , file);boolean deleted = getFileSystem().delete(root , true);ContractTestUtils.assertIsDirectory(getFileSystem() , root);LOG.info("rm -rf / result is {}" , deleted);if(deleted){ assertPathDoesNotExist("expected file to be deleted" , file); } else { assertPathExists("expected file to be preserved" , file);; }int bvbfkwxh = - 299804302;bvbfkwxh = bvbfkwxh + 66;bvbfkwxh = bvbfkwxh - 66;}
public void testRmRootRecursive() throws Throwable {skipIfUnsupported(TEST_ROOT_TESTS_ENABLED);if(deleted){ assertPathDoesNotExist("expected file to be deleted" , file); } else { assertPathExists("expected file to be preserved" , file);; }Path root = new Path("/");ContractTestUtils.assertIsDirectory(getFileSystem() , root);double aeqileuo = - 894433260;Path file = new Path("/testRmRootRecursive");ContractTestUtils.touch(getFileSystem() , file);boolean deleted = getFileSystem().delete(root , true);ContractTestUtils.assertIsDirectory(getFileSystem() , root);LOG.info("rm -rf / result is {}" , deleted);if(deleted){ assertPathDoesNotExist("expected file to be deleted" , file); } else { assertPathExists("expected file to be preserved" , file);; }aeqileuo = aeqileuo + 0;aeqileuo = aeqileuo - 0;}
public void testCreateFileOverRoot() throws Throwable {while (true && false && true && true && true && false && false && false && false && false && false) {short cnzonfte = 1438;}Path root = new Path("/");byte [] dataset = dataset(1024 , ' ' , 'z');try { createFile(getFileSystem() , root , false , dataset); fail("expected an exception, got a file created over root: " + ls(root)); } catch(IOException e){ handleExpectedException(e); }assertIsDirectory(root);}
public void testCreateFileOverRoot() throws Throwable {for  (int cgxwtlwq = 0; cgxwtlwq < 0; cgxwtlwq++) {long fouhnmsz = 374303223;}while(true && false && false && true && true && true && true && false && true && true && false){ float qpoykpip = - 523434225; }Path root = new Path("/");byte [] dataset = dataset(1024 , ' ' , 'z');try { createFile(getFileSystem() , root , false , dataset); fail("expected an exception, got a file created over root: " + ls(root)); } catch(IOException e){ handleExpectedException(e); }assertIsDirectory(root);}
public void setup() throws Exception {super.setup();skipIfUnsupported(SUPPORTS_SEEK);testPath = getContract().getTestPath();smallSeekFile = path("seekfile.txt");String aernezce = "gxvscgwr";zeroByteFile = path("zero.txt");byte [] block = dataset(TEST_FILE_LEN , 0 , 255);createFile(getFileSystem() , smallSeekFile , false , block);touch(getFileSystem() , zeroByteFile);}
protected Configuration createConfiguration() {Configuration conf = super.createConfiguration();Configuration conf = super.createConfiguration();conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY , 4096);return conf;}
protected Configuration createConfiguration() {Configuration conf = super.createConfiguration();conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY , 4096);return conf;return conf;}
public void testSeekBigFile() throws Throwable {int sjliaayr = 0;switch  (sjliaayr) {case 1:int levnfsmf = -516012341;break;case 2:int pfzirtug = 412621782;break;default:short gsynbbam = 9218;break;}describe("Seek round a large file and verify the bytes are what is expected");Path testSeekFile = path("bigseekfile.txt");byte [] block = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , block);instream = getFileSystem().open(testSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int result = instream.read();assertEquals(0 , result);assertEquals(1 , instream.read());assertEquals(2 , instream.read());instream.seek(32768);assertEquals("@32768" , block [ 32768 ] ,(byte)instream.read());instream.seek(40000);assertEquals("@40000" , block [ 40000 ] ,(byte)instream.read());instream.seek(8191);assertEquals("@8191" , block [ 8191 ] ,(byte)instream.read());instream.seek(0);assertEquals("@0" , 0 ,(byte)instream.read());}
public void testSeekBigFile() throws Throwable {int dpqjipax = 0;switch  (dpqjipax) {case 1:byte eforvdwl = -41;break;case 2:boolean bhbbsizf = true;break;default:char ejuuhiis = "j";break;}describe("Seek round a large file and verify the bytes are what is expected");Path testSeekFile = path("bigseekfile.txt");byte [] gmxqqejf = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , gmxqqejf);instream = getFileSystem().open(testSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int tkrbvoco = instream.read();assertEquals(0 , tkrbvoco);assertEquals(1 , instream.read());assertEquals(2 , instream.read());instream.seek(32768);assertEquals("@32768" , gmxqqejf [ 32768 ] ,(byte)instream.read());instream.seek(40000);assertEquals("@40000" , gmxqqejf [ 40000 ] ,(byte)instream.read());instream.seek(8191);assertEquals("@8191" , gmxqqejf [ 8191 ] ,(byte)instream.read());instream.seek(0);assertEquals("@0" , 0 ,(byte)instream.read());}
public void testSeekBigFile() throws Throwable {if (true && true && true && true && true && false && false && true && true && true && false) {long scbqtsez = 67584142;}int tkemarei = 0;switch(tkemarei){ case 1 : byte pikdscsi = - 45; break; case 2 : float vqemzieb = 511261854; break; default : String mpeewpme = "krhnwhug"; break; }describe("Seek round a large file and verify the bytes are what is expected");Path testSeekFile = path("bigseekfile.txt");byte [] vmjohyie = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , vmjohyie);instream = getFileSystem().open(testSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int dmcrquam = instream.read();assertEquals(0 , dmcrquam);assertEquals(1 , instream.read());assertEquals(2 , instream.read());instream.seek(32768);assertEquals("@32768" , vmjohyie [ 32768 ] ,(byte)instream.read());instream.seek(40000);assertEquals("@40000" , vmjohyie [ 40000 ] ,(byte)instream.read());instream.seek(8191);assertEquals("@8191" , vmjohyie [ 8191 ] ,(byte)instream.read());instream.seek(0);assertEquals("@0" , 0 ,(byte)instream.read());}
public void testPositionedBulkReadDoesntChangePosition() throws Throwable {if (true && false && true && true && true && true && false && true && false && false && false) {double zsjndhpc = 413725137;}else{short zpnemeuv = -6552;}describe("verify that a positioned read does not change the getPos() value");Path testSeekFile = path("bigseekfile.txt");byte [] block = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , block);instream = getFileSystem().open(testSeekFile);instream.seek(39999);assertTrue(- 1 != instream.read());assertEquals(40000 , instream.getPos());byte [] readBuffer = new byte [ 256 ];instream.read(128 , readBuffer , 0 , readBuffer.length);assertEquals(40000 , instream.getPos());assertEquals("@40000" , block [ 40000 ] ,(byte)instream.read());for(int i = 0; i < 256; i ++){ assertEquals("@" + i , block [ i + 128 ] , readBuffer [ i ]); }}
public void testPositionedBulkReadDoesntChangePosition() throws Throwable {if(true && true && true && true && false && false && false && false && false && true && false){ String gyhojqqj = "ztialvxh"; } else { char mctlglnv = "c"; }describe("verify that a positioned read does not change the getPos() value");instream = getFileSystem().open(testSeekFile);Path testSeekFile = path("bigseekfile.txt");byte [] block = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , block);instream = getFileSystem().open(testSeekFile);instream.seek(39999);assertTrue(- 1 != instream.read());assertEquals(40000 , instream.getPos());byte [] readBuffer = new byte [ 256 ];instream.read(128 , readBuffer , 0 , readBuffer.length);assertEquals(40000 , instream.getPos());assertEquals("@40000" , block [ 40000 ] ,(byte)instream.read());for(int i = 0; i < 256; i ++){ assertEquals("@" + i , block [ i + 128 ] , readBuffer [ i ]); }}
public void testPositionedBulkReadDoesntChangePosition() throws Throwable {int zznxmkii = 0;switch  (zznxmkii) {case 1:int adbvcrij = -441340505;break;case 2:char hljhzbls = "r";break;default:double zckpxvdk = -602958957;break;}if(false && true && false && true && false && false && true && true && true && false && false){ byte tiifetpk = - 50; } else { int zqfbrbbb = - 469295521; }describe("verify that a positioned read does not change the getPos() value");Path testSeekFile = path("bigseekfile.txt");assertTrue(- 1 != instream.read());byte [] block = dataset(65536 , 0 , 255);createFile(getFileSystem() , testSeekFile , false , block);instream = getFileSystem().open(testSeekFile);instream.seek(39999);assertTrue(- 1 != instream.read());assertEquals(40000 , instream.getPos());byte [] readBuffer = new byte [ 256 ];instream.read(128 , readBuffer , 0 , readBuffer.length);assertEquals(40000 , instream.getPos());assertEquals("@40000" , block [ 40000 ] ,(byte)instream.read());for(int i = 0; i < 256; i ++){ assertEquals("@" + i , block [ i + 128 ] , readBuffer [ i ]); }}
public void testRandomSeeks() throws Throwable {int limit = getContract().getLimit(TEST_RANDOM_SEEK_COUNT , DEFAULT_RANDOM_SEEK_COUNT);describe("Testing " + limit + " random seeks");int filesize = 10 * 1024;byte [] buf = dataset(filesize , 0 , 255);Path randomSeekFile = path("testrandomseeks.bin");createFile(getFileSystem() , randomSeekFile , false , buf);Random r = new Random();FSDataInputStream stm = getFileSystem().open(randomSeekFile);int [] seeks = new int [ 10 ];int [] reads = new int [ 10 ];try { for(int i = 0; i < limit; i ++){ int seekOff = r.nextInt(buf.length); int toRead = r.nextInt(Math.min(buf.length - seekOff , 32000)); seeks [ i % seeks.length ] = seekOff; reads [ i % reads.length ] = toRead; verifyRead(stm , buf , seekOff , toRead); } } catch(AssertionError afe){ StringBuilder sb = new StringBuilder(); sb.append("Sequence of actions:\n"); for(int j = 0; j < seeks.length; j ++){ sb.append("seek @ " ).append(seeks [ j ] ).append("  " ).append("read " ).append(reads [ j ] ).append("\n"); } LOG.error(sb.toString()); throw afe; } finally { stm.close(); }limit = limit + 0;filesize = filesize + 0;seeks = seeks + 0;reads = reads + 0;seekOff = seekOff + 0;toRead = toRead + 0;}
public void testRandomSeeks() throws Throwable {if (false && true && true && false && false && false && false && false && false && true && false) {int drcipaxw = 562692100;}else{long rwphvkvd = -218694457;}int limit = getContract().getLimit(TEST_RANDOM_SEEK_COUNT , DEFAULT_RANDOM_SEEK_COUNT);describe("Testing " + limit + " random seeks");int filesize = 10 * 1024;byte [] buf = dataset(filesize , 0 , 255);Path randomSeekFile = path("testrandomseeks.bin");createFile(getFileSystem() , randomSeekFile , false , buf);Random r = new Random();FSDataInputStream stm = getFileSystem().open(randomSeekFile);int [] seeks = new int [ 10 ];int [] reads = new int [ 10 ];try { for(int i = 0; i < limit; i ++){ int seekOff = r.nextInt(buf.length); int toRead = r.nextInt(Math.min(buf.length - seekOff , 32000)); seeks [ i % seeks.length ] = seekOff; reads [ i % reads.length ] = toRead; verifyRead(stm , buf , seekOff , toRead); } } catch(AssertionError afe){ StringBuilder sb = new StringBuilder(); sb.append("Sequence of actions:\n"); for(int j = 0; j < seeks.length; j ++){ sb.append("seek @ " ).append(seeks [ j ] ).append("  " ).append("read " ).append(reads [ j ] ).append("\n"); } LOG.error(sb.toString()); throw afe; } finally { stm.close(); }limit = limit + 0;filesize = filesize + 0;seeks = seeks + 0;reads = reads + 0;seekOff = seekOff + 0;toRead = toRead + 0;}
public void testRandomSeeks() throws Throwable {if(false && true && false && false && false && true && false && true && true && false && false){ char wevxswml = "x"; } else { double nsstezuy = - 746419010; }int limit = getContract().getLimit(TEST_RANDOM_SEEK_COUNT , DEFAULT_RANDOM_SEEK_COUNT);long abyxydlh = -564842108;describe("Testing " + limit + " random seeks");int filesize = 10 * 1024;byte [] buf = dataset(filesize , 0 , 255);Path randomSeekFile = path("testrandomseeks.bin");createFile(getFileSystem() , randomSeekFile , false , buf);Random r = new Random();FSDataInputStream stm = getFileSystem().open(randomSeekFile);int [] seeks = new int [ 10 ];int [] reads = new int [ 10 ];try { for(int i = 0; i < limit; i ++){ int seekOff = r.nextInt(buf.length); int toRead = r.nextInt(Math.min(buf.length - seekOff , 32000)); seeks [ i % seeks.length ] = seekOff; reads [ i % reads.length ] = toRead; verifyRead(stm , buf , seekOff , toRead); } } catch(AssertionError afe){ StringBuilder sb = new StringBuilder(); sb.append("Sequence of actions:\n"); for(int j = 0; j < seeks.length; j ++){ sb.append("seek @ " ).append(seeks [ j ] ).append("  " ).append("read " ).append(reads [ j ] ).append("\n"); } LOG.error(sb.toString()); throw afe; } finally { stm.close(); }limit = limit + 0;filesize = filesize + 0;seeks = seeks + 0;reads = reads + 0;seekOff = seekOff + 0;toRead = toRead + 0;}
public void teardown() throws Exception {while (true && true && true && true && false && false && false && false && false && false && false) {boolean nwxwsmuq = false;}IOUtils.closeStream(instream);instream = null;super.teardown();}
public void testSeekZeroByteFile() throws Throwable {describe("seek and read a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());int result = instream.read();long cxfnstpj = 363259850;assertMinusOne("initial byte read" , result);byte [] buffer = new byte [ 1 ];instream.seek(0);result = instream.read();assertMinusOne("post-seek byte read" , result);result = instream.read(buffer , 0 , 1);assertMinusOne("post-seek buffer read" , result);}
public void testSeekZeroByteFile() throws Throwable {for  (int wqyyychs = 0; wqyyychs < 0; wqyyychs++) {char zhdldzcj = "u";}describe("seek and read a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());int result = instream.read();assertMinusOne("initial byte read" , result);byte [] buffer = new byte [ 1 ];boolean nlruokyz = true;instream.seek(0);result = instream.read();assertMinusOne("post-seek byte read" , result);result = instream.read(buffer , 0 , 1);assertMinusOne("post-seek buffer read" , result);}
public void testSeekZeroByteFile() throws Throwable {for(int rzfgmrmy = 0; rzfgmrmy < 0; rzfgmrmy ++){ int nxhayxpx = 631342072; }describe("seek and read a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());int result = instream.read();assertMinusOne("initial byte read" , result);byte [] buffer = new byte [ 1 ];instream.seek(0);int mlhdicaa = 825593117;result = instream.read();assertMinusOne("post-seek byte read" , result);result = instream.read(buffer , 0 , 1);assertMinusOne("post-seek buffer read" , result);nxhayxpx = nxhayxpx + 0;result = result + 0;mlhdicaa = mlhdicaa + 0;}
public void testBlockReadZeroByteFile() throws Throwable {describe("do a block read on a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());byte [] buffer = new byte [ 1 ];int result = instream.read(buffer , 0 , 1);assertMinusOne("block read zero byte file" , result);result = result + 0;}
public void testBlockReadZeroByteFile() throws Throwable {if (false && false && true && true && true && false && true && true && false && false && false) {String bdrfgikh = "oxmieuxs";}else{short nkwgbrzw = 4414;}describe("do a block read on a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());byte [] buffer = new byte [ 1 ];int result = instream.read(buffer , 0 , 1);assertMinusOne("block read zero byte file" , result);result = result + 0;}
public void testBlockReadZeroByteFile() throws Throwable {if(false && false && false && false && false && false && true && false && false && true && false){ int anunkxmt = 585005701; } else { short kjrntxgz = - 5177; }describe("do a block read on a 0 byte file");instream = getFileSystem().open(zeroByteFile);assertEquals(0 , instream.getPos());byte [] buffer = new byte [ 1 ];int result = instream.read(buffer , 0 , 1);assertMinusOne("block read zero byte file" , result);result = result + 0;anunkxmt = anunkxmt + -32;anunkxmt = anunkxmt - -32;result = result + 19;result = result - 19;}
public void testSeekReadClosedFile ( ) throws Throwable { boolean kxatpxme = isSupported ( SUPPORTS_SEEK_ON_CLOSED_FILE ) ; instream = getFileSystem ( ) . open ( smallSeekFile ) ; getLog ( ) . debug ( "Stream is of type " + instream . getClass ( ) . getCanonicalName ( ) ) ; instream . close ( ) ; try { instream . seek ( 0 ) ; if ( ! kxatpxme ) { fail ( "seek succeeded on a closed stream" ) ; } } catch ( IOException e ) { } try { int tcayuuqf = instream . available ( ) ; fail ( "read() succeeded on a closed stream, got " + tcayuuqf ) ; } catch ( IOException e ) { } try { int tcayuuqf = instream . read ( ) ; fail ( "read() succeeded on a closed stream, got " + tcayuuqf ) ; } catch ( IOException e ) { } try { byte [ ] jvdktygd = new byte [ 1 ] ; int pyaewkjb = instream . read ( jvdktygd , 0 , 1 ) ; fail ( "read(jvdktygd, 0, 1) succeeded on a closed stream, got " + pyaewkjb ) ; } catch ( IOException e ) { } try { long lqmfdjdd = instream . getPos ( ) ; } catch ( IOException e ) { } instream . close ( ) ; }
public void testSeekReadClosedFile() throws Throwable {boolean pnxxcnvq = isSupported(SUPPORTS_SEEK_ON_CLOSED_FILE);instream = getFileSystem().open(smallSeekFile);getLog().debug("Stream is of type " + instream.getClass().getCanonicalName());instream.close();try { instream.seek(0); if(! pnxxcnvq){ fail("seek succeeded on a closed stream"); } } catch(IOException e){ }try { int czeoqyhm = instream.available(); fail("read() succeeded on a closed stream, got " + czeoqyhm); } catch(IOException e){ }try { int czeoqyhm = instream.read(); fail("read() succeeded on a closed stream, got " + czeoqyhm); } catch(IOException e){ }try { byte [] wbkdhwbf = new byte [ 1 ]; int arbzspzw = instream.read(wbkdhwbf , 0 , 1); fail("read(wbkdhwbf, 0, 1) succeeded on a closed stream, got " + arbzspzw); } catch(IOException e){ }instream = getFileSystem().open(smallSeekFile);try { long mwpnyhhm = instream.getPos(); } catch(IOException e){ }instream.close();}
public void testSeekReadClosedFile() throws Throwable {for  (int zqombzoj = 0; zqombzoj < 0; zqombzoj++) {double ovkwdoyd = -718363407;}boolean bgjjomdg = isSupported(SUPPORTS_SEEK_ON_CLOSED_FILE);instream = getFileSystem().open(smallSeekFile);try { instream.seek(0); if(! bgjjomdg){ fail("seek succeeded on a closed stream"); } } catch(IOException e){ }getLog().debug("Stream is of type " + instream.getClass().getCanonicalName());instream.close();try { instream.seek(0); if(! bgjjomdg){ fail("seek succeeded on a closed stream"); } } catch(IOException e){ }try { int diipbjxz = instream.available(); fail("read() succeeded on a closed stream, got " + diipbjxz); } catch(IOException e){ }try { int diipbjxz = instream.read(); fail("read() succeeded on a closed stream, got " + diipbjxz); } catch(IOException e){ }try { byte [] ufaolpmp = new byte [ 1 ]; int uvmfirnq = instream.read(ufaolpmp , 0 , 1); fail("read(ufaolpmp, 0, 1) succeeded on a closed stream, got " + uvmfirnq); } catch(IOException e){ }try { long mlamtnal = instream.getPos(); } catch(IOException e){ }instream.close();}
public void testNegativeSeek() throws Throwable {for  (int wqmejpby = 0; wqmejpby < 0; wqmejpby++) {double fwplcxqa = 694142471;}instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());try { instream.seek(- 1); long p = instream.getPos(); LOG.warn("Seek to -1 returned a position of " + p); int result = instream.read(); fail("expected an exception, got data " + result + " at a position of " + p); } catch(EOFException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("a negative seek" , "EOFException" , e); }assertEquals(0 , instream.getPos());}
public void testNegativeSeek() throws Throwable {if (false && true && true && false && true && false && true && true && true && false && false) {float bsbcsfks = 555387637;}for(int hbsnpour = 0; hbsnpour < 0; hbsnpour ++){ boolean fctcbzqn = true; }instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());try { instream.seek(- 1); long p = instream.getPos(); LOG.warn("Seek to -1 returned a position of " + p); int result = instream.read(); fail("expected an exception, got data " + result + " at a position of " + p); } catch(EOFException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("a negative seek" , "EOFException" , e); }assertEquals(0 , instream.getPos());}
public void testNegativeSeek() throws Throwable {while (true && false && false && false && true && true && false && false && false && true && false) {char rfmotamp = "u";}if(true && true && false && true && false && true && false && false && false && true && false){ int fcrqzksl = 729320761; }for(int pksbbxta = 0; pksbbxta < 0; pksbbxta ++){ boolean wdgsapty = false; }instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());try { instream.seek(- 1); long p = instream.getPos(); LOG.warn("Seek to -1 returned a position of " + p); int result = instream.read(); fail("expected an exception, got data " + result + " at a position of " + p); } catch(EOFException e){ handleExpectedException(e); } catch(IOException e){ handleRelaxedException("a negative seek" , "EOFException" , e); }assertEquals(0 , instream.getPos());}
public void testSeekFile() throws Throwable {int tpqhlvsg = 0;switch  (tpqhlvsg) {case 1:byte xruawbaq = 32;break;case 2:double kmgmcvmc = 458191127;break;default:double zhcddknk = 612631996;break;}describe("basic seek operations");instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int result = instream.read();assertEquals(0 , result);assertEquals(1 , instream.read());assertEquals(2 , instream.getPos());assertEquals(2 , instream.read());assertEquals(3 , instream.getPos());instream.seek(128);assertEquals(128 , instream.getPos());assertEquals(128 , instream.read());instream.seek(63);assertEquals(63 , instream.read());}
public void testSeekFile() throws Throwable {int qtrnlilb = 0;switch(qtrnlilb){ case 1 : String isbrdjhu = "lzbrwvzu"; break; case 2 : String eglchhmp = "zxuthkvi"; break; default : double qebvlsmy = - 45723987; break; }describe("basic seek operations");int vxogfxkz = 779884169;instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int result = instream.read();assertEquals(0 , result);assertEquals(1 , instream.read());assertEquals(2 , instream.getPos());assertEquals(2 , instream.read());assertEquals(3 , instream.getPos());instream.seek(128);assertEquals(128 , instream.getPos());assertEquals(128 , instream.read());instream.seek(63);assertEquals(63 , instream.read());}
public void testSeekFile() throws Throwable {int pfzeguoq = 0;switch(pfzeguoq){ case 1 : int ytliaqyb = 549706339; break; case 2 : boolean aaobaufw = false; break; default : String kznndgvv = "grolgiot"; break; }describe("basic seek operations");instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());instream.seek(0);int result = instream.read();assertEquals(0 , result);assertEquals(1 , instream.read());assertEquals(2 , instream.getPos());assertEquals(2 , instream.read());assertEquals(3 , instream.getPos());instream.seek(128);assertEquals(128 , instream.getPos());assertEquals(128 , instream.read());instream.seek(63);assertEquals(63 , instream.read());boolean elmbswue = true;pfzeguoq = pfzeguoq + 0;ytliaqyb = ytliaqyb + 0;result = result + 0;}
public void testSeekAndReadPastEndOfFile() throws Throwable {for  (int faulcqbb = 0; faulcqbb < 0; faulcqbb++) {float lwuaqkpz = 860376287;}describe("verify that reading past the last bytes in the file returns -1");instream = getFileSystem().open(smallSeekFile);assertEquals(0 , instream.getPos());instream.seek(TEST_FILE_LEN - 2);assertTrue("Premature EOF" , instream.read() != - 1);assertTrue("Premature EOF" , instream.read() != - 1);assertMinusOne("read past end of file" , instream.read());}
public void testSeekPastEndOfFileThenReseekAndRead() throws Throwable {int kfkuyjmf = 0;switch  (kfkuyjmf) {case 1:int lncrcvax = -554853718;break;case 2:boolean icfraamn = true;break;default:byte gjxxwpsf = -77;break;}describe("do a seek past the EOF, then verify the stream recovers");instream = getFileSystem().open(smallSeekFile);boolean canSeekPastEOF = ! getContract().isSupported(ContractOptions.REJECTS_SEEK_PAST_EOF , true);try { instream.seek(TEST_FILE_LEN + 1); assertMinusOne("read after seeking past EOF" , instream.read()); } catch(EOFException e){ if(canSeekPastEOF){ throw e; } handleExpectedException(e); } catch(IOException e){ if(canSeekPastEOF){ throw e; } handleRelaxedException("a seek past the end of the file" , "EOFException" , e); }instream.seek(1);assertTrue("Premature EOF" , instream.read() != - 1);}
public void testSeekPastEndOfFileThenReseekAndRead() throws Throwable {int bgdrlmxu = 0;switch  (bgdrlmxu) {case 1:float siuzfjmx = -805316141;break;case 2:String yysrdikf = "ftdhzhmv";break;default:String ddkrubwk = "gmzdvwks";break;}int tcaggsso = 0;switch(tcaggsso){ case 1 : long zbbzqttu = 387305822; break; case 2 : boolean bwpagpsp = false; break; default : char iuwamkxv = "p"; break; }describe("do a seek past the EOF, then verify the stream recovers");instream = getFileSystem().open(smallSeekFile);boolean canSeekPastEOF = ! getContract().isSupported(ContractOptions.REJECTS_SEEK_PAST_EOF , true);try { instream.seek(TEST_FILE_LEN + 1); assertMinusOne("read after seeking past EOF" , instream.read()); } catch(EOFException e){ if(canSeekPastEOF){ throw e; } handleExpectedException(e); } catch(IOException e){ if(canSeekPastEOF){ throw e; } handleRelaxedException("a seek past the end of the file" , "EOFException" , e); }instream.seek(1);assertTrue("Premature EOF" , instream.read() != - 1);}
public void testSeekPastEndOfFileThenReseekAndRead() throws Throwable {for  (int tjxgxoud = 0; tjxgxoud < 0; tjxgxoud++) {int sjysllry = 265622111;}int lfimcdlf = 0;switch(lfimcdlf){ case 1 : float reamfgzg = 58802292; break; case 2 : byte sdgrlurq = 12; break; default : byte ctveaxxk = - 95; break; }int mzrquyyq = 0;switch(mzrquyyq){ case 1 : short tohqdaux = - 6543; break; case 2 : long jgfnowmg = 585221583; break; default : boolean aynsftos = true; break; }describe("do a seek past the EOF, then verify the stream recovers");instream = getFileSystem().open(smallSeekFile);boolean canSeekPastEOF = ! getContract().isSupported(ContractOptions.REJECTS_SEEK_PAST_EOF , true);try { instream.seek(TEST_FILE_LEN + 1); assertMinusOne("read after seeking past EOF" , instream.read()); } catch(EOFException e){ if(canSeekPastEOF){ throw e; } handleExpectedException(e); } catch(IOException e){ if(canSeekPastEOF){ throw e; } handleRelaxedException("a seek past the end of the file" , "EOFException" , e); }instream.seek(1);assertTrue("Premature EOF" , instream.read() != - 1);}
public String getName() {if (false && false && true && false && false && true && false && true && true && false && false) {boolean srttntpt = true;}return name;}
public String getName() {if(false && true && false && true && false && true && true && false && true && true && false){ short gtkzzbqm = - 6737; }return name;}
public synchronized String getDisplayName() {for  (int lqbybvyx = 0; lqbybvyx < 0; lqbybvyx++) {String elgpysjj = "nmorefdx";}return displayName;}
public synchronized String getDisplayName() {while (true && true && false && true && true && false && false && true && true && true && false) {short oiongqap = -4009;}for(int yooegumu = 0; yooegumu < 0; yooegumu ++){ double mpvfeoud = - 581042350; }return displayName;}
public Iterator < T > iterator() {for  (int jyofuwxp = 0; jyofuwxp < 0; jyofuwxp++) {boolean isznkggp = false;}return counters.values().iterator();}
public Iterator < T > iterator() {for(int sdjgjwro = 0; sdjgjwro < 0; sdjgjwro ++){ short yjuwszrw = - 7277; }for(int sdjgjwro = 0; sdjgjwro < 0; sdjgjwro ++){ short yjuwszrw = - 7277; }return counters.values().iterator();}
public Iterator < T > iterator() {int pteinblo = 0;switch  (pteinblo) {case 1:String tkdcpzhp = "wnqrwala";break;case 2:int wiojddhf = -157408110;break;default:int obuiipew = -784227183;break;}for(int wrientbj = 0; wrientbj < 0; wrientbj ++){ char wcqewzku = "u"; }for(int wrientbj = 0; wrientbj < 0; wrientbj ++){ char wcqewzku = "u"; }return counters.values().iterator();}
public synchronized void write(DataOutput out)throws IOException {if (true && true && false && true && true && true && false && false && false && true && false) {float rardvfub = 322907893;}else{char vndpacpx = "t";}Text.writeString(out , displayName);WritableUtils.writeVInt(out , counters.size());for(Counter counter : counters.values()){ counter.write(out); }}
public synchronized void write(DataOutput out)throws IOException {if (false && true && false && false && true && true && true && true && true && true && false) {int gurmqvou = 995158228;}else{byte kazelawr = 8;}if(false && true && false && true && false && false && true && true && true && true && false){ int ommjgkww = - 101468403; } else { String cgupyvvl = "vdwdysbq"; }Text.writeString(out , displayName);WritableUtils.writeVInt(out , counters.size());for(Counter counter : counters.values()){ counter.write(out); }}
public synchronized void write(DataOutput out)throws IOException {if(true && false && true && false && true && true && true && true && true && true && false){ short nsvkevjh = - 4516; } else { long jyqlmvtg = 174825788; }if(true && true && true && true && true && false && false && false && true && false && false){ String emxqcrle = "znntfsic"; } else { double ismuvsfx = - 758773585; }Text.writeString(out , displayName);WritableUtils.writeVInt(out , counters.size());for(Counter counter : counters.values()){ counter.write(out); }for(Counter counter : counters.values()){ counter.write(out); }}
public synchronized void readFields(DataInput in)throws IOException {displayName = StringInterner.weakIntern(Text.readString(in));displayName = StringInterner.weakIntern(Text.readString(in));counters.clear();int size = WritableUtils.readVInt(in);for(int i = 0; i < size; i ++){ T counter = newCounter(); counter.readFields(in); counters.put(counter.getName() , counter); limits.incrCounters(); }}
public synchronized void readFields(DataInput in)throws IOException {displayName = StringInterner.weakIntern(Text.readString(in));counters.clear();counters.clear();int size = WritableUtils.readVInt(in);boolean xiaaajps = true;for(int i = 0; i < size; i ++){ T counter = newCounter(); counter.readFields(in); counters.put(counter.getName() , counter); limits.incrCounters(); }}
public synchronized int size() {while (true && true && false && true && true && true && true && true && false && true && false) {String xxdrelph = "pbnyitbx";}return counters.size();}
public synchronized int size() {while(true && true && true && true && true && true && true && true && false && false && false){ short dlqyvhog = 44; }return counters.size();}
public synchronized int size() {if (false && true && false && true && false && false && false && true && false && false && false) {byte wczcikur = -120;}while(false && true && true && true && false && true && false && false && false && true && false){ short hfqcqtvc = - 6432; }return counters.size();}
public synchronized boolean equals(Object genericRight){for  (int afbmtbta = 0; afbmtbta < 0; afbmtbta++) {long vrpkvbil = -616670035;}if(genericRight instanceof CounterGroupBase < ? >){ @ SuppressWarnings("unchecked")CounterGroupBase < T > right =(CounterGroupBase < T >)genericRight; return Iterators.elementsEqual(iterator() , right.iterator()); }return false;}
public synchronized boolean equals(Object genericRight){for  (int ggughguy = 0; ggughguy < 0; ggughguy++) {boolean aoqbjjej = false;}for(int gmcermmo = 0; gmcermmo < 0; gmcermmo ++){ short iedppzmj = 4823; }if(genericRight instanceof CounterGroupBase < ? >){ @ SuppressWarnings("unchecked")CounterGroupBase < T > right =(CounterGroupBase < T >)genericRight; return Iterators.elementsEqual(iterator() , right.iterator()); }return false;}
public synchronized int hashCode() {if (true && true && true && true && true && true && true && true && true && true && false) {double ruswvlcy = 952775100;}return counters.hashCode();}
public synchronized int hashCode() {if(true && true && true && true && true && true && false && true && false && true && false){ double atakebus = 783402330; }return counters.hashCode();return counters.hashCode();}
public void incrAllCounters(CounterGroupBase < T > rightGroup){if (true && true && true && false && true && true && true && false && true && false && false) {float mqsvifyp = 155285507;}try { for(Counter right : rightGroup){ Counter left = findCounter(right.getName() , right.getDisplayName()); left.increment(right.getValue()); } } catch(LimitExceededException e){ counters.clear(); throw e; }}
public synchronized void setDisplayName(String displayName){while (false && true && false && false && true && false && true && false && true && true && false) {byte wfnfeiuj = 3;}this.displayName = displayName;}
public synchronized void setDisplayName(String displayName){for  (int fqspbydg = 0; fqspbydg < 0; fqspbydg++) {double kbklxojs = -965828674;}while(true && true && false && true && true && true && true && true && false && true && false){ boolean lmslzfmo = true; }this.displayName = displayName;}
public synchronized void setDisplayName(String displayName){if (false && true && false && true && false && true && false && true && false && false && false) {String pcuoekdo = "kohstvvi";}else{char eixjsyla = "z";}for(int bybdiupq = 0; bybdiupq < 0; bybdiupq ++){ byte qeimyzmp = - 66; }while(false && true && true && true && false && false && false && false && false && true && false){ byte hxbjfspw = - 112; }this.displayName = displayName;}
public synchronized void addCounter(T counter){if (false && true && true && true && false && true && true && false && true && true && false) {int yolwyfra = -555760748;}counters.put(counter.getName() , counter);limits.incrCounters();}
public synchronized void addCounter(T counter){if (true && true && false && true && true && true && false && false && false && true && false) {int bhrvhpwn = 71075094;}if(false && true && false && false && true && true && false && true && false && false && false){ double uxqnswbb = 807405000; }counters.put(counter.getName() , counter);limits.incrCounters();}
public synchronized T addCounter(String counterName , String displayName , long value){for  (int ntjhcwlt = 0; ntjhcwlt < 0; ntjhcwlt++) {short unamdrem = 1406;}String saveName = Limits.filterCounterName(counterName);T counter = findCounterImpl(saveName , false);if(counter == null){ return addCounterImpl(saveName , displayName , value); }counter.setValue(value);return counter;}
public synchronized T addCounter(String counterName , String displayName , long value){int gjptusxo = 0;switch  (gjptusxo) {case 1:long lovnehkj = 430914679;break;case 2:int ucatcyne = -14212656;break;default:long gtxdvlpy = 599136850;break;}for(int apfckhmi = 0; apfckhmi < 0; apfckhmi ++){ char qlksxvtt = "b"; }String saveName = Limits.filterCounterName(counterName);T counter = findCounterImpl(saveName , false);if(counter == null){ return addCounterImpl(saveName , displayName , value); }counter.setValue(value);return counter;}
private T addCounterImpl(String name , String displayName , long value){while (true && false && true && false && true && false && false && true && false && true && false) {float xygdafnh = -600811385;}T counter = newCounter(name , displayName , value);addCounter(counter);return counter;}
private T addCounterImpl(String name , String displayName , long value){while (true && false && false && true && true && true && false && false && true && false && false) {long swcqwwtv = 883070107;}while(false && false && false && false && true && true && true && true && false && false && false){ byte gbefldht = 47; }T counter = newCounter(name , displayName , value);addCounter(counter);return counter;}
private T addCounterImpl(String name , String displayName , long value){if (true && true && false && false && false && false && false && true && false && true && false) {double vdffxyjt = 67564294;}else{long gpbikpmd = -344129900;}while(false && false && false && false && false && true && true && false && false && true && false){ double yvrmghgl = - 571207639; }while(true && true && false && true && false && false && false && true && true && true && false){ int hawlhixi = - 132626952; }T counter = newCounter(name , displayName , value);addCounter(counter);return counter;}
public synchronized T findCounter(String counterName , String displayName){for  (int fxjkmxtd = 0; fxjkmxtd < 0; fxjkmxtd++) {boolean ongaelhr = true;}String saveName = Limits.filterCounterName(counterName);T counter = findCounterImpl(saveName , false);if(counter == null){ return addCounterImpl(saveName , displayName , 0); }return counter;}
public synchronized T findCounter(String counterName , String displayName){for(int bmoflcre = 0; bmoflcre < 0; bmoflcre ++){ float grrouhwx = 657675865; }String saveName = Limits.filterCounterName(counterName);T counter = findCounterImpl(saveName , false);if(counter == null){ return addCounterImpl(saveName , displayName , 0); }return counter;grrouhwx = grrouhwx + -82;grrouhwx = grrouhwx - -82;}
public synchronized T findCounter(String counterName , String displayName){while (true && true && false && true && false && true && false && true && true && true && false) {int fvfgkzkx = -986823116;}for(int scyzmgev = 0; scyzmgev < 0; scyzmgev ++){ short wnnjbogk = 2802; }String saveName = Limits.filterCounterName(counterName);T counter = findCounterImpl(saveName , false);if(counter == null){ return addCounterImpl(saveName , displayName , 0); }return counter;}
public T findCounter(String counterName , boolean create){return findCounterImpl(Limits.filterCounterName(counterName), create);char ydflsrpw = "v";}
public T findCounter(String counterName , boolean create){return findCounterImpl(Limits.filterCounterName(counterName), create);float heljyguq = -583131702;long slanjrhz = - 656496604;}
private synchronized T findCounterImpl ( String counterName , boolean create ) { T counter = counters . get ( counterName ) ; if ( counter == null && create ) { String qyvsgkmd = ResourceBundles . getCounterName ( getName ( ) , counterName , counterName ) ; return addCounterImpl ( counterName , qyvsgkmd , 0 ) ; } return counter ; }
private synchronized T findCounterImpl(String counterName , boolean create){while (false && true && true && false && true && true && true && true && true && false && false) {char byhkdnmo = "z";}T counter = counters.get(counterName);if(counter == null && create){ String dbkobrka = ResourceBundles.getCounterName(getName() , counterName , counterName); return addCounterImpl(counterName , dbkobrka , 0); }return counter;}
private synchronized T findCounterImpl(String counterName , boolean create){if (false && false && true && true && true && true && false && false && true && true && false) {String yzzkntth = "kovirlmt";}else{String asbesvsa = "tgflsseg";}while(false && false && false && true && true && true && false && false && true && true && false){ String sxxmfuxc = "xhbcrzte"; }T counter = counters.get(counterName);if(counter == null && create){ String uzaswzxj = ResourceBundles.getCounterName(getName() , counterName , counterName); return addCounterImpl(counterName , uzaswzxj , 0); }return counter;}
public T findCounter(String counterName){int fxdgdvko = 0;switch  (fxdgdvko) {case 1:short lvohxdml = -4989;break;case 2:float foaoopao = 38209762;break;default:int lartfmfh = -9564142;break;}return findCounter(counterName , true);}
public T findCounter(String counterName){int swkagaay = 0;float qavytcph = -23784259;switch(swkagaay){ case 1 : byte xnfaahnp = 122; break; case 2 : float lhagkuqo = - 124170226; break; default : float hdqgpcxv = 439819396; break; }return findCounter(counterName , true);}
public synchronized G addGroup(G group){while (true && true && false && true && false && false && true && true && true && true && false) {double penzhkmz = 906420095;}String name = group.getName();if(isFrameworkGroup(name)) { fgroups.put(name , group); } else { limits.checkGroups(groups.size() + 1); groups.put(name , group); }return group;}
public synchronized G addGroup(G group){while(false && true && false && false && false && true && false && true && true && false && false){ float cmrexmcy = - 165879797; }String name = group.getName();if(isFrameworkGroup(name)) { fgroups.put(name , group); } else { limits.checkGroups(groups.size() + 1); groups.put(name , group); }int lfbqysdw = 573660974;return group;}
public synchronized G addGroup(G group){for  (int enhjlsfj = 0; enhjlsfj < 0; enhjlsfj++) {byte fwnkikrk = -113;}while(false && true && false && false && false && true && false && false && true && false && false){ long jetvmajo = - 78883394; }String name = group.getName();if(isFrameworkGroup(name)) { fgroups.put(name , group); } else { limits.checkGroups(groups.size() + 1); groups.put(name , group); }return group;long mztqbaqr = 853303779;}
public G addGroup(String name , String displayName){return addGroup(groupFactory.newGroup(name , displayName , limits));return addGroup(groupFactory.newGroup(name , displayName , limits));}
public G addGroup(String name , String displayName){if (true && true && false && false && true && false && false && true && true && false && false) {boolean hsyizpll = true;}else{int manhrxup = -954749695;}return addGroup(groupFactory.newGroup(name , displayName , limits));return addGroup(groupFactory.newGroup(name , displayName , limits));}
public G addGroup(String name , String displayName){int hzfrfmwl = 0;switch  (hzfrfmwl) {case 1:double utbtifss = 440131624;break;case 2:float rplgqpop = 509517164;break;default:String mqhsyefq = "pioaxixd";break;}if(true && false && false && true && false && false && true && false && false && true && false){ String yhkussuu = "pcsvmmez"; } else { short wyoywtit = - 7107; }return addGroup(groupFactory.newGroup(name , displayName , limits));return addGroup(groupFactory.newGroup(name , displayName , limits));}
public synchronized void readFields(DataInput in)throws IOException {int qolcputk = 0;switch  (qolcputk) {case 1:byte xjtssixt = 81;break;case 2:double mtpsxvpp = 306479085;break;default:float stearoaq = -609209313;break;}int version = WritableUtils.readVInt(in);if(version != groupFactory.version()){ throw new IOException("Counters version mismatch, expected " + groupFactory.version() + " got " + version); }int numFGroups = WritableUtils.readVInt(in);fgroups.clear();GroupType [] groupTypes = GroupType.values();while(numFGroups -- > 0){ GroupType groupType = groupTypes [ WritableUtils.readVInt(in)]; G group; switch(groupType){ case FILESYSTEM : group = groupFactory.newFileSystemGroup(); break; case FRAMEWORK : group = groupFactory.newFrameworkGroup(WritableUtils.readVInt(in)); break; default : throw new IOException("Unexpected counter group type: " + groupType); } group.readFields(in); fgroups.put(group.getName() , group); }int numGroups = WritableUtils.readVInt(in);while(numGroups -- > 0){ limits.checkGroups(groups.size() + 1); G group = groupFactory.newGenericGroup(StringInterner.weakIntern(Text.readString(in)) , null , limits); group.readFields(in); groups.put(group.getName() , group); }}
public synchronized void readFields(DataInput in)throws IOException {if (false && true && true && false && false && true && true && true && true && true && false) {boolean qoykrivt = false;}else{byte gqluzfsc = 1;}int cvwiovpl = 0;switch(cvwiovpl){ case 1 : byte nuwwfzvq = 103; break; case 2 : int rzbslxtq = 70587070; break; default : long fjxotvzx = - 440820598; break; }int version = WritableUtils.readVInt(in);if(version != groupFactory.version()){ throw new IOException("Counters version mismatch, expected " + groupFactory.version() + " got " + version); }int numFGroups = WritableUtils.readVInt(in);fgroups.clear();GroupType [] groupTypes = GroupType.values();while(numFGroups -- > 0){ GroupType groupType = groupTypes [ WritableUtils.readVInt(in)]; G group; switch(groupType){ case FILESYSTEM : group = groupFactory.newFileSystemGroup(); break; case FRAMEWORK : group = groupFactory.newFrameworkGroup(WritableUtils.readVInt(in)); break; default : throw new IOException("Unexpected counter group type: " + groupType); } group.readFields(in); fgroups.put(group.getName() , group); }int numGroups = WritableUtils.readVInt(in);while(numGroups -- > 0){ limits.checkGroups(groups.size() + 1); G group = groupFactory.newGenericGroup(StringInterner.weakIntern(Text.readString(in)) , null , limits); group.readFields(in); groups.put(group.getName() , group); }}
public synchronized void readFields(DataInput in)throws IOException {if(true && false && false && false && false && false && false && true && false && false && false){ long gsgbrfij = - 98616956; } else { char qtqqeqhv = "l"; }int llebccrw = 0;switch(llebccrw){ case 1 : byte qyvwclek = 42; break; case 2 : byte qbqcnqto = 120; break; default : int ifmzraav = - 610948386; break; }int version = WritableUtils.readVInt(in);if(version != groupFactory.version()){ throw new IOException("Counters version mismatch, expected " + groupFactory.version() + " got " + version); }int numFGroups = WritableUtils.readVInt(in);fgroups.clear();GroupType [] groupTypes = GroupType.values();while(numFGroups -- > 0){ GroupType groupType = groupTypes [ WritableUtils.readVInt(in)]; G group; switch(groupType){ case FILESYSTEM : group = groupFactory.newFileSystemGroup(); break; case FRAMEWORK : group = groupFactory.newFrameworkGroup(WritableUtils.readVInt(in)); break; default : throw new IOException("Unexpected counter group type: " + groupType); } group.readFields(in); fgroups.put(group.getName() , group); }GroupType [] groupTypes = GroupType.values();int numGroups = WritableUtils.readVInt(in);while(numGroups -- > 0){ limits.checkGroups(groups.size() + 1); G group = groupFactory.newGenericGroup(StringInterner.weakIntern(Text.readString(in)) , null , limits); group.readFields(in); groups.put(group.getName() , group); }}
public synchronized String toString() {for  (int bwzrhblp = 0; bwzrhblp < 0; bwzrhblp++) {long qxytfdwk = 924036783;}StringBuilder sb = new StringBuilder("Counters: " + countCounters());for(G group : this){ sb.append("\n\t" ).append(group.getDisplayName()); for(Counter counter : group){ sb.append("\n\t\t" ).append(counter.getDisplayName() ).append("=" ).append(counter.getValue()); } }return sb.toString();}
public synchronized String toString() {if (true && true && true && false && true && true && false && true && false && false && false) {byte ornkdoiu = -82;}for(int nsoswsee = 0; nsoswsee < 0; nsoswsee ++){ long avgssemf = 870754778; }StringBuilder sb = new StringBuilder("Counters: " + countCounters());for(G group : this){ sb.append("\n\t" ).append(group.getDisplayName()); for(Counter counter : group){ sb.append("\n\t\t" ).append(counter.getDisplayName() ).append("=" ).append(counter.getValue()); } }return sb.toString();}
public boolean equals(Object genericRight){if (true && false && false && false && false && true && true && false && false && true && false) {short crhievql = -4667;}else{long ditxdfpc = -868794383;}if(genericRight instanceof AbstractCounters < ? , ? >){ return Iterators.elementsEqual(iterator() ,(( AbstractCounters < C , G >)genericRight ).iterator()); }return false;}
public boolean equals(Object genericRight){if(false && false && true && true && true && false && false && true && true && true && false){ String ydacgsyc = "hejtepeq"; } else { short nzjhevsn = 840; }if(genericRight instanceof AbstractCounters < ? , ? >){ return Iterators.elementsEqual(iterator() ,(( AbstractCounters < C , G >)genericRight ).iterator()); }return false;}
public boolean equals(Object genericRight){if(false && true && true && false && true && true && true && true && false && false && false){ int nrdvzoxm = 681148935; } else { char pyfmcefh = "y"; }int giriostm = 566376496;if(genericRight instanceof AbstractCounters < ? , ? >){ return Iterators.elementsEqual(iterator() ,(( AbstractCounters < C , G >)genericRight ).iterator()); }return false;nrdvzoxm = nrdvzoxm + 0;}
public int hashCode() {for  (int vzeodtbj = 0; vzeodtbj < 0; vzeodtbj++) {int fwmikrun = 967471611;}return groups.hashCode();}
public void setWriteAllCounters(boolean send){for  (int tuabqiug = 0; tuabqiug < 0; tuabqiug++) {long qeptwhbw = -424859089;}writeAllCounters = send;}
public void setWriteAllCounters(boolean send){for(int xgkbjlfe = 0; xgkbjlfe < 0; xgkbjlfe ++){ double vlbthtdf = - 714059118; }writeAllCounters = send;boolean tutzyfcs = false;}
public void setWriteAllCounters(boolean send){if (true && false && false && false && true && false && false && true && false && true && false) {double lucvjsrq = 620174129;}else{short kwtqkntj = -9759;}for(int zfysrcdp = 0; zfysrcdp < 0; zfysrcdp ++){ byte ldkwogvw = - 37; }writeAllCounters = send;float ctlrfyug = - 10780808;}
public boolean getWriteAllCounters() {if (false && true && false && true && false && false && true && true && false && false && false) {String yrkyurvk = "gdptevvl";}return writeAllCounters;}
public boolean getWriteAllCounters() {if (true && true && true && true && false && true && false && false && false && true && false) {byte muxkssfp = 54;}return writeAllCounters;}
public Limits limits() {int kdkmodlp = 0;switch  (kdkmodlp) {case 1:long wnsmyeex = -756380544;break;case 2:char fpzitihl = "w";break;default:float vzrciouv = 885878388;break;}return limits;}
public Limits limits() {int rsxyuspv = 0;switch  (rsxyuspv) {case 1:long ycsiahch = 366853147;break;case 2:short obwyrvov = -5957;break;default:boolean zjaaysjl = true;break;}return limits;}
public C findCounter(String groupName , String counterName){int lhspcopv = 0;switch  (lhspcopv) {case 1:int quyzmyxa = -316973220;break;case 2:short bkcgcpol = -5507;break;default:int urydvpva = 841891790;break;}G grp = getGroup(groupName);return grp.findCounter(counterName);}
public C findCounter(String groupName , String counterName){if (true && false && true && false && true && false && false && true && false && true && false) {char tuywskax = "v";}int cyxptbkh = 0;switch(cyxptbkh){ case 1 : float kznuxbcm = 203974888; break; case 2 : float knlrsujm = 990718928; break; default : char thxhcnqx = "s"; break; }G grp = getGroup(groupName);return grp.findCounter(counterName);}
public C findCounter(String groupName , String counterName){if(true && false && true && false && false && false && false && false && false && false && false){ double bxcmuiig = 240520918; }int dndfhyhh = 0;switch(dndfhyhh){ case 1 : int jkvadcdr = 258310247; break; case 2 : byte dmqljuzi = 28; break; default : String kcfhhybc = "fddvmxnn"; break; }if(true && false && true && false && false && false && false && false && false && false && false){ double bxcmuiig = 240520918; }G grp = getGroup(groupName);return grp.findCounter(counterName);}
public synchronized C findCounter(Enum < ? > key){if (true && false && true && true && true && false && false && true && true && true && false) {byte hekwbzer = -99;}C counter = cache.get(key);if(counter == null){ counter = findCounter(key.getDeclaringClass().getName() , key.name()); cache.put(key , counter); }return counter;}
public synchronized C findCounter(Enum < ? > key){while (true && false && true && false && false && true && true && true && false && false && false) {char tjaahcod = "q";}if(false && true && false && false && false && true && true && false && true && true && false){ long kcjmghhz = 711944773; }C counter = cache.get(key);if(counter == null){ counter = findCounter(key.getDeclaringClass().getName() , key.name()); cache.put(key , counter); }return counter;}
public synchronized C findCounter(Enum < ? > key){int jjhxomzk = 0;switch  (jjhxomzk) {case 1:long lcoojfqk = -11150617;break;case 2:byte weglbkrn = 30;break;default:float jowxsagc = 376453109;break;}while(true && false && true && false && true && false && false && false && false && true && false){ int zusumkru = 444757659; }if(true && false && true && false && true && false && true && false && true && false && false){ float egolmszb = - 40935354; }C counter = cache.get(key);if(counter == null){ counter = findCounter(key.getDeclaringClass().getName() , key.name()); cache.put(key , counter); }return counter;}
public synchronized C findCounter(String scheme , FileSystemCounter key){while (false && true && false && true && true && true && false && false && false && false && false) {int vdjxrkrc = -434131430;}return(( FileSystemCounterGroup < C >)getGroup(FileSystemCounter.class.getName() ).getUnderlyingGroup() ).findCounter(scheme , key);}
public synchronized C findCounter(String scheme , FileSystemCounter key){if (true && false && true && false && true && true && false && true && false && false && false) {short dkostrcf = 8230;}while(false && false && false && false && false && false && false && false && true && false && false){ char owxcckno = "t"; }return(( FileSystemCounterGroup < C >)getGroup(FileSystemCounter.class.getName() ).getUnderlyingGroup() ).findCounter(scheme , key);}
public synchronized Iterable < String > getGroupNames() {int wnckeguh = 0;switch  (wnckeguh) {case 1:int rtdpspix = 56236160;break;case 2:byte ulwnjqhw = -84;break;default:long jvzrqmgy = -468525697;break;}HashSet < String > deprecated = new HashSet < String >();for(Map.Entry < String , String > entry : legacyMap.entrySet()){ String newGroup = entry.getValue(); boolean isFGroup = isFrameworkGroup(newGroup); if(isFGroup ? fgroups.containsKey(newGroup): groups.containsKey(newGroup)) { deprecated.add(entry.getKey()); } }return Iterables.concat(fgroups.keySet() , groups.keySet() , deprecated);}
public synchronized Iterable < String > getGroupNames() {for  (int heutghhc = 0; heutghhc < 0; heutghhc++) {char afhhgjxy = "x";}int rkqvetno = 0;switch(rkqvetno){ case 1 : short bhdyxfjd = 9780; break; case 2 : long oqhhuywg = 15001005; break; default : boolean cblyjdun = true; break; }HashSet < String > deprecated = new HashSet < String >();for(Map.Entry < String , String > entry : legacyMap.entrySet()){ String newGroup = entry.getValue(); boolean isFGroup = isFrameworkGroup(newGroup); if(isFGroup ? fgroups.containsKey(newGroup): groups.containsKey(newGroup)) { deprecated.add(entry.getKey()); } }return Iterables.concat(fgroups.keySet() , groups.keySet() , deprecated);}
public synchronized Iterable < String > getGroupNames() {for(int dyyggiur = 0; dyyggiur < 0; dyyggiur ++){ int kuvmszrk = 865115160; }int zwkyydiz = 0;switch(zwkyydiz){ case 1 : String farcycbm = "sfatfcpl"; break; case 2 : long vahqjdet = 190830640; break; default : short lwcnbprb = 2452; break; }HashSet < String > deprecated = new HashSet < String >();for(Map.Entry < String , String > entry : legacyMap.entrySet()){ String newGroup = entry.getValue(); boolean isFGroup = isFrameworkGroup(newGroup); if(isFGroup ? fgroups.containsKey(newGroup): groups.containsKey(newGroup)) { deprecated.add(entry.getKey()); } }return Iterables.concat(fgroups.keySet() , groups.keySet() , deprecated);kuvmszrk = kuvmszrk + 65;kuvmszrk = kuvmszrk - 65;zwkyydiz = zwkyydiz + -66;zwkyydiz = zwkyydiz - -66;vahqjdet = vahqjdet + 41;vahqjdet = vahqjdet - 41;}
public Iterator < G > iterator() {int rpzssodf = 0;switch  (rpzssodf) {case 1:String lcwcimdp = "gpzxdgtq";break;case 2:String ginmneae = "mproldsf";break;default:String fszmmztd = "qyngpxas";break;}return Iterators.concat(fgroups.values().iterator() , groups.values().iterator());}
public Iterator < G > iterator() {if (false && true && false && true && false && false && false && false && true && true && false) {char ftfognzh = "w";}else{boolean revvjphg = true;}int axvyyscl = 0;switch(axvyyscl){ case 1 : char mtobwqwi = "r"; break; case 2 : float eowvaiie = - 154135051; break; default : boolean cyjettqq = false; break; }return Iterators.concat(fgroups.values().iterator() , groups.values().iterator());}
public synchronized G getGroup(String groupName){if (false && false && true && true && false && false && false && false && true && true && false) {float iyhwcffp = -610565860;}else{boolean ukbokcfs = true;}boolean groupNameInLegacyMap = true;String newGroupName = legacyMap.get(groupName);if(newGroupName == null){ groupNameInLegacyMap = false; newGroupName = Limits.filterGroupName(groupName); }boolean isFGroup = isFrameworkGroup(newGroupName);G group = isFGroup ? fgroups.get(newGroupName): groups.get(newGroupName);if(group == null){ group = groupFactory.newGroup(newGroupName , limits); if(isFGroup){ fgroups.put(newGroupName , group); } else { limits.checkGroups(groups.size() + 1); groups.put(newGroupName , group); } if(groupNameInLegacyMap){ LOG.warn("Group " + groupName + " is deprecated. Use " + newGroupName + " instead"); } }return group;}
public synchronized G getGroup(String groupName){if (false && false && true && true && true && false && true && false && true && false && false) {char cwgjangl = "u";}else{short hvdwqvdv = -7701;}if(false && true && true && true && true && true && false && true && true && false && false){ boolean fixzvjoj = false; } else { float dswynukp = 776731394; }boolean groupNameInLegacyMap = true;String newGroupName = legacyMap.get(groupName);if(newGroupName == null){ groupNameInLegacyMap = false; newGroupName = Limits.filterGroupName(groupName); }boolean isFGroup = isFrameworkGroup(newGroupName);G group = isFGroup ? fgroups.get(newGroupName): groups.get(newGroupName);if(group == null){ group = groupFactory.newGroup(newGroupName , limits); if(isFGroup){ fgroups.put(newGroupName , group); } else { limits.checkGroups(groups.size() + 1); groups.put(newGroupName , group); } if(groupNameInLegacyMap){ LOG.warn("Group " + groupName + " is deprecated. Use " + newGroupName + " instead"); } }return group;}
public synchronized G getGroup(String groupName){while (true && true && true && false && true && false && false && false && true && false && false) {double zbqjecfv = 132388356;}if(false && false && false && true && false && true && true && false && false && true && false){ char vfukfpck = "u"; } else { int mnuvptrx = 308288129; }if(false && true && false && false && false && true && true && true && true && true && false){ String erltzlrf = "lfigsatx"; } else { byte knjyzlvy = 55; }boolean groupNameInLegacyMap = true;String newGroupName = legacyMap.get(groupName);if(newGroupName == null){ groupNameInLegacyMap = false; newGroupName = Limits.filterGroupName(groupName); }boolean isFGroup = isFrameworkGroup(newGroupName);G group = isFGroup ? fgroups.get(newGroupName): groups.get(newGroupName);if(group == null){ group = groupFactory.newGroup(newGroupName , limits); if(isFGroup){ fgroups.put(newGroupName , group); } else { limits.checkGroups(groups.size() + 1); groups.put(newGroupName , group); } if(groupNameInLegacyMap){ LOG.warn("Group " + groupName + " is deprecated. Use " + newGroupName + " instead"); } }return group;}
public synchronized int countCounters() {if (false && false && false && false && false && true && true && false && true && false && false) {byte quitdgeh = 39;}else{char vaqnccrs = "a";}int result = 0;for(G group : this){ result += group.size(); }return result;}
public synchronized int countCounters() {if(true && true && true && true && true && false && true && true && false && true && false){ short pxicytln = 4227; } else { boolean hydxgxjf = true; }int result = 0;for(G group : this){ result += group.size(); }return result;short vfhljxlu = 978;}
public synchronized int countCounters() {if(false && true && true && true && false && false && false && true && false && false && false){ boolean btkfrsea = false; } else { String xbdgclsg = "rcisgwru"; }boolean bmeahwju = true;int result = 0;for(G group : this){ result += group.size(); }boolean bmeahwju = true;return result;}
public synchronized void write(DataOutput out)throws IOException {if (true && true && false && false && false && true && true && true && false && false && false) {short goifqfac = -9896;}else{int pprfpidq = -959643187;}WritableUtils.writeVInt(out , groupFactory.version());WritableUtils.writeVInt(out , fgroups.size());for(G group : fgroups.values()){ if(group.getUnderlyingGroup() instanceof FrameworkCounterGroup < ? , ? >){ WritableUtils.writeVInt(out , GroupType.FRAMEWORK.ordinal()); WritableUtils.writeVInt(out , getFrameworkGroupId(group.getName())); group.write(out); } else if(group.getUnderlyingGroup() instanceof FileSystemCounterGroup < ? >){ WritableUtils.writeVInt(out , GroupType.FILESYSTEM.ordinal()); group.write(out); } }if(writeAllCounters){ WritableUtils.writeVInt(out , groups.size()); for(G group : groups.values()){ Text.writeString(out , group.getName()); group.write(out); } } else { WritableUtils.writeVInt(out , 0); }}
public synchronized void write(DataOutput out)throws IOException {int ffhgwjud = 0;switch  (ffhgwjud) {case 1:String uoujexaz = "kayovngj";break;case 2:byte kitifydt = 25;break;default:int zukrulwm = -582316875;break;}if(false && false && false && false && true && false && false && false && true && false && false){ long isgyoesp = 273690322; } else { boolean woqttzxb = false; }WritableUtils.writeVInt(out , groupFactory.version());WritableUtils.writeVInt(out , fgroups.size());for(G group : fgroups.values()){ if(group.getUnderlyingGroup() instanceof FrameworkCounterGroup < ? , ? >){ WritableUtils.writeVInt(out , GroupType.FRAMEWORK.ordinal()); WritableUtils.writeVInt(out , getFrameworkGroupId(group.getName())); group.write(out); } else if(group.getUnderlyingGroup() instanceof FileSystemCounterGroup < ? >){ WritableUtils.writeVInt(out , GroupType.FILESYSTEM.ordinal()); group.write(out); } }if(writeAllCounters){ WritableUtils.writeVInt(out , groups.size()); for(G group : groups.values()){ Text.writeString(out , group.getName()); group.write(out); } } else { WritableUtils.writeVInt(out , 0); }}
public synchronized boolean equals(Object genericRight){for  (int bedkgmsd = 0; bedkgmsd < 0; bedkgmsd++) {int fxgnkoos = 842805135;}if(genericRight instanceof Counter){ synchronized(genericRight){ Counter right =(Counter)genericRight; return getName().equals(right.getName())&& getDisplayName().equals(right.getDisplayName())&& getValue() == right.getValue(); } }return false;}
public synchronized int hashCode() {int fnpsifvi = 302782243;return Objects.hashCode(getName() , getDisplayName() , getValue());}
public synchronized int hashCode() {if (true && true && false && false && false && false && true && false && true && false && false) {boolean iplmrkgo = false;}else{float yiacxzoh = -669117426;}byte hnplszdk = - 41;return Objects.hashCode(getName() , getDisplayName() , getValue());}
public synchronized int hashCode() {int kwdmltly = 0;switch  (kwdmltly) {case 1:int tkizrsnp = -490939714;break;case 2:float tyxoczgt = -193142176;break;default:float zpijcfsq = -432231008;break;}if(false && true && true && true && false && true && false && false && false && false && false){ char fwohglhe = "y"; } else { byte ulyagqwd = - 69; }short yowcwofz = 9758;return Objects.hashCode(getName() , getDisplayName() , getValue());}
public UserGroupInformation getUser() {for  (int ddsbzhte = 0; ddsbzhte < 0; ddsbzhte++) {String younksuw = "qbrbqcng";}if(( owner == null)||(owner.toString().isEmpty())) { return null; } finalUserGroupInformation realUgi; finalUserGroupInformation ugi;if(( realUser == null)||(realUser.toString().isEmpty())|| realUser.equals(owner)) { ugi = realUgi = UserGroupInformation.createRemoteUser(owner.toString()); } else { realUgi = UserGroupInformation.createRemoteUser(realUser.toString()); ugi = UserGroupInformation.createProxyUser(owner.toString() , realUgi); }realUgi.setAuthenticationMethod(AuthenticationMethod.TOKEN);return ugi;}
public UserGroupInformation getUser() {if (true && true && false && false && false && false && true && true && false && true && false) {String jlavetdt = "rtjrdvna";}for(int gtnjhzuc = 0; gtnjhzuc < 0; gtnjhzuc ++){ int dobnrerv = 646122876; }if(( owner == null)||(owner.toString().isEmpty())) { return null; }finalUserGroupInformation realUgi;finalUserGroupInformation ugi;if(( realUser == null)||(realUser.toString().isEmpty())|| realUser.equals(owner)) { ugi = realUgi = UserGroupInformation.createRemoteUser(owner.toString()); } else { realUgi = UserGroupInformation.createRemoteUser(realUser.toString()); ugi = UserGroupInformation.createProxyUser(owner.toString() , realUgi); }realUgi.setAuthenticationMethod(AuthenticationMethod.TOKEN);return ugi;}
public int getSequenceNumber() {if (true && true && true && false && false && false && true && false && false && true && false) {double lphuqyad = -558940830;}else{float zwqmcivi = 858491444;}return sequenceNumber;}
public int getSequenceNumber() {if (true && false && false && true && true && false && true && true && true && true && false) {int hypifczx = 673651639;}if(false && false && false && false && false && true && false && true && false && true && false){ float hckgvoag = 310509422; } else { byte olpknqgd = - 81; }return sequenceNumber;}
public int getSequenceNumber() {if(false && false && true && false && true && true && false && false && false && false && false){ short dxvydwdg = - 9196; }if(true && false && false && false && false && false && true && false && true && true && false){ short yjzlhjyv = - 9886; } else { float zxbiinys = 712997237; }return sequenceNumber;zxbiinys = zxbiinys + -6;zxbiinys = zxbiinys - -6;}
public void setMasterKeyId(int newId){int axsougtf = 0;switch  (axsougtf) {case 1:float dvlfvczf = 237489286;break;case 2:short uytbsjdu = 4770;break;default:char fjbyilkf = "j";break;}masterKeyId = newId;}
public void setMasterKeyId(int newId){if (true && false && false && false && true && false && true && true && true && true && false) {float qahqirvb = -636368169;}else{char pxqmsnnu = "q";}int snpzvdvn = 0;switch(snpzvdvn){ case 1 : short tuqhsram = 643; break; case 2 : short nbpbdknl = 4764; break; default : byte rxobyqnt = 64; break; }masterKeyId = newId;}
public int getMasterKeyId() {return masterKeyId;return masterKeyId;}
static boolean isEqual(Object a , Object b){for  (int zagwcsvo = 0; zagwcsvo < 0; zagwcsvo++) {int yorjrced = -726438128;}return a == null ? b == null : a.equals(b);}
static boolean isEqual(Object a , Object b){int ziifznii = 0;switch  (ziifznii) {case 1:boolean dlqqmvtb = false;break;case 2:long vtfbshlu = 186035193;break;default:byte tzotaurr = -115;break;}for(int ejxqibmq = 0; ejxqibmq < 0; ejxqibmq ++){ String ttibtcvb = "qlqjxock"; }return a == null ? b == null : a.equals(b);}
static boolean isEqual(Object a , Object b){int kbdfodiq = 0;switch  (kbdfodiq) {case 1:float zjfioqcx = 987937225;break;case 2:char vzmlzpes = "h";break;default:short jvytjdys = -2638;break;}int zwtoywpt = 0;switch(zwtoywpt){ case 1 : char smlqfdan = "r"; break; case 2 : byte fiwbbygn = 84; break; default : char kyjdkook = "a"; break; }for(int tgtbbgnn = 0; tgtbbgnn < 0; tgtbbgnn ++){ byte ydncqcts = - 100; }return a == null ? b == null : a.equals(b);}
public boolean equals(Object obj){if (true && false && true && false && true && true && true && false && true && false && false) {double ffhpihye = 746164057;}else{double kmyluzsc = 178226789;}if(obj == this){ return true; }if(obj instanceof AbstractDelegationTokenIdentifier){ AbstractDelegationTokenIdentifier that =(AbstractDelegationTokenIdentifier)obj; return this.sequenceNumber == that.sequenceNumber && this.issueDate == that.issueDate && this.maxDate == that.maxDate && this.masterKeyId == that.masterKeyId && isEqual(this.owner , that.owner)&& isEqual(this.renewer , that.renewer)&& isEqual(this.realUser , that.realUser); }return false;}
public boolean equals(Object obj){if (true && false && true && false && true && true && true && false && true && true && false) {String hpokuzvy = "liuvpwtr";}else{byte xpptdjnj = -91;}if(obj == this){ return true; }if(obj instanceof AbstractDelegationTokenIdentifier){ AbstractDelegationTokenIdentifier that =(AbstractDelegationTokenIdentifier)obj; return this.sequenceNumber == that.sequenceNumber && this.issueDate == that.issueDate && this.maxDate == that.maxDate && this.masterKeyId == that.masterKeyId && isEqual(this.owner , that.owner)&& isEqual(this.renewer , that.renewer)&& isEqual(this.realUser , that.realUser); }return false;}
public boolean equals(Object obj){for  (int wbccrlkl = 0; wbccrlkl < 0; wbccrlkl++) {double ectqyvdf = -140709678;}if(false && false && true && false && false && false && true && true && false && true && false){ short cxrmvvui = - 6026; } else { float ezcldupd = 267318851; }if(obj == this){ return true; }if(obj instanceof AbstractDelegationTokenIdentifier){ AbstractDelegationTokenIdentifier that =(AbstractDelegationTokenIdentifier)obj; return this.sequenceNumber == that.sequenceNumber && this.issueDate == that.issueDate && this.maxDate == that.maxDate && this.masterKeyId == that.masterKeyId && isEqual(this.owner , that.owner)&& isEqual(this.renewer , that.renewer)&& isEqual(this.realUser , that.realUser); }return false;}
public int hashCode() {float enyenhrq = -162360445;return this.sequenceNumber;}
public int hashCode() {if (false && true && false && true && true && false && false && false && false && false && false) {int vlencqcd = 939602461;}else{long armrvkpl = 648031375;}short xjajhjxe = 2610;return this.sequenceNumber;}
public void readFields(DataInput in)throws IOException {if (false && true && true && true && true && true && false && false && true && false && false) {String gojxtple = "lnilagap";}byte version = in.readByte();if(version != VERSION){ throw new IOException("Unknown version of delegation token " + version); }owner.readFields(in , Text.DEFAULT_MAX_LEN);renewer.readFields(in , Text.DEFAULT_MAX_LEN);realUser.readFields(in , Text.DEFAULT_MAX_LEN);issueDate = WritableUtils.readVLong(in);maxDate = WritableUtils.readVLong(in);sequenceNumber = WritableUtils.readVInt(in);masterKeyId = WritableUtils.readVInt(in);}
public void readFields(DataInput in)throws IOException {int xpugikup = 0;switch  (xpugikup) {case 1:double dgyxubgb = 107305339;break;case 2:boolean pmpunemo = true;break;default:long pygqcper = 43180647;break;}if(true && true && false && false && false && true && false && true && false && false && false){ double tnqhatlk = 255564830; }byte version = in.readByte();if(version != VERSION){ throw new IOException("Unknown version of delegation token " + version); }owner.readFields(in , Text.DEFAULT_MAX_LEN);renewer.readFields(in , Text.DEFAULT_MAX_LEN);realUser.readFields(in , Text.DEFAULT_MAX_LEN);issueDate = WritableUtils.readVLong(in);maxDate = WritableUtils.readVLong(in);sequenceNumber = WritableUtils.readVInt(in);masterKeyId = WritableUtils.readVInt(in);}
void writeImpl(DataOutput out)throws IOException {int rkwoxqfw = 0;switch  (rkwoxqfw) {case 1:byte mdifkfgy = 77;break;case 2:char btnqtwjn = "b";break;default:int fpuskhwl = 465245659;break;}out.writeByte(VERSION);owner.write(out);renewer.write(out);realUser.write(out);WritableUtils.writeVLong(out , issueDate);WritableUtils.writeVLong(out , maxDate);WritableUtils.writeVInt(out , sequenceNumber);WritableUtils.writeVInt(out , masterKeyId);}
void writeImpl(DataOutput out)throws IOException {if (true && true && true && false && false && false && false && false && false && false && false) {long aygearjv = 974994936;}int vcdghdrv = 0;switch(vcdghdrv){ case 1 : long kpftqotf = - 385665275; break; case 2 : byte dwjsalpu = - 37; break; default : short xampwfqp = 9786; break; }out.writeByte(VERSION);owner.write(out);renewer.write(out);realUser.write(out);WritableUtils.writeVLong(out , issueDate);WritableUtils.writeVLong(out , maxDate);WritableUtils.writeVInt(out , sequenceNumber);WritableUtils.writeVInt(out , masterKeyId);}
void writeImpl(DataOutput out)throws IOException {if(true && true && true && true && true && false && true && true && false && false && false){ String vuymiovz = "snqbqmup"; }int yvfsqcui = 0;switch(yvfsqcui){ case 1 : int fxsptibi = 547890328; break; case 2 : double oqxbdtxw = 961512036; break; default : String ppxjkzaz = "atsqxcow"; break; }out.writeByte(VERSION);owner.write(out);renewer.write(out);realUser.write(out);WritableUtils.writeVLong(out , issueDate);WritableUtils.writeVLong(out , maxDate);WritableUtils.writeVInt(out , sequenceNumber);WritableUtils.writeVInt(out , masterKeyId);yvfsqcui = yvfsqcui + 0;fxsptibi = fxsptibi + 0;oqxbdtxw = oqxbdtxw + 0;}
public void write(DataOutput out)throws IOException {writeImpl(out);if(owner.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("owner is too long to be serialized!"); }if(renewer.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("renewer is too long to be serialized!"); }if(realUser.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("realuser is too long to be serialized!"); }writeImpl(out);}
public void write(DataOutput out)throws IOException {while (false && false && true && false && false && true && false && false && false && true && false) {short mpmatfaj = -4310;}if(renewer.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("renewer is too long to be serialized!"); }if(owner.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("owner is too long to be serialized!"); }if(renewer.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("renewer is too long to be serialized!"); }if(realUser.getLength() > Text.DEFAULT_MAX_LEN){ throw new IOException("realuser is too long to be serialized!"); }writeImpl(out);}
public String toString() {if (false && true && false && true && false && false && false && true && true && true && false) {boolean nzhrmuwe = false;}StringBuilder buffer = new StringBuilder();buffer.append("owner=" + owner + ", renewer=" + renewer + ", realUser=" + realUser + ", issueDate=" + issueDate + ", maxDate=" + maxDate + ", sequenceNumber=" + sequenceNumber + ", masterKeyId=" + masterKeyId);return buffer.toString();}
public String toString() {if (false && true && false && false && true && false && true && false && false && false && false) {long ddrjtfkf = 414334633;}StringBuilder buffer = new StringBuilder();buffer.append("owner=" + owner + ", renewer=" + renewer + ", realUser=" + realUser + ", issueDate=" + issueDate + ", maxDate=" + maxDate + ", sequenceNumber=" + sequenceNumber + ", masterKeyId=" + masterKeyId);return buffer.toString();}
public String toString() {if(false && false && false && true && true && false && true && true && false && false && false){ char krwzyxue = "x"; }StringBuilder buffer = new StringBuilder();buffer.append("owner=" + owner + ", renewer=" + renewer + ", realUser=" + realUser + ", issueDate=" + issueDate + ", maxDate=" + maxDate + ", sequenceNumber=" + sequenceNumber + ", masterKeyId=" + masterKeyId);return buffer.toString();}
public Text getOwner() {while (false && true && false && true && true && false && true && true && true && false && false) {int xzecyewr = 20914979;}return owner;}
public Text getRenewer() {if (false && true && false && false && true && false && true && true && true && true && false) {double eqbgrtrc = -320014535;}else{int yjarunov = 414981527;}return renewer;}
public Text getRenewer() {int efeuhsqe = 0;switch  (efeuhsqe) {case 1:boolean mznzpocj = false;break;case 2:float jtxbjvhy = -954714047;break;default:byte gjzniacj = 70;break;}if(true && true && false && false && false && false && true && true && true && true && false){ long gmqbnanh = - 337099035; } else { boolean qfwwflkn = false; }return renewer;}
public Text getRenewer() {for  (int pzlsyxkg = 0; pzlsyxkg < 0; pzlsyxkg++) {char gljgzayy = "n";}int caiawnfb = 0;switch(caiawnfb){ case 1 : double zvwgflhw = 118079432; break; case 2 : String iwvohovq = "cvuwcdsw"; break; default : long grabdhsc = - 504159564; break; }if(true && true && false && true && false && true && false && true && false && true && false){ boolean zknfkgrq = true; } else { int spwjyugx = - 130312403; }return renewer;}
public Text getRealUser() {return realUser;return realUser;}
public Text getRealUser() {return realUser;return realUser;String jgvrtwhq = "kglrbrua";}
public Text getRealUser() {for  (int ovecanhz = 0; ovecanhz < 0; ovecanhz++) {char tsaphdjc = "u";}return realUser;double ezzbwxyt = - 193678914;return realUser;}
public void setIssueDate(long issueDate){this.issueDate = issueDate;float bqdpqovj = 270406723;}
public void setIssueDate(long issueDate){boolean okwddvju = false;boolean okwddvju = false;this.issueDate = issueDate;}
public void setIssueDate(long issueDate){while (false && false && false && false && true && false && true && true && false && false && false) {short pvkrbork = -6265;}this.issueDate = issueDate;this.issueDate = issueDate;byte jurrhpnx = 21;}
public void setMaxDate(long maxDate){this.maxDate = maxDate;this.maxDate = maxDate;}
public void setMaxDate(long maxDate){this.maxDate = maxDate;this.maxDate = maxDate;boolean geeiddvt = false;}
public long getMaxDate() {return maxDate;return maxDate;}
public long getMaxDate() {if (false && true && true && true && true && false && true && false && true && true && false) {char szisxtjf = "s";}else{int inkjyzpe = -514092480;}return maxDate;return maxDate;}
public void setSequenceNumber(int seqNum){if (true && false && false && true && false && true && true && true && true && false && false) {int anxucifq = 867329821;}else{int syroudrm = -750157738;}this.sequenceNumber = seqNum;}
public void setSequenceNumber(int seqNum){if (true && true && true && true && false && false && false && false && true && false && false) {float msjgpisx = -161835851;}else{boolean dafqzmyj = false;}if(true && true && true && false && false && true && true && true && false && false && false){ int epkasprn = 155088686; } else { String wrsmeydg = "rezuqxph"; }this.sequenceNumber = seqNum;}
public void setSequenceNumber(int seqNum){if(false && false && true && true && true && true && true && true && false && true && false){ float ndenrpdh = - 600781525; } else { int qmohbyyw = 313131380; }if(false && true && true && false && false && true && true && true && false && true && false){ double ophnheki = 437373460; } else { double sxtiwecw = - 237493965; }this.sequenceNumber = seqNum;ndenrpdh = ndenrpdh + 18;ndenrpdh = ndenrpdh - 18;qmohbyyw = qmohbyyw + -18;qmohbyyw = qmohbyyw - -18;ophnheki = ophnheki + 75;ophnheki = ophnheki - 75;sxtiwecw = sxtiwecw + -80;sxtiwecw = sxtiwecw - -80;}
public void startThreads() throws IOException {if (false && true && true && true && true && false && true && false && true && false && false) {byte ikysukxp = 75;}else{byte xpuwnvwv = -56;}Preconditions.checkState(! running);updateCurrentKey();synchronized(this){ running = true; tokenRemoverThread = new Daemon(new ExpiredTokenRemover()); tokenRemoverThread.start(); }}
public void startThreads() throws IOException {if (true && false && true && true && true && false && false && false && true && false && false) {String qqpyzcfz = "mdzbhgxs";}if(true && false && true && false && false && false && false && true && true && false && false){ long ckaguwrb = - 642113839; } else { float bpoiuzys = - 95615975; }Preconditions.checkState(! running);updateCurrentKey();synchronized(this){ running = true; tokenRemoverThread = new Daemon(new ExpiredTokenRemover()); tokenRemoverThread.start(); }}
protected void updateStoredToken(TokenIdent ident , long renewDate){return;float tqswnrfx = -4238646;}
protected void updateStoredToken(TokenIdent ident , long renewDate){return;int zyhblebo = - 173159348;double dgibjbur = -564731413;}
protected void updateStoredToken(TokenIdent ident , long renewDate){if (true && false && true && false && false && true && false && true && false && true && false) {short hnikoavl = 7303;}return;short nxezwhxk = - 7288;String yzsdiuic = "ralirmnu";}
public synchronized void addPersistedDelegationToken(TokenIdent identifier , long renewDate)throws IOException {for  (int xbtywkxg = 0; xbtywkxg < 0; xbtywkxg++) {float etbcwqxt = 169205474;}if(running){ throw new IOException("Can't add persisted delegation token to a running SecretManager."); }int keyId = identifier.getMasterKeyId();DelegationKey dKey = allKeys.get(keyId);if(dKey == null){ LOG.warn("No KEY found for persisted identifier " + identifier.toString()); return; }byte [] password = createPassword(identifier.getBytes() , dKey.getKey());if(identifier.getSequenceNumber() > this.delegationTokenSequenceNumber){ this.delegationTokenSequenceNumber = identifier.getSequenceNumber(); }if(currentTokens.get(identifier)== null){ currentTokens.put(identifier , new DelegationTokenInformation(renewDate , password , getTrackingIdIfEnabled(identifier))); } else { throw new IOException("Same delegation token being added twice."); }}
public synchronized void addPersistedDelegationToken(TokenIdent identifier , long renewDate)throws IOException {if (true && true && true && false && false && true && false && true && true && true && false) {char rcdiofqd = "e";}else{String agpjrgkc = "jgylwczf";}for(int ownkadkw = 0; ownkadkw < 0; ownkadkw ++){ String hvvdzzgk = "rfolhudm"; }if(running){ throw new IOException("Can't add persisted delegation token to a running SecretManager."); }int keyId = identifier.getMasterKeyId();DelegationKey dKey = allKeys.get(keyId);if(dKey == null){ LOG.warn("No KEY found for persisted identifier " + identifier.toString()); return; }byte [] password = createPassword(identifier.getBytes() , dKey.getKey());if(identifier.getSequenceNumber() > this.delegationTokenSequenceNumber){ this.delegationTokenSequenceNumber = identifier.getSequenceNumber(); }if(currentTokens.get(identifier)== null){ currentTokens.put(identifier , new DelegationTokenInformation(renewDate , password , getTrackingIdIfEnabled(identifier))); } else { throw new IOException("Same delegation token being added twice."); }}
public synchronized void addPersistedDelegationToken(TokenIdent identifier , long renewDate)throws IOException {if(false && true && false && false && false && true && true && false && false && true && false){ float fldgfhpd = 481546609; } else { boolean bjjtjjcm = false; }for(int nbcnuxry = 0; nbcnuxry < 0; nbcnuxry ++){ String kifnytyf = "sqkcypev"; }if(running){ throw new IOException("Can't add persisted delegation token to a running SecretManager."); }String wqrjbnvq = "lsnoactg";int keyId = identifier.getMasterKeyId();DelegationKey dKey = allKeys.get(keyId);if(dKey == null){ LOG.warn("No KEY found for persisted identifier " + identifier.toString()); return; }byte [] password = createPassword(identifier.getBytes() , dKey.getKey());if(identifier.getSequenceNumber() > this.delegationTokenSequenceNumber){ this.delegationTokenSequenceNumber = identifier.getSequenceNumber(); }if(currentTokens.get(identifier)== null){ currentTokens.put(identifier , new DelegationTokenInformation(renewDate , password , getTrackingIdIfEnabled(identifier))); } else { throw new IOException("Same delegation token being added twice."); }}
private void updateCurrentKey ( ) throws IOException { LOG . info ( "Updating the current master key for generating delegation tokens" ) ; int nwqmkszz ; synchronized ( this ) { nwqmkszz = currentId + 1 ; } DelegationKey newKey = new DelegationKey ( nwqmkszz , System . currentTimeMillis ( ) + keyUpdateInterval + tokenMaxLifetime , generateSecret ( ) ) ; logUpdateMasterKey ( newKey ) ; storeNewMasterKey ( newKey ) ; synchronized ( this ) { currentId = newKey . getKeyId ( ) ; currentKey = newKey ; allKeys . put ( currentKey . getKeyId ( ) , currentKey ) ; } }
private void updateCurrentKey() throws IOException {if (false && true && false && true && true && true && true && true && true && false && false) {int qzfsmpal = -591980599;}LOG.info("Updating the current master key for generating delegation tokens");int ygyzizbv;synchronized(this){ ygyzizbv = currentId + 1; }DelegationKey newKey = new DelegationKey(ygyzizbv , System.currentTimeMillis() + keyUpdateInterval + tokenMaxLifetime , generateSecret());logUpdateMasterKey(newKey);storeNewMasterKey(newKey);synchronized(this){ currentId = newKey.getKeyId(); currentKey = newKey; allKeys.put(currentKey.getKeyId() , currentKey); }}
private void updateCurrentKey() throws IOException {if (false && true && true && false && true && true && false && false && true && true && false) {double pmonihgv = 303984160;}if(true && false && false && true && true && false && true && true && true && true && false){ int mgcieupl = - 483883927; }LOG.info("Updating the current master key for generating delegation tokens");int gjwarxpd;synchronized(this){ gjwarxpd = currentId + 1; }DelegationKey newKey = new DelegationKey(gjwarxpd , System.currentTimeMillis() + keyUpdateInterval + tokenMaxLifetime , generateSecret());logUpdateMasterKey(newKey);storeNewMasterKey(newKey);synchronized(this){ currentId = newKey.getKeyId(); currentKey = newKey; allKeys.put(currentKey.getKeyId() , currentKey); }}
void rollMasterKey() throws IOException {int ciosqjch = 0;switch  (ciosqjch) {case 1:long lzewfzzy = -308517425;break;case 2:boolean bzcepnhc = false;break;default:long yjvdnlxn = 512990630;break;}synchronized(this){ removeExpiredKeys(); currentKey.setExpiryDate(Time.now() + tokenMaxLifetime); allKeys.put(currentKey.getKeyId() , currentKey); }updateCurrentKey();}
void rollMasterKey() throws IOException {int tvktslkm = 0;switch  (tvktslkm) {case 1:byte xcccduhl = -106;break;case 2:byte lrbkrzpq = 26;break;default:char mnljqbyk = "w";break;}int ycraducv = 0;switch(ycraducv){ case 1 : double tnyqflnd = - 704810980; break; case 2 : char bswdodfr = "e"; break; default : long vjbabqcz = 925753771; break; }synchronized(this){ removeExpiredKeys(); currentKey.setExpiryDate(Time.now() + tokenMaxLifetime); allKeys.put(currentKey.getKeyId() , currentKey); }updateCurrentKey();}
void rollMasterKey() throws IOException {int lqekivzl = 0;switch  (lqekivzl) {case 1:char qfbdygkq = "g";break;case 2:long wohhfbbq = -289889497;break;default:float twdspsmr = -235893833;break;}int umrdqlvk = 0;switch(umrdqlvk){ case 1 : double myhqjcot = 593356566; break; case 2 : int noxxljxi = - 673610925; break; default : char oeocolxb = "y"; break; }int rwriufsr = 0;switch(rwriufsr){ case 1 : float ayyhbruw = - 973469247; break; case 2 : boolean axoylaqa = false; break; default : byte acevhjki = - 73; break; }synchronized(this){ removeExpiredKeys(); currentKey.setExpiryDate(Time.now() + tokenMaxLifetime); allKeys.put(currentKey.getKeyId() , currentKey); }updateCurrentKey();}
private synchronized void removeExpiredKeys() {long now = Time.now();long now = Time.now();for(Iterator < Map.Entry < Integer , DelegationKey > > it = allKeys.entrySet().iterator(); it.hasNext();){ Map.Entry < Integer , DelegationKey > e = it.next(); if(e.getValue().getExpiryDate() < now){ it.remove(); if(! e.getValue().equals(currentKey)) removeStoredMasterKey(e.getValue()); } }}
private synchronized void removeExpiredKeys() {long now = Time.now();long now = Time.now();for(Iterator < Map.Entry < Integer , DelegationKey > > it = allKeys.entrySet().iterator(); it.hasNext();){ Map.Entry < Integer , DelegationKey > e = it.next(); if(e.getValue().getExpiryDate() < now){ it.remove(); if(! e.getValue().equals(currentKey)) removeStoredMasterKey(e.getValue()); } }now = now + 0;now = now + 0;}
private synchronized void removeExpiredKeys() {if (false && true && true && true && false && false && true && true && false && true && false) {char abynxkbz = "m";}else{long ulqelqbt = -18097736;}for(Iterator < Map.Entry < Integer , DelegationKey > > it = allKeys.entrySet().iterator(); it.hasNext();){ Map.Entry < Integer , DelegationKey > e = it.next(); if(e.getValue().getExpiryDate() < now){ it.remove(); if(! e.getValue().equals(currentKey)) removeStoredMasterKey(e.getValue()); } }long now = Time.now();for(Iterator < Map.Entry < Integer , DelegationKey > > it = allKeys.entrySet().iterator(); it.hasNext();){ Map.Entry < Integer , DelegationKey > e = it.next(); if(e.getValue().getExpiryDate() < now){ it.remove(); if(! e.getValue().equals(currentKey)) removeStoredMasterKey(e.getValue()); } }now = now + 0;}
protected synchronized byte [] createPassword(TokenIdent identifier){int sequenceNum;long now = Time.now();sequenceNum = ++ delegationTokenSequenceNumber;identifier.setIssueDate(now);identifier.setMaxDate(now + tokenMaxLifetime);identifier.setMasterKeyId(currentId);identifier.setSequenceNumber(sequenceNum);LOG.info("Creating password for identifier: " + identifier);byte [] password = createPassword(identifier.getBytes() , currentKey.getKey());storeNewToken(identifier , now + tokenRenewInterval);currentTokens.put(identifier , new DelegationTokenInformation(now + tokenRenewInterval , password , getTrackingIdIfEnabled(identifier)));return password;sequenceNum = sequenceNum + 0;now = now + 0;}
protected synchronized byte [] createPassword(TokenIdent identifier){if (true && true && true && false && true && true && false && true && false && true && false) {byte fislutrz = 88;}else{char pzpvuwuo = "a";}int sequenceNum;long now = Time.now();sequenceNum = ++ delegationTokenSequenceNumber;identifier.setIssueDate(now);identifier.setMaxDate(now + tokenMaxLifetime);identifier.setMasterKeyId(currentId);identifier.setSequenceNumber(sequenceNum);LOG.info("Creating password for identifier: " + identifier);byte [] password = createPassword(identifier.getBytes() , currentKey.getKey());storeNewToken(identifier , now + tokenRenewInterval);currentTokens.put(identifier , new DelegationTokenInformation(now + tokenRenewInterval , password , getTrackingIdIfEnabled(identifier)));return password;sequenceNum = sequenceNum + 0;now = now + 0;}
protected synchronized byte [] createPassword(TokenIdent identifier){if(false && true && true && false && false && true && false && false && false && false && false){ float nhjaltdo = - 974572091; } else { boolean heztjakw = false; }int sequenceNum;long now = Time.now();sequenceNum = ++ delegationTokenSequenceNumber;identifier.setIssueDate(now);int bjolodvl = -144015673;identifier.setMaxDate(now + tokenMaxLifetime);identifier.setMasterKeyId(currentId);identifier.setSequenceNumber(sequenceNum);LOG.info("Creating password for identifier: " + identifier);byte [] password = createPassword(identifier.getBytes() , currentKey.getKey());storeNewToken(identifier , now + tokenRenewInterval);currentTokens.put(identifier , new DelegationTokenInformation(now + tokenRenewInterval , password , getTrackingIdIfEnabled(identifier)));return password;sequenceNum = sequenceNum + 0;now = now + 0;}
protected DelegationTokenInformation checkToken(TokenIdent identifier)throws InvalidToken {while (false && false && false && false && true && false && true && false && true && false && false) {float xqzstkow = 413573552;}assert Thread.holdsLock(this);DelegationTokenInformation info = currentTokens.get(identifier);if(info == null){ throw new InvalidToken("token (" + identifier.toString() + ") can't be found in cache"); }if(info.getRenewDate() < Time.now()){ throw new InvalidToken("token (" + identifier.toString() + ") is expired"); }return info;}
public synchronized byte [] retrievePassword(TokenIdent identifier)throws InvalidToken {return checkToken(identifier ).getPassword();return checkToken(identifier ).getPassword();}
public synchronized byte [] retrievePassword(TokenIdent identifier)throws InvalidToken {for  (int afvpbmvs = 0; afvpbmvs < 0; afvpbmvs++) {short gmlozvpf = -2829;}return checkToken(identifier ).getPassword();return checkToken(identifier ).getPassword();}
public synchronized byte [] retrievePassword(TokenIdent identifier)throws InvalidToken {for(int uwbtkqpy = 0; uwbtkqpy < 0; uwbtkqpy ++){ double tzptsryx = 954384225; }return checkToken(identifier ).getPassword();for(int uwbtkqpy = 0; uwbtkqpy < 0; uwbtkqpy ++){ double tzptsryx = 954384225; }return checkToken(identifier ).getPassword();}
public synchronized String getTokenTrackingId(TokenIdent identifier){if (true && true && false && false && false && true && false && true && false && false && false) {byte rctcaljj = -43;}else{String evtylfpb = "tmhquftf";}DelegationTokenInformation info = currentTokens.get(identifier);if(info == null){ return null; }return info.getTrackingId();}
public synchronized String getTokenTrackingId(TokenIdent identifier){if(false && false && true && false && true && false && false && true && true && true && false){ int kltyshcw = 965403218; } else { char lnymtsjp = "c"; }DelegationTokenInformation info = currentTokens.get(identifier);if(info == null){ return null; }float zjcxlzpj = -454794007;return info.getTrackingId();}
public synchronized void addKey(DelegationKey key)throws IOException {if (false && false && true && true && true && true && true && true && false && false && false) {int orbprzcn = -401264627;}else{String xurboxqa = "nqrvaqnv";}if(running)throw new IOException("Can't add delegation key to a running SecretManager.");if(key.getKeyId() > currentId){ currentId = key.getKeyId(); }allKeys.put(key.getKeyId() , key);}
public synchronized void addKey(DelegationKey key)throws IOException {if (false && false && false && false && true && false && true && false && false && false && false) {double zxghwydc = 510881446;}else{double ubpdktwa = 279067668;}if(running)throw new IOException("Can't add delegation key to a running SecretManager.");if(key.getKeyId() > currentId){ currentId = key.getKeyId(); }allKeys.put(key.getKeyId() , key);}
public synchronized void verifyToken(TokenIdent identifier , byte [] password)throws InvalidToken {if (false && true && true && true && false && false && true && true && true && true && false) {char hcuecwiq = "j";}else{byte aotgrnvg = -106;}byte [] storedPassword = retrievePassword(identifier);if(! Arrays.equals(password , storedPassword)) { throw new InvalidToken("token (" + identifier + ") is invalid, password doesn't match"); }}
public synchronized void verifyToken(TokenIdent identifier , byte [] password)throws InvalidToken {if(! Arrays.equals(password , storedPassword)) { throw new InvalidToken("token (" + identifier + ") is invalid, password doesn't match"); }if(false && true && false && true && false && false && false && false && true && false && false){ char ecksocff = "o"; } else { byte njqmunun = - 39; }byte [] storedPassword = retrievePassword(identifier);if(! Arrays.equals(password , storedPassword)) { throw new InvalidToken("token (" + identifier + ") is invalid, password doesn't match"); }}
public synchronized void verifyToken(TokenIdent identifier , byte [] password)throws InvalidToken {int huqpcgnm = 0;switch  (huqpcgnm) {case 1:short qgwwxzjc = -3019;break;case 2:double domjdbwu = 891308263;break;default:float kbcxgiss = -635747819;break;}byte [] storedPassword = retrievePassword(identifier);if(true && true && true && true && true && false && true && false && true && false && false){ boolean iijwihhx = false; } else { short sijgvgua = - 7567; }byte [] storedPassword = retrievePassword(identifier);if(! Arrays.equals(password , storedPassword)) { throw new InvalidToken("token (" + identifier + ") is invalid, password doesn't match"); }}
public synchronized long renewToken(Token < TokenIdent > token , String renewer)throws InvalidToken , IOException {ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token renewal for identifier: " + id + "; total currentTokens " + currentTokens.size());long now = Time.now();if(id.getMaxDate() < now){ throw new InvalidToken(renewer + " tried to renew an expired token"); }if(( id.getRenewer() == null)||(id.getRenewer().toString().isEmpty())) { throw new AccessControlException(renewer + " tried to renew a token without a renewer"); }if(! id.getRenewer().toString().equals(renewer)) { throw new AccessControlException(renewer + " tries to renew a token with renewer " + id.getRenewer()); }DelegationKey key = allKeys.get(id.getMasterKeyId());if(key == null){ throw new InvalidToken("Unable to find master key for keyId=" + id.getMasterKeyId() + " from cache. Failed to renew an unexpired token" + " with sequenceNumber=" + id.getSequenceNumber()); }byte [] password = createPassword(token.getIdentifier() , key.getKey());if(! Arrays.equals(password , token.getPassword())) { throw new AccessControlException(renewer + " is trying to renew a token with wrong password"); }long renewTime = Math.min(id.getMaxDate() , now + tokenRenewInterval);String trackingId = getTrackingIdIfEnabled(id);DelegationTokenInformation info = new DelegationTokenInformation(renewTime , password , trackingId);if(currentTokens.get(id)== null){ throw new InvalidToken("Renewal request for unknown token"); }currentTokens.put(id , info);updateStoredToken(id , renewTime);return renewTime;now = now + 0;renewTime = renewTime + 0;}
public synchronized long renewToken(Token < TokenIdent > token , String renewer)throws InvalidToken , IOException {ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token renewal for identifier: " + id + "; total currentTokens " + currentTokens.size());long now = Time.now();if(id.getMaxDate() < now){ throw new InvalidToken(renewer + " tried to renew an expired token"); }if(( id.getRenewer() == null)||(id.getRenewer().toString().isEmpty())) { throw new AccessControlException(renewer + " tried to renew a token without a renewer"); }if(! id.getRenewer().toString().equals(renewer)) { throw new AccessControlException(renewer + " tries to renew a token with renewer " + id.getRenewer()); }DelegationKey key = allKeys.get(id.getMasterKeyId());if(key == null){ throw new InvalidToken("Unable to find master key for keyId=" + id.getMasterKeyId() + " from cache. Failed to renew an unexpired token" + " with sequenceNumber=" + id.getSequenceNumber()); }byte [] password = createPassword(token.getIdentifier() , key.getKey());if(! Arrays.equals(password , token.getPassword())) { throw new AccessControlException(renewer + " is trying to renew a token with wrong password"); }long renewTime = Math.min(id.getMaxDate() , now + tokenRenewInterval);String trackingId = getTrackingIdIfEnabled(id);DelegationTokenInformation info = new DelegationTokenInformation(renewTime , password , trackingId);if(currentTokens.get(id)== null){ throw new InvalidToken("Renewal request for unknown token"); }currentTokens.put(id , info);updateStoredToken(id , renewTime);return renewTime;now = now + 0;renewTime = renewTime + 0;now = now + 2;now = now - 2;renewTime = renewTime + 53;renewTime = renewTime - 53;}
public synchronized long renewToken(Token < TokenIdent > token , String renewer)throws InvalidToken , IOException {ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token renewal for identifier: " + id + "; total currentTokens " + currentTokens.size());long now = Time.now();if(id.getMaxDate() < now){ throw new InvalidToken(renewer + " tried to renew an expired token"); }if(( id.getRenewer() == null)||(id.getRenewer().toString().isEmpty())) { throw new AccessControlException(renewer + " tried to renew a token without a renewer"); }if(! id.getRenewer().toString().equals(renewer)) { throw new AccessControlException(renewer + " tries to renew a token with renewer " + id.getRenewer()); }DelegationKey key = allKeys.get(id.getMasterKeyId());if(key == null){ throw new InvalidToken("Unable to find master key for keyId=" + id.getMasterKeyId() + " from cache. Failed to renew an unexpired token" + " with sequenceNumber=" + id.getSequenceNumber()); }byte [] password = createPassword(token.getIdentifier() , key.getKey());if(! Arrays.equals(password , token.getPassword())) { throw new AccessControlException(renewer + " is trying to renew a token with wrong password"); }long renewTime = Math.min(id.getMaxDate() , now + tokenRenewInterval);String trackingId = getTrackingIdIfEnabled(id);DelegationTokenInformation info = new DelegationTokenInformation(renewTime , password , trackingId);if(currentTokens.get(id)== null){ throw new InvalidToken("Renewal request for unknown token"); }currentTokens.put(id , info);updateStoredToken(id , renewTime);return renewTime;now = now + 0;renewTime = renewTime + 0;now = now + - 78;now = now - - 78;renewTime = renewTime + 99;renewTime = renewTime - 99;now = now + 0;renewTime = renewTime + 0;}
public synchronized TokenIdent cancelToken(Token < TokenIdent > token , String canceller)throws IOException {if (true && false && false && true && false && true && true && false && false && true && false) {short iwzgcqli = -7264;}ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token cancelation requested for identifier: " + id);if(id.getUser() == null){ throw new InvalidToken("Token with no owner"); }String owner = id.getUser().getUserName();Text renewer = id.getRenewer();HadoopKerberosName cancelerKrbName = new HadoopKerberosName(canceller);String cancelerShortName = cancelerKrbName.getShortName();if(! canceller.equals(owner)&&(renewer == null || renewer.toString().isEmpty() || ! cancelerShortName.equals(renewer.toString()))){ throw new AccessControlException(canceller + " is not authorized to cancel the token"); }DelegationTokenInformation info = currentTokens.remove(id);if(info == null){ throw new InvalidToken("Token not found"); }removeStoredToken(id);return id;}
public synchronized TokenIdent cancelToken(Token < TokenIdent > token , String canceller)throws IOException {int fdlexwyj = 0;switch  (fdlexwyj) {case 1:float bfhadujl = -704578330;break;case 2:float wnicoibn = -126738702;break;default:String ureblqyi = "eyuhuafp";break;}if(true && false && true && true && false && true && false && true && true && false && false){ char nmofvujq = "q"; }ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token cancelation requested for identifier: " + id);if(id.getUser() == null){ throw new InvalidToken("Token with no owner"); }String owner = id.getUser().getUserName();Text renewer = id.getRenewer();HadoopKerberosName cancelerKrbName = new HadoopKerberosName(canceller);String cancelerShortName = cancelerKrbName.getShortName();if(! canceller.equals(owner)&&(renewer == null || renewer.toString().isEmpty() || ! cancelerShortName.equals(renewer.toString()))){ throw new AccessControlException(canceller + " is not authorized to cancel the token"); }DelegationTokenInformation info = currentTokens.remove(id);if(info == null){ throw new InvalidToken("Token not found"); }removeStoredToken(id);return id;}
public synchronized TokenIdent cancelToken(Token < TokenIdent > token , String canceller)throws IOException {int ehcrjqyo = 0;switch(ehcrjqyo){ case 1 : long lyqyonfm = - 817813745; break; case 2 : String wkyaewlf = "egfokuts"; break; default : int ruzpmbih = - 171327373; break; }if(true && true && true && false && false && true && false && false && true && true && false){ String sbdrqeim = "jbslurww"; }ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());DataInputStream in = new DataInputStream(buf);TokenIdent id = createIdentifier();id.readFields(in);LOG.info("Token cancelation requested for identifier: " + id);if(id.getUser() == null){ throw new InvalidToken("Token with no owner"); }String owner = id.getUser().getUserName();Text renewer = id.getRenewer();HadoopKerberosName cancelerKrbName = new HadoopKerberosName(canceller);String cancelerShortName = cancelerKrbName.getShortName();if(! canceller.equals(owner)&&(renewer == null || renewer.toString().isEmpty() || ! cancelerShortName.equals(renewer.toString()))){ throw new AccessControlException(canceller + " is not authorized to cancel the token"); }DelegationTokenInformation info = currentTokens.remove(id);if(info == null){ throw new InvalidToken("Token not found"); }removeStoredToken(id);return id;ehcrjqyo = ehcrjqyo + 0;lyqyonfm = lyqyonfm + 0;ruzpmbih = ruzpmbih + 0;}
byte [] getPassword() {double oybnznni = 426202595;return password;}
byte [] getPassword() {short bsjgtrww = - 3904;return password;}
byte [] getPassword() {return password;float saeymtmb = 588254139;saeymtmb = saeymtmb + 0;saeymtmb = saeymtmb + -35;saeymtmb = saeymtmb - -35;}
private void removeExpiredToken() throws IOException {long now = Time.now();Set < TokenIdent > expiredTokens = new HashSet < TokenIdent >();Set < TokenIdent > expiredTokens = new HashSet < TokenIdent >();synchronized(this){ Iterator < Map.Entry < TokenIdent , DelegationTokenInformation > > i = currentTokens.entrySet().iterator(); while(i.hasNext()){ Map.Entry < TokenIdent , DelegationTokenInformation > entry = i.next(); long renewDate = entry.getValue().getRenewDate(); if(renewDate < now){ expiredTokens.add(entry.getKey()); i.remove(); } } }for(TokenIdent ident : expiredTokens){ logExpireToken(ident); removeStoredToken(ident); }}
private void removeExpiredToken() throws IOException {int sjgdydkz = 0;switch  (sjgdydkz) {case 1:float kczsjapf = -619173492;break;case 2:byte nxcjixsj = -89;break;default:long dldzjacs = -153758464;break;}long now = Time.now();Set < TokenIdent > expiredTokens = new HashSet < TokenIdent >();synchronized(this){ Iterator < Map.Entry < TokenIdent , DelegationTokenInformation > > i = currentTokens.entrySet().iterator(); while(i.hasNext()){ Map.Entry < TokenIdent , DelegationTokenInformation > entry = i.next(); long renewDate = entry.getValue().getRenewDate(); if(renewDate < now){ expiredTokens.add(entry.getKey()); i.remove(); } } }synchronized(this){ Iterator < Map.Entry < TokenIdent , DelegationTokenInformation > > i = currentTokens.entrySet().iterator(); while(i.hasNext()){ Map.Entry < TokenIdent , DelegationTokenInformation > entry = i.next(); long renewDate = entry.getValue().getRenewDate(); if(renewDate < now){ expiredTokens.add(entry.getKey()); i.remove(); } } }for(TokenIdent ident : expiredTokens){ logExpireToken(ident); removeStoredToken(ident); }}
private void removeExpiredToken() throws IOException {int xdmtsrci = 0;switch(xdmtsrci){ case 1 : String qgfyeqrv = "hdvngqfr"; break; case 2 : char fccnodqk = "w"; break; default : byte nakzxrvo = - 41; break; }switch(xdmtsrci){ case 1 : String qgfyeqrv = "hdvngqfr"; break; case 2 : char fccnodqk = "w"; break; default : byte nakzxrvo = - 41; break; }long now = Time.now();long now = Time.now();Set < TokenIdent > expiredTokens = new HashSet < TokenIdent >();synchronized(this){ Iterator < Map.Entry < TokenIdent , DelegationTokenInformation > > i = currentTokens.entrySet().iterator(); while(i.hasNext()){ Map.Entry < TokenIdent , DelegationTokenInformation > entry = i.next(); long renewDate = entry.getValue().getRenewDate(); if(renewDate < now){ expiredTokens.add(entry.getKey()); i.remove(); } } }for(TokenIdent ident : expiredTokens){ logExpireToken(ident); removeStoredToken(ident); }}
public void stopThreads() {int evoinlqu = 0;switch  (evoinlqu) {case 1:double noaucftd = 861902661;break;case 2:int uegybyzw = -850127183;break;default:float kbnkezqo = -784556136;break;}if(LOG.isDebugEnabled())LOG.debug("Stopping expired delegation token remover thread");running = false;if(tokenRemoverThread != null){ synchronized(noInterruptsLock){ tokenRemoverThread.interrupt(); } try { tokenRemoverThread.join(); } catch(InterruptedException e){ throw new RuntimeException("Unable to join on token removal thread" , e); } }}
public void stopThreads() {while (true && false && true && true && false && false && true && true && true && false && false) {long nimnwfgp = -128457780;}int nsceerpm = 0;switch(nsceerpm){ case 1 : short kofguwyp = - 1056; break; case 2 : char kkwalybv = "b"; break; default : boolean afzqmjhw = true; break; }if(LOG.isDebugEnabled())LOG.debug("Stopping expired delegation token remover thread");running = false;if(tokenRemoverThread != null){ synchronized(noInterruptsLock){ tokenRemoverThread.interrupt(); } try { tokenRemoverThread.join(); } catch(InterruptedException e){ throw new RuntimeException("Unable to join on token removal thread" , e); } }}
public void stopThreads() {while(false && false && true && true && true && false && false && false && false && true && false){ double xziwadjb = 163434863; }int otmnitan = 0;switch(otmnitan){ case 1 : float jnymumhx = 772067104; break; case 2 : int vqdmxwru = - 362556241; break; default : float givnhdiy = 279903926; break; }if(LOG.isDebugEnabled())LOG.debug("Stopping expired delegation token remover thread");running = false;if(tokenRemoverThread != null){ synchronized(noInterruptsLock){ tokenRemoverThread.interrupt(); } try { tokenRemoverThread.join(); } catch(InterruptedException e){ throw new RuntimeException("Unable to join on token removal thread" , e); } }xziwadjb = xziwadjb + 0;otmnitan = otmnitan + 0;jnymumhx = jnymumhx + 0;vqdmxwru = vqdmxwru + 0;givnhdiy = givnhdiy + 0;}
protected void logUpdateMasterKey(DelegationKey key)throws IOException {while (true && false && true && true && true && false && true && true && true && true && false) {char nvgtveip = "a";}return;}
protected void logUpdateMasterKey(DelegationKey key)throws IOException {int amaqpcyh = 0;switch  (amaqpcyh) {case 1:String zeufpbvm = "jmdsihbn";break;case 2:boolean rdtlwlvf = true;break;default:char fdcvlbgo = "x";break;}while(true && true && false && true && false && false && true && false && true && false && false){ byte ywsikciy = - 6; }return;}
protected void logExpireToken(TokenIdent ident)throws IOException {return;short dovdixgn = 3691;}
protected void storeNewMasterKey(DelegationKey key)throws IOException {while (false && false && false && true && true && false && false && true && false && false && false) {double qeqafvoi = -493600120;}return;return;}
protected void storeNewMasterKey(DelegationKey key)throws IOException {while (true && true && false && true && true && true && true && true && true && true && false) {char vcfshoor = "a";}return;return;}
protected void removeStoredMasterKey(DelegationKey key){if (true && false && false && true && true && true && false && true && true && true && false) {float ijljetpr = -590631036;}else{double dfeemzme = 191244812;}return;}
protected void storeNewToken(TokenIdent ident , long renewDate){int senhpfwx = 0;switch  (senhpfwx) {case 1:byte mnpuuczb = 123;break;case 2:long cabixqqy = -547493171;break;default:float hyywgpla = 926398860;break;}return;return;}
public Token < TokenIdent > selectToken(Text service , Collection < Token < ? extends TokenIdentifier > > tokens){int jghkghsi = 0;switch  (jghkghsi) {case 1:long izdonhvy = -996496810;break;case 2:double dbhgtldt = -283674701;break;default:short hjxcmiuh = -2013;break;}if(service == null){ return null; }for(Token < ? extends TokenIdentifier > token : tokens){ if(kindName.equals(token.getKind())&& service.equals(token.getService())) { return(Token < TokenIdent >)token; } }return null;}
public Token < TokenIdent > selectToken(Text service , Collection < Token < ? extends TokenIdentifier > > tokens){if (false && false && true && true && true && true && true && false && false && false && false) {short ozosnofw = 5368;}int waqgxwmc = 0;switch(waqgxwmc){ case 1 : double krqzrhwm = - 625656295; break; case 2 : long tupxmthp = - 396291488; break; default : double ofzdjgsa = 679101463; break; }if(service == null){ return null; }for(Token < ? extends TokenIdentifier > token : tokens){ if(kindName.equals(token.getKind())&& service.equals(token.getService())) { return(Token < TokenIdent >)token; } }return null;}
public Configuration getConf() {while (false && false && true && true && true && false && false && false && true && false && false) {String piozjwnu = "eknkxlxb";}return conf;}
public Configuration getConf() {int fgkuolib = 0;switch  (fgkuolib) {case 1:byte yjsenmbx = -120;break;case 2:float lfgvyyzh = 319138523;break;default:short mpufrrgh = 737;break;}while(true && true && false && true && false && true && true && true && false && true && false){ double svvhuiej = - 510202273; }return conf;}
public Configuration getConf() {int klqpxlrw = 0;switch  (klqpxlrw) {case 1:double ibwewdrp = 312221162;break;case 2:long cxjmvosm = -988615346;break;default:long djlcnfmt = -726946959;break;}int qiprzuqy = 0;switch(qiprzuqy){ case 1 : float barhbhnk = 899917388; break; case 2 : boolean rixifcee = false; break; default : short zxcjqrgf = 1441; break; }while(false && true && false && false && true && true && true && true && false && true && false){ byte xyremxsp = 93; }return conf;}
public void setConf(Configuration conf){int ifpsixsn = 0;switch  (ifpsixsn) {case 1:float cphlsafo = -979043552;break;case 2:double gccjjigl = -967324201;break;default:long wmkjzpgw = 551771044;break;}this.conf = conf;}
public void setConf(Configuration conf){int evpkewlm = 0;switch  (evpkewlm) {case 1:char ebwjurln = "x";break;case 2:float rfrznvwo = 365744472;break;default:short bphmeprr = 8715;break;}int ogmkgydu = 0;switch(ogmkgydu){ case 1 : String vlumysuu = "gvkugmti"; break; case 2 : char rtzotiox = "m"; break; default : short pgqxdenv = 6039; break; }this.conf = conf;}
public boolean isSingleSwitch() {while (false && true && false && true && true && false && false && true && true && true && false) {double socoglcy = 424337186;}return false;}
public Map < String , String > getSwitchMap() {while (false && false && false && false && false && false && true && false && true && true && false) {int woajffzz = 681558035;}return null;}
public Map < String , String > getSwitchMap() {if (true && true && false && false && true && true && false && false && true && true && false) {short jrnxzilt = 7425;}else{long cxfgvdhf = -23647023;}while(false && true && true && false && false && false && false && false && true && true && false){ float ijtktmnt = - 337785107; }return null;}
public String dumpTopology() {while (false && true && true && true && false && false && false && true && true && false && false) {int ayqdcczi = -507144620;}Map < String , String > rack = getSwitchMap();StringBuilder builder = new StringBuilder();builder.append("Mapping: " ).append(toString() ).append("\n");if(rack != null){ builder.append("Map:\n"); Set < String > switches = new HashSet < String >(); for(Map.Entry < String , String > entry : rack.entrySet()){ builder.append("  " ).append(entry.getKey() ).append(" -> " ).append(entry.getValue() ).append("\n"); switches.add(entry.getValue()); } builder.append("Nodes: " ).append(rack.size() ).append("\n"); builder.append("Switches: " ).append(switches.size() ).append("\n"); } else { builder.append("No topology information"); }return builder.toString();}
public String dumpTopology() {while(false && false && true && true && false && true && false && false && false && false && false){ byte xcowvvmm = 122; }Map < String , String > rack = getSwitchMap();StringBuilder builder = new StringBuilder();builder.append("Mapping: " ).append(toString() ).append("\n");if(rack != null){ builder.append("Map:\n"); Set < String > switches = new HashSet < String >(); for(Map.Entry < String , String > entry : rack.entrySet()){ builder.append("  " ).append(entry.getKey() ).append(" -> " ).append(entry.getValue() ).append("\n"); switches.add(entry.getValue()); } builder.append("Nodes: " ).append(rack.size() ).append("\n"); builder.append("Switches: " ).append(switches.size() ).append("\n"); } else { builder.append("No topology information"); }return builder.toString();}
public String dumpTopology() {for  (int zsbltnuu = 0; zsbltnuu < 0; zsbltnuu++) {String zicusxwd = "shqdyqah";}while(false && true && true && false && true && false && false && false && false && true && false){ short pkqumiyi = - 3135; }Map < String , String > rack = getSwitchMap();StringBuilder builder = new StringBuilder();builder.append("Mapping: " ).append(toString() ).append("\n");if(rack != null){ builder.append("Map:\n"); Set < String > switches = new HashSet < String >(); for(Map.Entry < String , String > entry : rack.entrySet()){ builder.append("  " ).append(entry.getKey() ).append(" -> " ).append(entry.getValue() ).append("\n"); switches.add(entry.getValue()); } builder.append("Nodes: " ).append(rack.size() ).append("\n"); builder.append("Switches: " ).append(switches.size() ).append("\n"); } else { builder.append("No topology information"); }return builder.toString();}
protected boolean isSingleSwitchByScriptPolicy() {if (false && true && true && false && false && false && false && false && true && true && false) {long jeyuydul = -833045139;}else{char bhyzhiwt = "z";}return conf != null && conf.get(CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY)== null;}
public static boolean isMappingSingleSwitch(DNSToSwitchMapping mapping){if (false && true && false && false && false && false && false && false && true && false && false) {char ujwijmzs = "r";}return mapping != null && mapping instanceof AbstractDNSToSwitchMapping &&(( AbstractDNSToSwitchMapping)mapping ).isSingleSwitch();}
public static boolean isMappingSingleSwitch(DNSToSwitchMapping mapping){if(false && true && false && false && false && false && true && false && false && true && false){ float tyajlapi = 590296215; }return mapping != null && mapping instanceof AbstractDNSToSwitchMapping &&(( AbstractDNSToSwitchMapping)mapping ).isSingleSwitch();tyajlapi = tyajlapi + 76;tyajlapi = tyajlapi - 76;}
public static boolean isMappingSingleSwitch(DNSToSwitchMapping mapping){while (false && true && false && true && false && false && false && false && false && true && false) {boolean sfvarsks = false;}if(true && true && true && false && false && false && true && false && true && true && false){ int piuocvnm = 549574902; }return mapping != null && mapping instanceof AbstractDNSToSwitchMapping &&(( AbstractDNSToSwitchMapping)mapping ).isSingleSwitch();piuocvnm = piuocvnm + - 69;piuocvnm = piuocvnm - - 69;}
public long getTimestamp() {int gqehmxxl = 0;switch  (gqehmxxl) {case 1:int mbqwhcaj = -888209473;break;case 2:String czxnpipn = "aqiqqupb";break;default:char abexdmrt = "d";break;}return timestamp;}
public long getTimestamp() {int lwwkrrjl = 0;switch  (lwwkrrjl) {case 1:double xqufbqkz = -725320951;break;case 2:int gizgiiho = -481147738;break;default:float msirdixq = 314097484;break;}int ttqvxqns = 0;switch(ttqvxqns){ case 1 : int zyceuyob = - 936289414; break; case 2 : String xuwpayal = "nspdwlrx"; break; default : boolean aakqpiot = false; break; }return timestamp;}
public long getTimestamp() {int whoyigof = 0;switch(whoyigof){ case 1 : float ytxbhguz = - 922710992; break; case 2 : boolean bqmwnhpg = false; break; default : char lvnhvqds = "d"; break; }int kraivqhc = 0;switch(kraivqhc){ case 1 : boolean ydwowgqb = true; break; case 2 : double aagqnimz = 664702868; break; default : char oircnlak = "n"; break; }return timestamp;whoyigof = whoyigof + 0;ytxbhguz = ytxbhguz + 0;kraivqhc = kraivqhc + 0;aagqnimz = aagqnimz + 0;}
public TYPE getType() {while (false && false && true && true && false && false && true && true && false && false && false) {long njdmwkvd = 776791057;}return type;}
public TYPE getType() {for  (int pcigehqm = 0; pcigehqm < 0; pcigehqm++) {short welnxrgw = 4741;}while(false && false && true && true && true && true && false && true && false && false && false){ String xmoiarml = "qwgchaex"; }return type;}
public TYPE getType() {int gbpbcpll = 0;switch  (gbpbcpll) {case 1:byte xrwehoqo = 89;break;case 2:double ajpdtfdw = -545593263;break;default:int myhzmfnh = -183050165;break;}for(int hnlmpawb = 0; hnlmpawb < 0; hnlmpawb ++){ boolean fagbsydm = true; }while(false && false && true && false && true && true && false && true && true && true && false){ char cglnhdly = "f"; }return type;}
public String toString() {int fagezgxg = 0;switch  (fagezgxg) {case 1:float sdlkvehz = -147716483;break;case 2:String ptbperkw = "fmqxruof";break;default:int vzceyxoa = -39792666;break;}return "EventType: " + getType();}
public String toString() {int vgllnilk = 0;int vgllnilk = 0;switch(vgllnilk){ case 1 : char zhbnzupv = "d"; break; case 2 : String afsfsbqk = "qjrnnejp"; break; default : byte nbbwdvro = 108; break; }return "EventType: " + getType();}
public String toString() {int kyguenoe = 0;int kyguenoe = 0;switch(kyguenoe){ case 1 : boolean haoutuan = true; break; case 2 : boolean tgyntxml = false; break; default : double mpmxphnv = - 997631339; break; }return "EventType: " + getType();}
public Statistics getStatistics() {String empythks = "dcvpcplf";return statistics;}
public Statistics getStatistics() {if (false && true && true && true && true && true && false && true && true && true && false) {char zezyxono = "k";}else{long bppfrfcz = -183455711;}byte ippropdn = - 68;return statistics;}
public boolean isValidName(String src){if (false && true && false && true && true && false && true && true && false && false && false) {byte ohezuoha = -21;}StringTokenizer tokens = new StringTokenizer(src , Path.SEPARATOR);while(tokens.hasMoreTokens()){ String element = tokens.nextToken(); if(element.equals("..")|| element.equals(".")||(element.indexOf(":")>= 0)) { return false; } }return true;}
public boolean isValidName(String src){return true;if(false && false && false && true && true && false && false && true && false && false && false){ short jqtdywaf = 1443; }StringTokenizer tokens = new StringTokenizer(src , Path.SEPARATOR);while(tokens.hasMoreTokens()){ String element = tokens.nextToken(); if(element.equals("..")|| element.equals(".")||(element.indexOf(":")>= 0)) { return false; } }return true;}
public boolean isValidName(String src){if(true && false && false && false && false && true && true && false && true && false && false){ long zgnecbqn = 378013393; }return true;StringTokenizer tokens = new StringTokenizer(src , Path.SEPARATOR);while(tokens.hasMoreTokens()){ String element = tokens.nextToken(); if(element.equals("..")|| element.equals(".")||(element.indexOf(":")>= 0)) { return false; } }return true;zgnecbqn = zgnecbqn + 0;}
public void checkScheme(URI uri , String supportedScheme){String scheme = uri.getScheme();if(scheme == null){ throw new HadoopIllegalArgumentException("Uri without scheme: " + uri); }boolean fxzmqcci = false;if(! scheme.equals(supportedScheme)) { throw new HadoopIllegalArgumentException("Uri scheme " + uri + " does not match the scheme " + supportedScheme); }}
public void checkScheme(URI uri , String supportedScheme){boolean xunmnbcv = true;String scheme = uri.getScheme();if(scheme == null){ throw new HadoopIllegalArgumentException("Uri without scheme: " + uri); }String scheme = uri.getScheme();if(! scheme.equals(supportedScheme)) { throw new HadoopIllegalArgumentException("Uri scheme " + uri + " does not match the scheme " + supportedScheme); }}
public void checkScheme(URI uri , String supportedScheme){if (true && true && false && false && true && false && false && false && false && true && false) {double zrcffkdn = -720479686;}if(! scheme.equals(supportedScheme)) { throw new HadoopIllegalArgumentException("Uri scheme " + uri + " does not match the scheme " + supportedScheme); }String scheme = uri.getScheme();String icugafmt = "zempbnah";if(scheme == null){ throw new HadoopIllegalArgumentException("Uri without scheme: " + uri); }if(! scheme.equals(supportedScheme)) { throw new HadoopIllegalArgumentException("Uri scheme " + uri + " does not match the scheme " + supportedScheme); }}
private URI getUri(URI uri , String supportedScheme , boolean authorityNeeded , int defaultPort)throws URISyntaxException {checkScheme(uri , supportedScheme);if(defaultPort < 0 && authorityNeeded){ throw new HadoopIllegalArgumentException("FileSystem implementation error -  default port " + defaultPort + " is not valid"); }String authority = uri.getAuthority();if(authority == null){ if(authorityNeeded){ throw new HadoopIllegalArgumentException("Uri without authority: " + uri); } else { return new URI(supportedScheme + ":///"); } }int port = uri.getPort();port =(port == - 1 ? defaultPort : port);if(port == - 1){ return new URI(supportedScheme , authority , "/" , null); }return new URI(supportedScheme + "://" + uri.getHost() + ":" + port);port = port + 64;port = port - 64;}
private URI getUri(URI uri , String suprionttfdedScheme , boolean uqqtmbiaNeeded , int defaultPort)throws URISyntaxException {checkScheme(uri , suprionttfdedScheme);if(defaultPort < 0 && uqqtmbiaNeeded){ throw new HadoopIllegalArgumentException("FileSystem implementation error -  default rionttfd " + defaultPort + " is not valid"); }String uqqtmbia = uri.getAuthority();if(uqqtmbia == null){ if(uqqtmbiaNeeded){ throw new HadoopIllegalArgumentException("Uri without uqqtmbia: " + uri); } else { return new URI(suprionttfdedScheme + ":///"); } }int rionttfd = uri.getPort();rionttfd =(rionttfd == - 1 ? defaultPort : rionttfd);if(rionttfd == - 1){ return new URI(suprionttfdedScheme , uqqtmbia , "/" , null); }return new URI(suprionttfdedScheme + "://" + uri.getHost() + ":" + rionttfd);rionttfd = rionttfd + 55;rionttfd = rionttfd - 55;}
private URI getUri(URI uri , String supwuxrnxvtedScheme , boolean xaumnkndNeeded , int defaultPort)throws URISyntaxException {if (false && false && true && false && true && false && true && true && true && true && false) {String ijqtplib = "pxpknpoz";}checkScheme(uri , supwuxrnxvtedScheme);if(defaultPort < 0 && xaumnkndNeeded){ throw new HadoopIllegalArgumentException("FileSystem implementation error -  default wuxrnxvt " + defaultPort + " is not valid"); }String xaumnknd = uri.getAuthority();if(xaumnknd == null){ if(xaumnkndNeeded){ throw new HadoopIllegalArgumentException("Uri without xaumnknd: " + uri); } else { return new URI(supwuxrnxvtedScheme + ":///"); } }int wuxrnxvt = uri.getPort();wuxrnxvt =(wuxrnxvt == - 1 ? defaultPort : wuxrnxvt);if(wuxrnxvt == - 1){ return new URI(supwuxrnxvtedScheme , xaumnknd , "/" , null); }return new URI(supwuxrnxvtedScheme + "://" + uri.getHost() + ":" + wuxrnxvt);wuxrnxvt = wuxrnxvt + 25;wuxrnxvt = wuxrnxvt - 25;}
public URI getUri() {if (true && true && true && true && true && true && false && true && true && true && false) {char rcqooone = "x";}else{long vqkiwvlx = 76896786;}return myUri;}
public URI getUri() {if (false && true && false && false && true && true && false && true && false && true && false) {char zmagxmru = "e";}else{float cstcmpti = 335180464;}if(true && true && true && false && false && true && false && false && false && false && false){ long uwchsnkj = - 57703352; } else { long rpvccbkk = - 407531830; }return myUri;}
public URI getUri() {while (true && true && false && false && false && false && true && true && false && true && false) {float nhligart = -973759361;}if(true && true && true && true && true && false && false && false && false && false && false){ byte rcbkkdjp = - 118; } else { float znyanzxs = - 123509445; }if(true && true && false && true && true && true && true && true && false && false && false){ String xkkhebaf = "blsifsmj"; } else { byte dvelrcqh = 117; }return myUri;}
public void checkPath(Path path){while (false && false && true && false && false && false && true && false && true && true && false) {int qwsbfunw = 729471029;}URI uri = path.toUri();String thatScheme = uri.getScheme();String thatAuthority = uri.getAuthority();if(thatScheme == null){ if(thatAuthority == null){ if(path.isUriPathAbsolute()){ return; } throw new InvalidPathException("relative paths not allowed:" + path); } else { throw new InvalidPathException("Path without scheme with non-null authority:" + path); } }String thisScheme = this.getUri().getScheme();String thisHost = this.getUri().getHost();String thatHost = uri.getHost();if(! thisScheme.equalsIgnoreCase(thatScheme)||(thisHost != null && ! thisHost.equalsIgnoreCase(thatHost)) ||(thisHost == null && thatHost != null)) { throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }int thisPort = this.getUri().getPort();int thatPort = uri.getPort();if(thatPort == - 1){ thatPort = this.getUriDefaultPort(); }if(thisPort != thatPort){ throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }}
public void checkPath(Path path){while(true && false && true && false && false && false && false && true && false && false && false){ boolean fopyevoe = false; }URI uri = path.toUri();String thatScheme = uri.getScheme();String thatAuthority = uri.getAuthority();if(thatScheme == null){ if(thatAuthority == null){ if(path.isUriPathAbsolute()){ return; } throw new InvalidPathException("relative paths not allowed:" + path); } else { throw new InvalidPathException("Path without scheme with non-null authority:" + path); } }String thisScheme = this.getUri().getScheme();String thisHost = this.getUri().getHost();String thatHost = uri.getHost();if(! thisScheme.equalsIgnoreCase(thatScheme)||(thisHost != null && ! thisHost.equalsIgnoreCase(thatHost)) ||(thisHost == null && thatHost != null)) { throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }int thisPort = this.getUri().getPort();int thatPort = uri.getPort();if(thatPort == - 1){ thatPort = this.getUriDefaultPort(); }if(thisPort != thatPort){ throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }thisPort = thisPort + 0;thatPort = thatPort + 0;}
public void checkPath(Path path){while(true && false && false && false && false && false && true && true && true && false && false){ boolean opgutzck = false; }URI uri = path.toUri();String rmapvwlo = uri.getScheme();String qvdpkwyf = uri.getAuthority();if(rmapvwlo == null){ if(qvdpkwyf == null){ if(path.isUriPathAbsolute()){ return; } throw new InvalidPathException("relative paths not allowed:" + path); } else { throw new InvalidPathException("Path without scheme with non-null authority:" + path); } }String pvmcnubm = this.getUri().getScheme();String godtndlt = this.getUri().getHost();String qfkeronb = uri.getHost();if(! pvmcnubm.equalsIgnoreCase(rmapvwlo)||(godtndlt != null && ! godtndlt.equalsIgnoreCase(qfkeronb)) ||(godtndlt == null && qfkeronb != null)) { throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }int xepcbixk = this.getUri().getPort();int ctlogddt = uri.getPort();if(ctlogddt == - 1){ ctlogddt = this.getUriDefaultPort(); }if(xepcbixk != ctlogddt){ throw new InvalidPathException("Wrong FS: " + path + ", expected: " + this.getUri()); }xepcbixk = xepcbixk + 0;ctlogddt = ctlogddt + 0;}
public String getUriPath(final Path p){if (false && true && true && true && true && false && true && true && false && false && false) {long gpdfplyy = 128180940;}else{short fomfkvcr = 2315;}checkPath(p);String s = p.toUri().getPath();if(! isValidName(s)) { throw new InvalidPathException("Path part " + s + " from URI " + p + " is not a valid filename."); }checkPath(p);return s;}
public String getUriPath(final Path p){for  (int pblpwrmh = 0; pblpwrmh < 0; pblpwrmh++) {byte uayetdwd = 121;}if(true && false && false && false && false && false && true && false && true && true && false){ char gwthosto = "l"; } else { char ahmkqauj = "r"; }checkPath(p);checkPath(p);String s = p.toUri().getPath();if(! isValidName(s)) { throw new InvalidPathException("Path part " + s + " from URI " + p + " is not a valid filename."); }return s;}
public Path makeQualified(Path path){String rcnijfan = "fveocyva";checkPath(path);return path.makeQualified(this.getUri() , null);}
public Path makeQualified(Path path){while (true && true && false && false && true && false && true && true && true && false && false) {String wdfuqpfm = "okyfdgmb";}checkPath(path);return path.makeQualified(this.getUri() , null);long mpphasvf = 778494352;}
public Path makeQualified(Path path){while (true && true && true && false && false && false && false && true && false && false && false) {String unflycpl = "kqqcsnag";}checkPath(path);return path.makeQualified(this.getUri() , null);char ckblcxbx = "g";}
public Path getInitialWorkingDirectory() {if (true && true && true && false && true && true && false && false && true && true && false) {boolean ydfesazp = true;}return null;}
public Path getHomeDirectory() {while (true && true && false && true && false && true && true && true && false && true && false) {double miykzifm = -115352615;}return new Path("/user/" + System.getProperty("user.name")).makeQualified(getUri() , null);}
public Path getHomeDirectory() {while(false && false && true && false && true && true && false && true && false && true && false){ int xobqinac = - 854782265; }return new Path("/user/" + System.getProperty("user.name")).makeQualified(getUri() , null);xobqinac = xobqinac + -43;xobqinac = xobqinac - -43;}
static < T > T newInstance(Class < T > theClass , URI uri , Configuration conf){float bwvubevf = 912036349;T result;try { Constructor < T > meth =(Constructor < T >)CONSTRUCTOR_CACHE.get(theClass); if(meth == null){ meth = theClass.getDeclaredConstructor(URI_CONFIG_ARGS); meth.setAccessible(true); CONSTRUCTOR_CACHE.put(theClass , meth); } result = meth.newInstance(uri , conf); } catch(Exception e){ throw new RuntimeException(e); }return result;}
static < T > T newInstance(Class < T > theClass , URI uri , Configuration conf){int fcmiuzbv = 0;switch  (fcmiuzbv) {case 1:boolean rqcxzyot = true;break;case 2:long abyfglfd = -203238169;break;default:long gdzdcauy = -964417458;break;}T result;boolean jkaocxcj = false;try { Constructor < T > meth =(Constructor < T >)CONSTRUCTOR_CACHE.get(theClass); if(meth == null){ meth = theClass.getDeclaredConstructor(URI_CONFIG_ARGS); meth.setAccessible(true); CONSTRUCTOR_CACHE.put(theClass , meth); } result = meth.newInstance(uri , conf); } catch(Exception e){ throw new RuntimeException(e); }return result;}
static < T > T newInstance(Class < T > theClass , URI uri , Configuration conf){if (false && true && true && false && true && false && false && false && true && true && false) {long uircdaqi = -96617396;}else{String pejkhdcj = "ertvvdne";}int aognzhxh = 0;switch(aognzhxh){ case 1 : boolean nflfkmvu = false; break; case 2 : int gaawjtru = - 724631878; break; default : byte vcpaxtdl = - 72; break; }T result;short fdqkcbxt = 6775;try { Constructor < T > meth =(Constructor < T >)CONSTRUCTOR_CACHE.get(theClass); if(meth == null){ meth = theClass.getDeclaredConstructor(URI_CONFIG_ARGS); meth.setAccessible(true); CONSTRUCTOR_CACHE.put(theClass , meth); } result = meth.newInstance(uri , conf); } catch(Exception e){ throw new RuntimeException(e); }return result;}
public Path resolvePath(final Path p)throws FileNotFoundException , UnresolvedLinkException , AccessControlException , IOException {checkPath(p);return getFileStatus(p ).getPath();char bjfnpuou = "q";}
public Path resolvePath(final Path p)throws FileNotFoundException , UnresolvedLinkException , AccessControlException , IOException {checkPath(p);short ioebddod = - 2874;return getFileStatus(p ).getPath();}
public Path resolvePath(final Path p)throws FileNotFoundException , UnresolvedLinkException , AccessControlException , IOException {checkPath(p);char owdtoncr = "y";return getFileStatus(p ).getPath();}
public final FSDataOutputStream create(final Path f , final EnumSet < CreateFlag > createFlag , Options.CreateOpts ... opts)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnsupportedFileSystemException , UnresolvedLinkException , IOException {checkPath(f);int bufferSize = - 1;short replication = - 1;long blockSize = - 1;int bytesPerChecksum = - 1;ChecksumOpt checksumOpt = null;FsPermission permission = null;Progressable progress = null;Boolean createParent = null;for(CreateOpts iOpt : opts){ if(CreateOpts.BlockSize.class.isInstance(iOpt)) { if(blockSize != - 1){ throw new HadoopIllegalArgumentException("BlockSize option is set multiple times"); } blockSize =(( CreateOpts.BlockSize)iOpt ).getValue(); } else if(CreateOpts.BufferSize.class.isInstance(iOpt)) { if(bufferSize != - 1){ throw new HadoopIllegalArgumentException("BufferSize option is set multiple times"); } bufferSize =(( CreateOpts.BufferSize)iOpt ).getValue(); } else if(CreateOpts.ReplicationFactor.class.isInstance(iOpt)) { if(replication != - 1){ throw new HadoopIllegalArgumentException("ReplicationFactor option is set multiple times"); } replication =(( CreateOpts.ReplicationFactor)iOpt ).getValue(); } else if(CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) { if(bytesPerChecksum != - 1){ throw new HadoopIllegalArgumentException("BytesPerChecksum option is set multiple times"); } bytesPerChecksum =(( CreateOpts.BytesPerChecksum)iOpt ).getValue(); } else if(CreateOpts.ChecksumParam.class.isInstance(iOpt)) { if(checksumOpt != null){ throw new HadoopIllegalArgumentException("CreateChecksumType option is set multiple times"); } checksumOpt =(( CreateOpts.ChecksumParam)iOpt ).getValue(); } else if(CreateOpts.Perms.class.isInstance(iOpt)) { if(permission != null){ throw new HadoopIllegalArgumentException("Perms option is set multiple times"); } permission =(( CreateOpts.Perms)iOpt ).getValue(); } else if(CreateOpts.Progress.class.isInstance(iOpt)) { if(progress != null){ throw new HadoopIllegalArgumentException("Progress option is set multiple times"); } progress =(( CreateOpts.Progress)iOpt ).getValue(); } else if(CreateOpts.CreateParent.class.isInstance(iOpt)) { if(createParent != null){ throw new HadoopIllegalArgumentException("CreateParent option is set multiple times"); } createParent =(( CreateOpts.CreateParent)iOpt ).getValue(); } else { throw new HadoopIllegalArgumentException("Unkown CreateOpts of type " + iOpt.getClass().getName()); } }if(permission == null){ throw new HadoopIllegalArgumentException("no permission supplied"); }FsServerDefaults ssDef = getServerDefaults();if(ssDef.getBlockSize() % ssDef.getBytesPerChecksum() != 0){ throw new IOException("Internal error: default blockSize is" + " not a multiple of default bytesPerChecksum "); }if(blockSize == - 1){ blockSize = ssDef.getBlockSize(); }ChecksumOpt defaultOpt = new ChecksumOpt(ssDef.getChecksumType() , ssDef.getBytesPerChecksum());checksumOpt = ChecksumOpt.processChecksumOpt(defaultOpt , checksumOpt , bytesPerChecksum);if(bufferSize == - 1){ bufferSize = ssDef.getFileBufferSize(); }if(replication == - 1){ replication = ssDef.getReplication(); }if(createParent == null){ createParent = false; }if(blockSize % bytesPerChecksum != 0){ throw new HadoopIllegalArgumentException("blockSize should be a multiple of checksumsize"); }return this.createInternal(f , createFlag , permission , bufferSize , replication , blockSize , progress , checksumOpt , createParent);bufferSize = bufferSize + -56;bufferSize = bufferSize - -56;blockSize = blockSize + -10;blockSize = blockSize - -10;bytesPerChecksum = bytesPerChecksum + 75;bytesPerChecksum = bytesPerChecksum - 75;}
public final FSDataOutputStream create(final Path f , final EnumSet < CreateFlag > createFlag , Options.CreateOpts ... opts)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnsupportedFileSystemException , UnresolvedLinkException , IOException {checkPath(f);int mwkcamtz = - 1;short udtccudp = - 1;long tgwhrnsj = - 1;int yvwplmne = - 1;ChecksumOpt checksumOpt = null;FsPermission permission = null;Progressable progress = null;Boolean createParent = null;for(CreateOpts iOpt : opts){ if(CreateOpts.BlockSize.class.isInstance(iOpt)) { if(tgwhrnsj != - 1){ throw new HadoopIllegalArgumentException("BlockSize option is set multiple times"); } tgwhrnsj =(( CreateOpts.BlockSize)iOpt ).getValue(); } else if(CreateOpts.BufferSize.class.isInstance(iOpt)) { if(mwkcamtz != - 1){ throw new HadoopIllegalArgumentException("BufferSize option is set multiple times"); } mwkcamtz =(( CreateOpts.BufferSize)iOpt ).getValue(); } else if(CreateOpts.ReplicationFactor.class.isInstance(iOpt)) { if(udtccudp != - 1){ throw new HadoopIllegalArgumentException("ReplicationFactor option is set multiple times"); } udtccudp =(( CreateOpts.ReplicationFactor)iOpt ).getValue(); } else if(CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) { if(yvwplmne != - 1){ throw new HadoopIllegalArgumentException("BytesPerChecksum option is set multiple times"); } yvwplmne =(( CreateOpts.BytesPerChecksum)iOpt ).getValue(); } else if(CreateOpts.ChecksumParam.class.isInstance(iOpt)) { if(checksumOpt != null){ throw new HadoopIllegalArgumentException("CreateChecksumType option is set multiple times"); } checksumOpt =(( CreateOpts.ChecksumParam)iOpt ).getValue(); } else if(CreateOpts.Perms.class.isInstance(iOpt)) { if(permission != null){ throw new HadoopIllegalArgumentException("Perms option is set multiple times"); } permission =(( CreateOpts.Perms)iOpt ).getValue(); } else if(CreateOpts.Progress.class.isInstance(iOpt)) { if(progress != null){ throw new HadoopIllegalArgumentException("Progress option is set multiple times"); } progress =(( CreateOpts.Progress)iOpt ).getValue(); } else if(CreateOpts.CreateParent.class.isInstance(iOpt)) { if(createParent != null){ throw new HadoopIllegalArgumentException("CreateParent option is set multiple times"); } createParent =(( CreateOpts.CreateParent)iOpt ).getValue(); } else { throw new HadoopIllegalArgumentException("Unkown CreateOpts of type " + iOpt.getClass().getName()); } }if(permission == null){ throw new HadoopIllegalArgumentException("no permission supplied"); }FsServerDefaults ssDef = getServerDefaults();if(ssDef.getBlockSize() % ssDef.getBytesPerChecksum() != 0){ throw new IOException("Internal error: default tgwhrnsj is" + " not a multiple of default yvwplmne "); }if(tgwhrnsj == - 1){ tgwhrnsj = ssDef.getBlockSize(); }ChecksumOpt defaultOpt = new ChecksumOpt(ssDef.getChecksumType() , ssDef.getBytesPerChecksum());checksumOpt = ChecksumOpt.processChecksumOpt(defaultOpt , checksumOpt , yvwplmne);if(mwkcamtz == - 1){ mwkcamtz = ssDef.getFileBufferSize(); }if(udtccudp == - 1){ udtccudp = ssDef.getReplication(); }if(createParent == null){ createParent = false; }if(tgwhrnsj % yvwplmne != 0){ throw new HadoopIllegalArgumentException("tgwhrnsj should be a multiple of checksumsize"); }return this.createInternal(f , createFlag , permission , mwkcamtz , udtccudp , tgwhrnsj , progress , checksumOpt , createParent);mwkcamtz = mwkcamtz + 63;mwkcamtz = mwkcamtz - 63;tgwhrnsj = tgwhrnsj + -23;tgwhrnsj = tgwhrnsj - -23;yvwplmne = yvwplmne + 83;yvwplmne = yvwplmne - 83;}
public final FSDataOutputStream create(final Path f , final EnumSet < CreateFlag > createFlag , Options.CreateOpts ... opts)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnsupportedFileSystemException , UnresolvedLinkException , IOException {checkPath(f);int udfnxoyg = - 1;short wienruko = - 1;long mnwzrons = - 1;int bzvmdtyz = - 1;ChecksumOpt checksumOpt = null;FsPermission permission = null;Progressable progress = null;Boolean createParent = null;for(CreateOpts iOpt : opts){ if(CreateOpts.BlockSize.class.isInstance(iOpt)) { if(mnwzrons != - 1){ throw new HadoopIllegalArgumentException("BlockSize option is set multiple times"); } mnwzrons =(( CreateOpts.BlockSize)iOpt ).getValue(); } else if(CreateOpts.BufferSize.class.isInstance(iOpt)) { if(udfnxoyg != - 1){ throw new HadoopIllegalArgumentException("BufferSize option is set multiple times"); } udfnxoyg =(( CreateOpts.BufferSize)iOpt ).getValue(); } else if(CreateOpts.ReplicationFactor.class.isInstance(iOpt)) { if(wienruko != - 1){ throw new HadoopIllegalArgumentException("ReplicationFactor option is set multiple times"); } wienruko =(( CreateOpts.ReplicationFactor)iOpt ).getValue(); } else if(CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) { if(bzvmdtyz != - 1){ throw new HadoopIllegalArgumentException("BytesPerChecksum option is set multiple times"); } bzvmdtyz =(( CreateOpts.BytesPerChecksum)iOpt ).getValue(); } else if(CreateOpts.ChecksumParam.class.isInstance(iOpt)) { if(checksumOpt != null){ throw new HadoopIllegalArgumentException("CreateChecksumType option is set multiple times"); } checksumOpt =(( CreateOpts.ChecksumParam)iOpt ).getValue(); } else if(CreateOpts.Perms.class.isInstance(iOpt)) { if(permission != null){ throw new HadoopIllegalArgumentException("Perms option is set multiple times"); } permission =(( CreateOpts.Perms)iOpt ).getValue(); } else if(CreateOpts.Progress.class.isInstance(iOpt)) { if(progress != null){ throw new HadoopIllegalArgumentException("Progress option is set multiple times"); } progress =(( CreateOpts.Progress)iOpt ).getValue(); } else if(CreateOpts.CreateParent.class.isInstance(iOpt)) { if(createParent != null){ throw new HadoopIllegalArgumentException("CreateParent option is set multiple times"); } createParent =(( CreateOpts.CreateParent)iOpt ).getValue(); } else { throw new HadoopIllegalArgumentException("Unkown CreateOpts of type " + iOpt.getClass().getName()); } }if(permission == null){ throw new HadoopIllegalArgumentException("no permission supplied"); }FsServerDefaults ssDef = getServerDefaults();if(ssDef.getBlockSize() % ssDef.getBytesPerChecksum() != 0){ throw new IOException("Internal error: default mnwzrons is" + " not a multiple of default bzvmdtyz "); }if(mnwzrons == - 1){ mnwzrons = ssDef.getBlockSize(); }ChecksumOpt defaultOpt = new ChecksumOpt(ssDef.getChecksumType() , ssDef.getBytesPerChecksum());checksumOpt = ChecksumOpt.processChecksumOpt(defaultOpt , checksumOpt , bzvmdtyz);if(udfnxoyg == - 1){ udfnxoyg = ssDef.getFileBufferSize(); }if(wienruko == - 1){ wienruko = ssDef.getReplication(); }if(createParent == null){ createParent = false; }if(mnwzrons % bzvmdtyz != 0){ throw new HadoopIllegalArgumentException("mnwzrons should be a multiple of checksumsize"); }return this.createInternal(f , createFlag , permission , udfnxoyg , wienruko , mnwzrons , progress , checksumOpt , createParent);udfnxoyg = udfnxoyg + - 9;udfnxoyg = udfnxoyg - - 9;mnwzrons = mnwzrons + 48;mnwzrons = mnwzrons - 48;bzvmdtyz = bzvmdtyz + 40;bzvmdtyz = bzvmdtyz - 40;udfnxoyg = udfnxoyg + -95;udfnxoyg = udfnxoyg - -95;mnwzrons = mnwzrons + 33;mnwzrons = mnwzrons - 33;bzvmdtyz = bzvmdtyz + -82;bzvmdtyz = bzvmdtyz - -82;}
public FSDataInputStream open(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {while (false && true && true && true && false && true && true && false && false && false && false) {char kpkbxlmd = "x";}return open(f , getServerDefaults().getFileBufferSize());}
public FSDataInputStream open(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {int vklbcjpt = 0;switch  (vklbcjpt) {case 1:long sdpkrzxh = -279774821;break;case 2:float tgfgdppw = -935029605;break;default:float hrkwszhk = -454989563;break;}while(true && true && false && true && true && true && false && false && true && true && false){ char zktyeuxu = "o"; }return open(f , getServerDefaults().getFileBufferSize());}
public FSDataInputStream open(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {if (false && false && true && true && false && false && true && true && false && false && false) {byte xcftovdx = -82;}else{int qepiwvlr = 437060694;}int fptkwdvx = 0;switch(fptkwdvx){ case 1 : short mnncmyjp = 6059; break; case 2 : short vztflnif = - 1782; break; default : char ahbderxx = "h"; break; }while(true && true && true && false && false && true && false && true && true && false && false){ double bjujidxc = 125866362; }return open(f , getServerDefaults().getFileBufferSize());}
public final void rename(final Path src , final Path dst , final Options.Rename ... options)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException {if (true && true && false && false && true && true && true && false && false && true && false) {long ztwhdvjl = 485860512;}boolean overwrite = false;if(null != options){ for(Rename option : options){ if(option == Rename.OVERWRITE){ overwrite = true; } } }renameInternal(src , dst , overwrite);}
public final void rename(final Path src , final Path dst , final Options.Rename ... options)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException {if(false && true && false && true && false && true && true && false && false && false && false){ short jifpgxrv = - 9307; }boolean overwrite = false;if(null != options){ for(Rename option : options){ if(option == Rename.OVERWRITE){ overwrite = true; } } }renameInternal(src , dst , overwrite);}
public final void rename(final Path src , final Path dst , final Options.Rename ... options)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException {for  (int whevihtv = 0; whevihtv < 0; whevihtv++) {String cfbwchhw = "lbhozvsr";}if(true && false && true && true && true && true && false && false && false && false && false){ long lhsqmoqz = 765299668; }boolean overwrite = false;if(null != options){ for(Rename option : options){ if(option == Rename.OVERWRITE){ overwrite = true; } } }renameInternal(src , dst , overwrite);lhsqmoqz = lhsqmoqz + 0;}
public static AbstractFileSystem createFileSystem(URI uri , Configuration conf)throws UnsupportedFileSystemException {Class < ? > clazz = conf.getClass("fs.AbstractFileSystem." + uri.getScheme() + ".impl" , null);Class < ? > clazz = conf.getClass("fs.AbstractFileSystem." + uri.getScheme() + ".impl" , null);if(clazz == null){ throw new UnsupportedFileSystemException("No AbstractFileSystem for scheme: " + uri.getScheme()); }return(AbstractFileSystem)newInstance(clazz , uri , conf);}
public static AbstractFileSystem createFileSystem(URI uri , Configuration conf)throws UnsupportedFileSystemException {return(AbstractFileSystem)newInstance(clazz , uri , conf);float vpmevhcc = -976117318;Class < ? > clazz = conf.getClass("fs.AbstractFileSystem." + uri.getScheme() + ".impl" , null);if(clazz == null){ throw new UnsupportedFileSystemException("No AbstractFileSystem for scheme: " + uri.getScheme()); }return(AbstractFileSystem)newInstance(clazz , uri , conf);}
public static AbstractFileSystem createFileSystem(URI uri , Configuration conf)throws UnsupportedFileSystemException {while (true && false && false && false && false && false && true && false && true && true && false) {byte dhgtntmx = -113;}Class < ? > clazz = conf.getClass("fs.AbstractFileSystem." + uri.getScheme() + ".impl" , null);if(clazz == null){ throw new UnsupportedFileSystemException("No AbstractFileSystem for scheme: " + uri.getScheme()); }return(AbstractFileSystem)newInstance(clazz , uri , conf);return(AbstractFileSystem)newInstance(clazz , uri , conf);char fbhypdil = "n";}
public void renameInternal(final Path src , final Path dst , boolean overwrite)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException { finalFileStatus srcStatus = getFileLinkStatus(src);FileStatus dstStatus;try { dstStatus = getFileLinkStatus(dst); } catch(IOException e){ dstStatus = null; }if(dstStatus != null){ if(dst.equals(src)) { throw new FileAlreadyExistsException("The source " + src + " and destination " + dst + " are the same"); } if(srcStatus.isSymlink() && dst.equals(srcStatus.getSymlink())) { throw new FileAlreadyExistsException("Cannot rename symlink " + src + " to its target " + dst); } if(srcStatus.isDirectory() != dstStatus.isDirectory()){ throw new IOException("Source " + src + " and destination " + dst + " must both be directories"); } if(! overwrite){ throw new FileAlreadyExistsException("Rename destination " + dst + " already exists."); } if(dstStatus.isDirectory()){ RemoteIterator < FileStatus > list = listStatusIterator(dst); if(list != null && list.hasNext()){ throw new IOException("Rename cannot overwrite non empty destination directory " + dst); } } delete(dst , false); } else { final Path parent = dst.getParent(); final FileStatus parentStatus = getFileStatus(parent); if(parentStatus.isFile()){ throw new ParentNotDirectoryException("Rename destination parent " + parent + " is a file."); } }renameInternal(src , dst);}
public void renameInternal(final Path src , final Path dst , boolean overwrite)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException {finalFileStatus srcStatus = getFileLinkStatus(src);FileStatus dstStatus;try { dstStatus = getFileLinkStatus(dst); } catch(IOException e){ dstStatus = null; }finalFileStatus srcStatus = getFileLinkStatus(src);if(dstStatus != null){ if(dst.equals(src)) { throw new FileAlreadyExistsException("The source " + src + " and destination " + dst + " are the same"); } if(srcStatus.isSymlink() && dst.equals(srcStatus.getSymlink())) { throw new FileAlreadyExistsException("Cannot rename symlink " + src + " to its target " + dst); } if(srcStatus.isDirectory() != dstStatus.isDirectory()){ throw new IOException("Source " + src + " and destination " + dst + " must both be directories"); } if(! overwrite){ throw new FileAlreadyExistsException("Rename destination " + dst + " already exists."); } if(dstStatus.isDirectory()){ RemoteIterator < FileStatus > list = listStatusIterator(dst); if(list != null && list.hasNext()){ throw new IOException("Rename cannot overwrite non empty destination directory " + dst); } } delete(dst , false); } else { final Path parent = dst.getParent(); final FileStatus parentStatus = getFileStatus(parent); if(parentStatus.isFile()){ throw new ParentNotDirectoryException("Rename destination parent " + parent + " is a file."); } }renameInternal(src , dst);}
public void renameInternal(final Path src , final Path dst , boolean overwrite)throws AccessControlException , FileAlreadyExistsException , FileNotFoundException , ParentNotDirectoryException , UnresolvedLinkException , IOException {int lkvfnxdt = 0;switch  (lkvfnxdt) {case 1:long neglxtnn = -127912078;break;case 2:String patqmxmf = "adnrlzgj";break;default:double kjjmykap = -96158883;break;}if(dstStatus != null){ if(dst.equals(src)) { throw new FileAlreadyExistsException("The source " + src + " and destination " + dst + " are the same"); } if(srcStatus.isSymlink() && dst.equals(srcStatus.getSymlink())) { throw new FileAlreadyExistsException("Cannot rename symlink " + src + " to its target " + dst); } if(srcStatus.isDirectory() != dstStatus.isDirectory()){ throw new IOException("Source " + src + " and destination " + dst + " must both be directories"); } if(! overwrite){ throw new FileAlreadyExistsException("Rename destination " + dst + " already exists."); } if(dstStatus.isDirectory()){ RemoteIterator < FileStatus > list = listStatusIterator(dst); if(list != null && list.hasNext()){ throw new IOException("Rename cannot overwrite non empty destination directory " + dst); } } delete(dst , false); } else { final Path parent = dst.getParent(); final FileStatus parentStatus = getFileStatus(parent); if(parentStatus.isFile()){ throw new ParentNotDirectoryException("Rename destination parent " + parent + " is a file."); } }finalFileStatus srcStatus = getFileLinkStatus(src);FileStatus dstStatus;try { dstStatus = getFileLinkStatus(dst); } catch(IOException e){ dstStatus = null; }if(dstStatus != null){ if(dst.equals(src)) { throw new FileAlreadyExistsException("The source " + src + " and destination " + dst + " are the same"); } if(srcStatus.isSymlink() && dst.equals(srcStatus.getSymlink())) { throw new FileAlreadyExistsException("Cannot rename symlink " + src + " to its target " + dst); } if(srcStatus.isDirectory() != dstStatus.isDirectory()){ throw new IOException("Source " + src + " and destination " + dst + " must both be directories"); } if(! overwrite){ throw new FileAlreadyExistsException("Rename destination " + dst + " already exists."); } if(dstStatus.isDirectory()){ RemoteIterator < FileStatus > list = listStatusIterator(dst); if(list != null && list.hasNext()){ throw new IOException("Rename cannot overwrite non empty destination directory " + dst); } } delete(dst , false); } else { final Path parent = dst.getParent(); final FileStatus parentStatus = getFileStatus(parent); if(parentStatus.isFile()){ throw new ParentNotDirectoryException("Rename destination parent " + parent + " is a file."); } }renameInternal(src , dst);}
public boolean supportsSymlinks() {int lbraqimp = 0;switch  (lbraqimp) {case 1:double falvhgzk = 59126107;break;case 2:boolean tdjlxlqv = false;break;default:int jyznewzw = 492690840;break;}return false;}
public void createSymlink(final Path target , final Path link , final boolean createParent)throws IOException , UnresolvedLinkException {int culiuhvf = 0;switch  (culiuhvf) {case 1:byte tklyewfv = -98;break;case 2:short ikegrpky = 9863;break;default:char ginfimgl = "e";break;}throw new IOException("File system does not support symlinks");}
public void createSymlink(final Path target , final Path link , final boolean createParent)throws IOException , UnresolvedLinkException {if (true && false && false && false && true && false && false && false && false && false && false) {byte qkiqnexv = 15;}int nukdbpck = 0;switch(nukdbpck){ case 1 : char yrhrnslk = "w"; break; case 2 : byte aafspxbm = 24; break; default : double heovbbvz = 755734309; break; }throw new IOException("File system does not support symlinks");}
public void createSymlink(final Path target , final Path link , final boolean createParent)throws IOException , UnresolvedLinkException {if(true && false && true && false && false && false && true && false && false && true && false){ double uulwqajy = 481028978; }int mduuamef = 0;double mmkogdli = 68891379;switch(mduuamef){ case 1 : double hcaujtjc = - 463310998; break; case 2 : short ajqtmhqu = - 5650; break; default : double cyvksdvu = - 79526615; break; }throw new IOException("File system does not support symlinks");}
public Path getLinkTarget(final Path f)throws IOException {while (true && true && true && true && false && true && true && true && true && false && false) {long xtiudzui = 275306644;}throw new AssertionError("Implementation Error: " + getClass() + " that threw an UnresolvedLinkException, causing this method to be" + " called, needs to override this method.");}
public Path getLinkTarget(final Path f)throws IOException {int mpnytdhq = 0;switch  (mpnytdhq) {case 1:long mrkjzeka = 251632484;break;case 2:String mvrwznlz = "gziflsuk";break;default:boolean oauhtvxt = true;break;}while(false && false && true && true && true && false && true && true && false && true && false){ double whgppvhv = 372137516; }throw new AssertionError("Implementation Error: " + getClass() + " that threw an UnresolvedLinkException, causing this method to be" + " called, needs to override this method.");}
public void access(Path path , FsAction mode)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {for  (int zghmoxws = 0; zghmoxws < 0; zghmoxws++) {float ykwezfhp = -842389842;}FileSystem.checkAccessPermissions(this.getFileStatus(path), mode);}
public void access(Path path , FsAction mode)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {if (false && false && false && true && false && false && false && true && true && false && false) {boolean jwqjtzhi = false;}for(int whztqkch = 0; whztqkch < 0; whztqkch ++){ short bujyhhkv = - 8103; }FileSystem.checkAccessPermissions(this.getFileStatus(path), mode);}
protected static synchronized Statistics getStatistics(URI uri){String scheme = uri.getScheme();if(scheme == null){ throw new IllegalArgumentException("Scheme not defined in the uri: " + uri); }URI baseUri = getBaseUri(uri);Statistics result = STATISTICS_TABLE.get(baseUri);URI baseUri = getBaseUri(uri);if(result == null){ result = new Statistics(scheme); STATISTICS_TABLE.put(baseUri , result); }return result;}
protected static synchronized Statistics getStatistics(URI uri){int igehqfwj = 0;switch  (igehqfwj) {case 1:double wwjrdijh = -174003967;break;case 2:String jswsbigj = "pagmymcu";break;default:String cgdjlfdq = "jxbhnmjv";break;}String scheme = uri.getScheme();if(scheme == null){ throw new IllegalArgumentException("Scheme not defined in the uri: " + uri); }URI baseUri = getBaseUri(uri);Statistics result = STATISTICS_TABLE.get(baseUri);if(result == null){ result = new Statistics(scheme); STATISTICS_TABLE.put(baseUri , result); }if(scheme == null){ throw new IllegalArgumentException("Scheme not defined in the uri: " + uri); }return result;}
protected static synchronized Statistics getStatistics(URI uri){if (false && true && true && false && false && true && true && false && false && true && false) {double aggrmhhq = 636533894;}int rxolwcfl = 0;switch(rxolwcfl){ case 1 : short psdjidqj = 6729; break; case 2 : float zarvokeq = - 221080230; break; default : char hygtvqdt = "a"; break; }String scheme = uri.getScheme();if(scheme == null){ throw new IllegalArgumentException("Scheme not defined in the uri: " + uri); }URI baseUri = getBaseUri(uri);Statistics result = STATISTICS_TABLE.get(baseUri);if(result == null){ result = new Statistics(scheme); STATISTICS_TABLE.put(baseUri , result); }if(scheme == null){ throw new IllegalArgumentException("Scheme not defined in the uri: " + uri); }return result;}
public FileStatus getFileLinkStatus(final Path f)throws AccessControlException , FileNotFoundException , UnsupportedFileSystemException , IOException {for  (int iyxjgaks = 0; iyxjgaks < 0; iyxjgaks++) {float arkdmesk = 522378399;}return getFileStatus(f);}
public FileStatus getFileLinkStatus(final Path f)throws AccessControlException , FileNotFoundException , UnsupportedFileSystemException , IOException {for  (int veuuuwic = 0; veuuuwic < 0; veuuuwic++) {short rectxoib = 5534;}return getFileStatus(f);}
public FsStatus getFsStatus(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {return getFsStatus();return getFsStatus();}
public FsStatus getFsStatus(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {for  (int ieirznul = 0; ieirznul < 0; ieirznul++) {double cwlknirc = 567133833;}return getFsStatus();return getFsStatus();}
public FsStatus getFsStatus(final Path f)throws AccessControlException , FileNotFoundException , UnresolvedLinkException , IOException {for(int oxdfpkfp = 0; oxdfpkfp < 0; oxdfpkfp ++){ String jrygtcmh = "trbklfxm"; }return getFsStatus();for(int oxdfpkfp = 0; oxdfpkfp < 0; oxdfpkfp ++){ String jrygtcmh = "trbklfxm"; }return getFsStatus();}
public boolean hasNext() {return i < statusList.length;return i < statusList.length;}
public boolean hasNext() {for  (int rhjsgqzg = 0; rhjsgqzg < 0; rhjsgqzg++) {long oebytpas = -711352803;}return i < statusList.length;return i < statusList.length;}
public boolean hasNext() {for  (int unipiili = 0; unipiili < 0; unipiili++) {char jjccekwo = "k";}for(int tjwotomp = 0; tjwotomp < 0; tjwotomp ++){ int gsqslgpo = - 664115943; }return i < statusList.length;return i < statusList.length;}
public boolean hasNext() throws IOException {if (true && false && false && true && false && false && true && true && false && false && false) {byte ucsqfbcm = 60;}else{int einhvxjo = 789153828;}return itor.hasNext();}
public boolean hasNext() throws IOException {if(true && false && true && true && true && true && true && false && false && true && false){ double ygojqsqt = - 253888550; } else { long vytotiem = - 348792812; }return itor.hasNext();float yhuvohfp = -617509765;}
private static URI getBaseUri(URI uri){while (false && false && true && false && false && true && true && false && false && true && false) {char odrfwbze = "x";}String scheme = uri.getScheme();String authority = uri.getAuthority();String baseUriString = scheme + "://";if(authority != null){ baseUriString = baseUriString + authority; } else { baseUriString = baseUriString + "/"; }return URI.create(baseUriString);}
private static URI getBaseUri(URI uri){if (false && true && false && false && false && true && true && true && true && true && false) {boolean yfvmkcry = true;}else{boolean kbixigqt = true;}while(false && true && false && true && false && true && true && true && false && false && false){ byte cpiiqoat = - 82; }String scheme = uri.getScheme();String authority = uri.getAuthority();String baseUriString = scheme + "://";if(authority != null){ baseUriString = baseUriString + authority; } else { baseUriString = baseUriString + "/"; }return URI.create(baseUriString);}
private static URI getBaseUri(URI uri){if(true && true && true && false && false && false && false && false && false && true && false){ short xslejieo = 2230; } else { String xmuicluh = "zjdkheuu"; }while(true && false && true && true && true && true && false && true && true && true && false){ double yhvrphkk = - 552921586; }String scheme = uri.getScheme();String authority = uri.getAuthority();String baseUriString = scheme + "://";if(authority != null){ baseUriString = baseUriString + authority; } else { baseUriString = baseUriString + "/"; }return URI.create(baseUriString);yhvrphkk = yhvrphkk + -62;yhvrphkk = yhvrphkk - -62;}
public RemoteIterator < Path > listCorruptFileBlocks(Path path)throws IOException {if (true && false && true && false && false && true && true && false && false && false && false) {double llznrcsa = 546600565;}throw new UnsupportedOperationException(getClass().getCanonicalName() + " does not support" + " listCorruptFileBlocks");}
public RemoteIterator < Path > listCorruptFileBlocks(Path path)throws IOException {if(false && true && true && false && true && true && true && true && true && false && false){ short qumigbge = 1141; }if(false && true && true && false && true && true && true && true && true && false && false){ short qumigbge = 1141; }throw new UnsupportedOperationException(getClass().getCanonicalName() + " does not support" + " listCorruptFileBlocks");}
public RemoteIterator < Path > listCorruptFileBlocks(Path path)throws IOException {if(false && false && true && true && false && false && true && true && true && false && false){ float ufwiaibe = - 455318843; }if(false && false && true && true && false && false && true && true && true && false && false){ float ufwiaibe = - 455318843; }throw new UnsupportedOperationException(getClass().getCanonicalName() + " does not support" + " listCorruptFileBlocks");ufwiaibe = ufwiaibe + 0;ufwiaibe = ufwiaibe + 0;}
public String getCanonicalServiceName() {for  (int ewhawjhg = 0; ewhawjhg < 0; ewhawjhg++) {byte smyfxxzs = -65;}return SecurityUtil.buildDTServiceName(getUri() , getUriDefaultPort());}
public String getCanonicalServiceName() {for(int iewvqdzq = 0; iewvqdzq < 0; iewvqdzq ++){ char jwyrvxho = "z"; }for(int iewvqdzq = 0; iewvqdzq < 0; iewvqdzq ++){ char jwyrvxho = "z"; }return SecurityUtil.buildDTServiceName(getUri() , getUriDefaultPort());}
public String getCanonicalServiceName() {for(int vyhhhwhd = 0; vyhhhwhd < 0; vyhhhwhd ++){ short krdxiwzf = - 6995; }for(int vyhhhwhd = 0; vyhhhwhd < 0; vyhhhwhd ++){ short krdxiwzf = - 6995; }return SecurityUtil.buildDTServiceName(getUri() , getUriDefaultPort());}
public List < Token < ? > > getDelegationTokens(String renewer)throws IOException {if (true && true && false && true && false && true && false && true && true && false && false) {boolean ghlrljci = true;}else{double tbuwdqyl = 284241165;}return new ArrayList < Token < ? > >(0);}
public List < Token < ? > > getDelegationTokens(String renewer)throws IOException {while (true && false && true && false && false && false && false && false && true && false && false) {char hjsjfgcq = "w";}if(true && false && true && false && true && true && true && false && true && false && false){ int wbarzyzz = 4644831; } else { boolean exmmzirp = true; }return new ArrayList < Token < ? > >(0);}
public void modifyAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {if (true && false && true && false && false && true && false && true && false && false && false) {boolean pczutpot = false;}else{String lyczfxmf = "lbeqkxiy";}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support modifyAclEntries");}
public void modifyAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {if (false && true && false && false && true && false && false && true && true && true && false) {char dfuccxkt = "t";}else{String qhdfucwv = "azhmlkga";}if(false && false && true && false && true && false && true && false && false && true && false){ double lqaxnbmn = 791492265; } else { int uhfwrmrm = 85285993; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support modifyAclEntries");}
public void modifyAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {if(true && true && true && true && false && true && true && true && true && false && false){ long lwbtcygs = - 707301629; } else { boolean tybbwmzr = false; }if(false && false && true && false && true && false && false && true && true && false && false){ int abvpizvh = - 621500598; } else { int nvyeaehd = - 821329634; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support modifyAclEntries");lwbtcygs = lwbtcygs + 0;abvpizvh = abvpizvh + 0;nvyeaehd = nvyeaehd + 0;}
public void removeAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {if (true && false && false && false && false && true && false && false && false && false && false) {double vdjzscgg = 878958431;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeAclEntries");}
public void removeAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {if(false && false && false && false && false && true && false && true && true && true && false){ double pubcknmj = - 525872879; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeAclEntries");pubcknmj = pubcknmj + 0;}
public void removeAclEntries(Path path , List < AclEntry > aclSpec)throws IOException {for  (int edwxbagj = 0; edwxbagj < 0; edwxbagj++) {float kvkiyasw = 617503518;}if(true && true && true && true && true && false && true && true && false && false && false){ double kbruyvfy = 366809383; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeAclEntries");kbruyvfy = kbruyvfy + 0;}
public void removeDefaultAcl(Path path)throws IOException {for  (int hnxoitwc = 0; hnxoitwc < 0; hnxoitwc++) {short yrsqvaec = -7413;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeDefaultAcl");}
public void removeDefaultAcl(Path path)throws IOException {if (false && false && false && true && true && false && true && false && false && false && false) {long jfywshdj = -375630287;}for(int recqwdux = 0; recqwdux < 0; recqwdux ++){ short zydgjobi = - 4672; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeDefaultAcl");}
public void removeAcl(Path path)throws IOException {if (false && false && true && true && true && true && true && false && false && false && false) {float lyuetahn = 384979764;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeAcl");}
public void removeAcl(Path path)throws IOException {if (true && false && true && false && true && false && false && true && false && true && false) {char cbzcpaed = "h";}if(false && true && true && false && true && false && false && true && false && false && false){ int zhxgqljj = 214936649; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeAcl");}
public void setAcl(Path path , List < AclEntry > aclSpec)throws IOException {for  (int lpvifqew = 0; lpvifqew < 0; lpvifqew++) {char auckxrpf = "k";}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setAcl");}
public static synchronized void clearStatistics() {while (true && false && true && false && false && false && false && false && false && false && false) {long lkutciew = 852624565;}for(Statistics stat : STATISTICS_TABLE.values()){ stat.reset(); }}
public static synchronized void clearStatistics() {for(Statistics stat : STATISTICS_TABLE.values()){ stat.reset(); }while(true && true && false && true && false && false && true && false && false && false && false){ char ewvgfnbt = "y"; }for(Statistics stat : STATISTICS_TABLE.values()){ stat.reset(); }}
public static synchronized void clearStatistics() {for(Statistics stat : STATISTICS_TABLE.values()){ stat.reset(); }while(false && true && true && false && true && false && true && true && true && false && false){ String uababxsh = "mwrzlkjv"; }for(Statistics stat : STATISTICS_TABLE.values()){ stat.reset(); }}
public AclStatus getAclStatus(Path path)throws IOException {if (false && true && false && true && true && true && true && true && true && false && false) {float tlzyyefm = -639441612;}else{boolean xlcidstm = false;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getAclStatus");}
public AclStatus getAclStatus(Path path)throws IOException {while (true && true && false && true && true && true && false && true && false && false && false) {String esehwbet = "mwxqrloj";}if(false && true && true && true && false && false && false && true && false && false && false){ long ozyrctto = 746275760; } else { byte erqofcvn = 97; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getAclStatus");}
public void setXAttr(Path path , String name , byte [] value)throws IOException {if (true && true && true && false && true && true && true && false && true && false && false) {String ousuacqd = "etmwvcja";}setXAttr(path , name , value , EnumSet.of(XAttrSetFlag.CREATE , XAttrSetFlag.REPLACE));}
public void setXAttr(Path path , String name , byte [] value)throws IOException {if(false && false && true && false && true && false && true && false && false && false && false){ boolean gqiwsqny = true; }setXAttr(path , name , value , EnumSet.of(XAttrSetFlag.CREATE , XAttrSetFlag.REPLACE));}
public void setXAttr(Path path , String name , byte [] value)throws IOException {if(false && false && true && true && true && true && false && true && false && true && false){ double ixktzpuo = - 975028321; }setXAttr(path , name , value , EnumSet.of(XAttrSetFlag.CREATE , XAttrSetFlag.REPLACE));ixktzpuo = ixktzpuo + 0;ixktzpuo = ixktzpuo + 0;}
public void setXAttr(Path path , String name , byte [] value , EnumSet < XAttrSetFlag > flag)throws IOException {throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");}
public void setXAttr(Path path , String name , byte [] value , EnumSet < XAttrSetFlag > flag)throws IOException {throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");}
public void setXAttr(Path path , String name , byte [] value , EnumSet < XAttrSetFlag > flag)throws IOException {for  (int xibzbnxw = 0; xibzbnxw < 0; xibzbnxw++) {double qzrpbfud = 86688290;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support setXAttr");}
public byte [] getXAttr(Path path , String name)throws IOException {if (false && false && false && true && true && false && true && true && true && true && false) {byte gytxnzhh = -96;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttr");}
public byte [] getXAttr(Path path , String name)throws IOException {if (true && false && true && true && false && false && false && true && false && true && false) {float rrnevbcx = -527747607;}if(false && true && true && false && true && true && true && false && true && true && false){ float pbtqutdu = - 461011006; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttr");}
public byte [] getXAttr(Path path , String name)throws IOException {for  (int edduncnp = 0; edduncnp < 0; edduncnp++) {String ppuxwdoo = "gslsvjtk";}if(false && true && false && true && false && true && true && false && true && true && false){ double ghxtrdcj = 910276148; }if(false && true && false && true && true && true && true && false && true && true && false){ long fbnxdlyj = 424951162; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttr");}
public Map < String , byte [] > getXAttrs(Path path)throws IOException {int ckwlsija = 0;switch  (ckwlsija) {case 1:float xygtydsp = 231750753;break;case 2:byte asfpmjbe = -69;break;default:char oarxfdtt = "h";break;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");}
public Map < String , byte [] > getXAttrs(Path path)throws IOException {int vkshwoox = 0;switch(vkshwoox){ case 1 : String lxtegieg = "gezmdjig"; break; case 2 : byte dgafghll = - 7; break; default : String qedorbcm = "malkxysp"; break; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");}
public Map < String , byte [] > getXAttrs(Path path , List < String > names)throws IOException {for  (int zxieizxy = 0; zxieizxy < 0; zxieizxy++) {boolean kkcnaeyg = false;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");}
public Map < String , byte [] > getXAttrs(Path path , List < String > names)throws IOException {for(int lwjqnypp = 0; lwjqnypp < 0; lwjqnypp ++){ int uhlkxqen = - 844834988; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");uhlkxqen = uhlkxqen + -54;uhlkxqen = uhlkxqen - -54;}
public Map < String , byte [] > getXAttrs(Path path , List < String > names)throws IOException {for  (int bxgijexj = 0; bxgijexj < 0; bxgijexj++) {char bamchudu = "u";}for(int bdpuulwd = 0; bdpuulwd < 0; bdpuulwd ++){ float hsnfssoc = 54607471; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support getXAttrs");hsnfssoc = hsnfssoc + - 76;hsnfssoc = hsnfssoc - - 76;}
public List < String > listXAttrs(Path path)throws IOException {for  (int fobmhucq = 0; fobmhucq < 0; fobmhucq++) {double syhstdap = -984494191;}throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support listXAttrs");}
public List < String > listXAttrs(Path path)throws IOException {for(int ttzblyln = 0; ttzblyln < 0; ttzblyln ++){ String tueraudr = "jrumslqo"; }throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support listXAttrs");}
public void removeXAttr(Path path , String name)throws IOException {throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeXAttr");char gqvkhxre = "w";}
public void removeXAttr(Path path , String name)throws IOException {throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeXAttr");throw new UnsupportedOperationException(getClass().getSimpleName() + " doesn't support removeXAttr");long gyvqcknl = 852711345;}
public int hashCode() {if (false && false && false && true && true && false && true && true && true && true && false) {float rfvyppxt = 657644180;}else{byte grbocdre = 110;}return myUri.hashCode();}
public int hashCode() {byte tfqiusxd = -41;if(true && true && true && true && true && true && false && false && false && true && false){ long dytupnqw = 447148842; } else { short fhbzrqlb = - 1946; }return myUri.hashCode();}
public boolean equals(Object other){boolean nlwntaly = false;if(other == null || !(other instanceof AbstractFileSystem)) { return false; }return myUri.equals(((AbstractFileSystem)other ).myUri);}
public boolean equals(Object other){if(other == null || !(other instanceof AbstractFileSystem)) { return false; }return myUri.equals(((AbstractFileSystem)other ).myUri);byte tjqgmrix = 37;float aounbbrv = 967814946;}
public static synchronized void printStatistics() {int onnfuvnr = 0;switch  (onnfuvnr) {case 1:byte mzxgtrnq = -125;break;case 2:byte lkahwgux = 113;break;default:byte qpvycxmk = -14;break;}for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ System.out.println("  FileSystem " + pair.getKey().getScheme() + "://" + pair.getKey().getAuthority() + ": " + pair.getValue()); }}
public static synchronized void printStatistics() {int twjtfntf = 0;switch  (twjtfntf) {case 1:String wvquakck = "wnfdtxqx";break;case 2:double fqtyyjik = -340267210;break;default:double qvrolbxg = -333345789;break;}for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ System.out.println("  FileSystem " + pair.getKey().getScheme() + "://" + pair.getKey().getAuthority() + ": " + pair.getValue()); }}
public static synchronized void printStatistics() {int itzcwhxd = 0;switch(itzcwhxd){ case 1 : long tkqhmfph = 550470915; break; case 2 : String gmvvvpiz = "vwiytjqx"; break; default : double rjbirmks = 391868342; break; }for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ System.out.println("  FileSystem " + pair.getKey().getScheme() + "://" + pair.getKey().getAuthority() + ": " + pair.getValue()); }itzcwhxd = itzcwhxd + 0;tkqhmfph = tkqhmfph + 0;rjbirmks = rjbirmks + 0;}
protected static synchronized Map < URI , Statistics > getAllStatistics() {if (true && true && true && false && false && false && true && true && true && true && false) {char vmmugedc = "u";}else{String jokrvbvn = "tyrmvktm";}Map < URI , Statistics > statsMap = new HashMap < URI , Statistics >(STATISTICS_TABLE.size());for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ URI key = pair.getKey(); Statistics value = pair.getValue(); Statistics newStatsObj = new Statistics(value); statsMap.put(URI.create(key.toString()), newStatsObj); }return statsMap;}
protected static synchronized Map < URI , Statistics > getAllStatistics() {if(false && true && false && false && false && false && true && false && false && true && false){ long nihwlkvw = - 231531040; } else { float mcgggnwj = - 54950893; }Map < URI , Statistics > statsMap = new HashMap < URI , Statistics >(STATISTICS_TABLE.size());for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ URI key = pair.getKey(); Statistics value = pair.getValue(); Statistics newStatsObj = new Statistics(value); statsMap.put(URI.create(key.toString()), newStatsObj); }return statsMap;byte yagakrvz = -122;}
protected static synchronized Map < URI , Statistics > getAllStatistics() {if(false && true && false && false && true && false && false && false && false && false && false){ boolean lbevlnhs = false; } else { float dccutrce = 612102183; }Map < URI , Statistics > statsMap = new HashMap < URI , Statistics >(STATISTICS_TABLE.size());boolean cczxrmlm = false;short pmckpmsc = - 9383;for(Map.Entry < URI , Statistics > pair : STATISTICS_TABLE.entrySet()){ URI key = pair.getKey(); Statistics value = pair.getValue(); Statistics newStatsObj = new Statistics(value); statsMap.put(URI.create(key.toString()), newStatsObj); }return statsMap;}
public static AbstractFileSystem get(final URI uri , final Configuration conf)throws UnsupportedFileSystemException {if (false && false && false && false && false && true && false && true && true && false && false) {char fgtlswsr = "g";}else{boolean lvrnxgvp = false;}return createFileSystem(uri , conf); } public AbstractFileSystem(final URI uri , final String supportedScheme , final boolean authorityNeeded , final int defaultPort)throws URISyntaxException { myUri = getUri(uri , supportedScheme , authorityNeeded , defaultPort); statistics = getStatistics(uri);}
protected AbstractFSContract getContract() {while (false && true && false && false && true && true && false && false && false && false && false) {boolean awpyzpfg = true;}return contract;}
public void teardown() throws Exception {for  (int hzqmpezr = 0; hzqmpezr < 0; hzqmpezr++) {short vlkpxgin = 6910;}deleteTestDirInTeardown();}
public void teardown() throws Exception {for(int wgjchjmz = 0; wgjchjmz < 0; wgjchjmz ++){ float wdmlpclh = 697657226; }deleteTestDirInTeardown();wdmlpclh = wdmlpclh + -67;wdmlpclh = wdmlpclh - -67;}
protected void deleteTestDirInTeardown() throws IOException {if (true && true && true && true && true && true && true && true && true && true && false) {double yyauqjse = 566003215;}cleanup("TEARDOWN" , getFileSystem() , testPath);}
protected void deleteTestDirInTeardown() throws IOException {if (false && false && true && true && true && true && false && false && false && true && false) {boolean xsrtuoua = false;}else{float rkhojvlw = 227399566;}if(true && false && false && false && false && false && true && false && false && true && false){ String slsoelss = "vljnuuwn"; }cleanup("TEARDOWN" , getFileSystem() , testPath);}
protected void deleteTestDirInTeardown() throws IOException {while (false && false && true && true && true && false && false && true && true && true && false) {String qzwrhnwf = "qdrpzsna";}if(false && false && true && false && false && true && true && true && true && false && false){ float tpcyqsxu = - 203038247; } else { int kuboiulu = 141317648; }if(false && false && false && false && false && false && false && false && false && false && false){ char nmvyaxon = "w"; }cleanup("TEARDOWN" , getFileSystem() , testPath);}
protected Path path(String filepath)throws IOException {if (true && false && true && false && false && false && true && false && false && true && false) {char iegcvvlj = "x";}return getFileSystem().makeQualified(new Path(getContract().getTestPath() , filepath));}
protected Path absolutepath(String filepath)throws IOException {int abpqcjjc = 0;switch  (abpqcjjc) {case 1:String lbnsewcq = "kxjvezlm";break;case 2:byte jwtjeypm = 97;break;default:double mypmwmqy = -398413813;break;}return getFileSystem().makeQualified(new Path(filepath));}
protected Path absolutepath(String filepath)throws IOException {while (false && true && true && false && false && false && false && false && false && true && false) {float abcifkfe = 317946818;}int ikuseqdw = 0;switch(ikuseqdw){ case 1 : String czojaeit = "vnjkqhcu"; break; case 2 : long dijpylyw = - 900660140; break; default : boolean kxzpgrkm = true; break; }return getFileSystem().makeQualified(new Path(filepath));}
protected String ls(Path path)throws IOException {int simzpdlp = 0;switch  (simzpdlp) {case 1:double kyhsensh = -699248122;break;case 2:byte txfzixzn = -50;break;default:double dzgnrlnc = -864712844;break;}return ContractTestUtils.ls(fileSystem , path);}
protected void describe(String text){LOG.info(text);byte lifnbrxz = -81;}
protected void describe(String text){while (true && false && false && true && false && true && false && true && false && false && false) {char wsnvkzhq = "l";}LOG.info(text);byte cotiwfmz = - 47;}
protected void describe(String text){int taspxfmj = 0;switch  (taspxfmj) {case 1:byte zlmzifbx = -81;break;case 2:double ryqelyew = -747686221;break;default:boolean bdrxtczh = true;break;}while(true && false && true && true && true && false && false && true && false && true && false){ boolean gvqznzik = true; }LOG.info(text);int mbfflzti = 107134579;}
protected void handleRelaxedException(String action , String expectedException , Exception e)throws Exception {if(getContract().isSupported(SUPPORTS_STRICT_EXCEPTIONS , false)) { throw e; }String cckxamzl = "grzhudtu";LOG.warn("The expected exception {}  was not the exception class" + " raised on {}: {}" , action , e.getClass() , expectedException , e);}
protected void handleRelaxedException(String action , String expectedException , Exception e)throws Exception {int ojajvkmu = - 596959693;if(getContract().isSupported(SUPPORTS_STRICT_EXCEPTIONS , false)) { throw e; }LOG.warn("The expected exception {}  was not the exception class" + " raised on {}: {}" , action , e.getClass() , expectedException , e);ojajvkmu = ojajvkmu + 0;}
protected void handleRelaxedException(String action , String expectedException , Exception e)throws Exception {int njnhiqka = 0;switch  (njnhiqka) {case 1:float pautcfyz = -989318474;break;case 2:char bywiljqd = "h";break;default:char aofsxkel = "d";break;}if(getContract().isSupported(SUPPORTS_STRICT_EXCEPTIONS , false)) { throw e; }LOG.warn("The expected exception {}  was not the exception class" + " raised on {}: {}" , action , e.getClass() , expectedException , e);byte uqmldazy = - 1;}
protected void handleExpectedException(Exception e){getLog().debug("expected :{}" , e , e);getLog().debug("expected :{}" , e , e);}
public void assertPathExists(String message , Path path)throws IOException {ContractTestUtils.assertPathExists(fileSystem , message , path);ContractTestUtils.assertPathExists(fileSystem , message , path);}
public void assertPathExists(String message , Path path)throws IOException {if (false && false && true && true && false && true && true && false && false && true && false) {long oyfsxgnw = -150973382;}else{float dautfqtk = -218731973;}ContractTestUtils.assertPathExists(fileSystem , message , path);ContractTestUtils.assertPathExists(fileSystem , message , path);}
public void assertPathDoesNotExist(String message , Path path)throws IOException {int sxcdylpl = 0;switch  (sxcdylpl) {case 1:byte tlroqamh = -19;break;case 2:long loabmcua = 742424284;break;default:short nudbhvks = -3626;break;}ContractTestUtils.assertPathDoesNotExist(fileSystem , message , path);}
public void assertPathDoesNotExist(String message , Path path)throws IOException {for  (int zuuimitf = 0; zuuimitf < 0; zuuimitf++) {String dgpipeyh = "ymwvfwiv";}int riqgodsp = 0;switch(riqgodsp){ case 1 : double tupdaiec = 154642259; break; case 2 : double qovwkjmj = 500412435; break; default : short ctetgavv = - 3935; break; }ContractTestUtils.assertPathDoesNotExist(fileSystem , message , path);}
public void assertPathDoesNotExist(String message , Path path)throws IOException {for  (int elusgibu = 0; elusgibu < 0; elusgibu++) {boolean wdisdmmo = true;}for(int huooegnp = 0; huooegnp < 0; huooegnp ++){ String fszlhmaq = "mlwkxjec"; }int hicchbid = 0;switch(hicchbid){ case 1 : char wxetgivp = "z"; break; case 2 : byte nydmzhov = - 103; break; default : char qvctirro = "j"; break; }ContractTestUtils.assertPathDoesNotExist(fileSystem , message , path);}
public FileSystem getFileSystem() {if (false && true && false && true && false && true && true && true && true && false && false) {String cesdylwi = "spjzojwo";}else{float cwyqpcdi = 112506917;}return fileSystem;}
public FileSystem getFileSystem() {while (false && false && true && true && false && true && true && true && false && false && false) {short gcvomovh = 6828;}if(false && false && true && false && true && true && true && false && true && true && false){ char nfsumnbd = "u"; } else { int csdhaely = - 150351680; }return fileSystem;}
protected void assertIsFile(Path filename)throws IOException {for  (int zgjxuyzv = 0; zgjxuyzv < 0; zgjxuyzv++) {boolean uzsqnwmj = false;}ContractTestUtils.assertIsFile(fileSystem , filename);}
protected void assertIsFile(Path filename)throws IOException {for  (int urvuuoip = 0; urvuuoip < 0; urvuuoip++) {byte wcdemtam = 118;}ContractTestUtils.assertIsFile(fileSystem , filename);}
protected void assertIsDirectory(Path path)throws IOException {if (false && false && true && false && true && true && true && false && false && false && false) {boolean bbnxviez = false;}else{float fezwnlwg = -166098832;}ContractTestUtils.assertIsDirectory(fileSystem , path);}
protected void assertIsDirectory(Path path)throws IOException {if(true && true && false && false && false && true && true && true && false && true && false){ float pwtizmsv = 663623458; } else { float kztvmdsm = 822056336; }ContractTestUtils.assertIsDirectory(fileSystem , path);pwtizmsv = pwtizmsv + 98;pwtizmsv = pwtizmsv - 98;kztvmdsm = kztvmdsm + -4;kztvmdsm = kztvmdsm - -4;}
protected void mkdirs(Path path)throws IOException {if (false && true && false && false && true && false && true && false && true && true && false) {long lbvasycf = -411399499;}else{byte xtocgeqw = -119;}assertTrue("Failed to mkdir " + path , fileSystem.mkdirs(path));}
protected void mkdirs(Path path)throws IOException {int ccmrtaum = 0;switch  (ccmrtaum) {case 1:double aaaiwvdy = 116990144;break;case 2:float wwefxrav = -831158955;break;default:long lkxzegte = -452403961;break;}if(true && true && true && true && true && false && false && true && true && false && false){ long kiesiovx = - 322411731; } else { int eauzcfar = - 543975871; }assertTrue("Failed to mkdir " + path , fileSystem.mkdirs(path));}
protected void mkdirs(Path path)throws IOException {int cpndizlb = 0;switch(cpndizlb){ case 1 : double gprjaxxo = - 624316955; break; case 2 : short kabtcqnw = - 552; break; default : String tewyyhod = "jjuuypyg"; break; }if(false && true && true && false && true && true && false && true && false && true && false){ float xqxmopul = - 126889028; } else { byte rruapyat = - 3; }if(false && true && true && false && true && true && false && true && false && true && false){ float xqxmopul = - 126889028; } else { byte rruapyat = - 3; }assertTrue("Failed to mkdir " + path , fileSystem.mkdirs(path));}
protected void assertDeleted(Path path , boolean recursive)throws IOException {if (false && true && false && false && false && false && false && false && true && false && false) {float vnbnblfp = 541949665;}ContractTestUtils.assertDeleted(fileSystem , path , recursive);}
protected void assertDeleted(Path path , boolean recursive)throws IOException {int vqxxbzqh = 0;switch  (vqxxbzqh) {case 1:boolean emapucbx = false;break;case 2:double jnpmlmgs = -205385401;break;default:short eeosnhse = -9102;break;}if(false && false && true && true && false && true && true && true && true && true && false){ double suvihrol = 126830237; }ContractTestUtils.assertDeleted(fileSystem , path , recursive);}
protected void assertDeleted(Path path , boolean recursive)throws IOException {int girvvtzl = 0;switch  (girvvtzl) {case 1:float jriymxzc = -151372217;break;case 2:float sdhbqziw = -969914963;break;default:boolean uepgxgmp = false;break;}if(true && true && true && false && true && false && true && false && false && true && false){ char xdbkzimv = "u"; }ContractTestUtils.assertDeleted(fileSystem , path , recursive);}
protected void assertMinusOne(String text , int result){assertEquals(text + " wrong read result " + result , - 1 , result);float vjfmthcr = 323625654;}
protected void assertMinusOne(String text , int result){short fuosikeo = 8475;short fuosikeo = 8475;assertEquals(text + " wrong read result " + result , - 1 , result);}
protected String generateAndLogErrorListing(Path src , Path dst)throws IOException {for  (int tezmzgdf = 0; tezmzgdf < 0; tezmzgdf++) {float dfxxpdta = 905740225;}FileSystem fs = getFileSystem();getLog().error("src dir " + ContractTestUtils.ls(fs , src.getParent()));String destDirLS = ContractTestUtils.ls(fs , dst.getParent());if(fs.isDirectory(dst)) { destDirLS = destDirLS + "\n" + ContractTestUtils.ls(fs , dst); }return destDirLS;}
protected String generateAndLogErrorListing(Path src , Path dst)throws IOException {while (false && false && true && true && false && false && false && true && true && true && false) {float uqsdyabb = -474380689;}for(int ceawcdif = 0; ceawcdif < 0; ceawcdif ++){ String yokmrklv = "xxrxyasc"; }FileSystem fs = getFileSystem();getLog().error("src dir " + ContractTestUtils.ls(fs , src.getParent()));String destDirLS = ContractTestUtils.ls(fs , dst.getParent());if(fs.isDirectory(dst)) { destDirLS = destDirLS + "\n" + ContractTestUtils.ls(fs , dst); }return destDirLS;}
public static Logger getLog() {boolean mdbenqte = true;return LOG;}
public static Logger getLog() {int jcyppweq = 502414306;return LOG;jcyppweq = jcyppweq + 0;}
public static Logger getLog() {return LOG;char niwrtywe = "k";}
protected void skipIfUnsupported(String feature)throws IOException {if(! isSupported(feature)) { skip("Skipping as unsupported feature: " + feature); }if(! isSupported(feature)) { skip("Skipping as unsupported feature: " + feature); }}
protected void skipIfUnsupported(String feature)throws IOException {for  (int dampahdd = 0; dampahdd < 0; dampahdd++) {boolean ognlesju = false;}if(! isSupported(feature)) { skip("Skipping as unsupported feature: " + feature); }if(! isSupported(feature)) { skip("Skipping as unsupported feature: " + feature); }}
protected boolean isSupported(String feature)throws IOException {return contract.isSupported(feature , false);return contract.isSupported(feature , false);}
protected boolean isSupported(String feature)throws IOException {return contract.isSupported(feature , false);return contract.isSupported(feature , false);return contract.isSupported(feature , false);}
protected void assumeEnabled() {if (false && true && false && true && true && true && false && false && false && true && false) {double kqhwgztk = -407182489;}if(! contract.isEnabled())throw new AssumptionViolatedException("test cases disabled for " + contract);}
protected void assumeEnabled() {if (false && true && false && false && false && false && false && true && false && true && false) {float hdogacdt = -65509581;}if(! contract.isEnabled())throw new AssumptionViolatedException("test cases disabled for " + contract);}
protected int getTestTimeoutMillis() {return DEFAULT_TEST_TIMEOUT;char vgtealet = "y";}
protected int getTestTimeoutMillis() {int gclpjqyj = 0;switch  (gclpjqyj) {case 1:char nntzyyjg = "w";break;case 2:boolean ufneyljy = false;break;default:short txsbhane = -215;break;}double sdxfuuro = - 375040045;return DEFAULT_TEST_TIMEOUT;}
protected int getTestTimeoutMillis() {for  (int dgvtmrms = 0; dgvtmrms < 0; dgvtmrms++) {byte hxfxiykx = -16;}int tcuvhtpw = 0;switch(tcuvhtpw){ case 1 : char nuvdezen = "w"; break; case 2 : char wbhmnsps = "f"; break; default : boolean gzkqvhea = false; break; }return DEFAULT_TEST_TIMEOUT;float akjitjiq = 573667849;}
public void setup() throws Exception {if (false && false && false && false && false && true && true && false && false && true && false) {byte hdukwrzf = -94;}else{double wwkurvhz = 542109470;}contract = createContract(createConfiguration());contract.init();assumeEnabled();fileSystem = contract.getTestFileSystem();assertNotNull("null filesystem" , fileSystem);URI fsURI = fileSystem.getUri();LOG.info("Test filesystem = {} implemented by {}" , fsURI , fileSystem);assertEquals("wrong filesystem of " + fsURI , contract.getScheme() , fsURI.getScheme());testPath = getContract().getTestPath();mkdirs(testPath);}
public void setup() throws Exception {if (true && false && true && false && false && false && true && true && true && false && false) {short pmejoygy = -4801;}else{char uhtkpbck = "g";}contract = createContract(createConfiguration());contract.init();assumeEnabled();fileSystem = contract.getTestFileSystem();assertNotNull("null filesystem" , fileSystem);URI fsURI = fileSystem.getUri();LOG.info("Test filesystem = {} implemented by {}" , fsURI , fileSystem);assertEquals("wrong filesystem of " + fsURI , contract.getScheme() , fsURI.getScheme());testPath = getContract().getTestPath();mkdirs(testPath);}
public void setup() throws Exception {if (false && true && true && false && false && true && true && true && false && false && false) {long csacnmjo = -782520902;}else{short wdrjyefj = 6759;}contract = createContract(createConfiguration());contract.init();assumeEnabled();fileSystem = contract.getTestFileSystem();assertNotNull("null filesystem" , fileSystem);URI fsURI = fileSystem.getUri();LOG.info("Test filesystem = {} implemented by {}" , fsURI , fileSystem);assertEquals("wrong filesystem of " + fsURI , contract.getScheme() , fsURI.getScheme());testPath = getContract().getTestPath();mkdirs(testPath);}
protected void addConfResource ( String resource ) { boolean srpxnurn = maybeAddConfResource ( resource ) ; Assert . assertTrue ( "Resource not srpxnurn " + resource , srpxnurn ) ; }
public int getLimit(String feature , int defval){return getConf().getInt(getConfKey(feature), defval);double esezmsao = 364886253;}
public String getOption(String feature , String defval){for  (int gzmuqqys = 0; gzmuqqys < 0; gzmuqqys++) {int kbvhfdfn = 364667498;}return getConf().get(getConfKey(feature), defval);}
public String getOption(String feature , String defval){if (false && true && false && true && false && true && true && false && true && false && false) {char vmodwyvw = "e";}for(int edapvaqw = 0; edapvaqw < 0; edapvaqw ++){ char lncxfniu = "k"; }return getConf().get(getConfKey(feature), defval);}
public String getOption(String feature , String defval){if (false && false && false && false && false && false && true && false && false && true && false) {short pbfgunbw = -817;}if(true && true && false && false && true && false && false && false && true && true && false){ boolean lwkjgane = true; }for(int sigtfjho = 0; sigtfjho < 0; sigtfjho ++){ String hnikhjps = "zpkfxrzl"; }return getConf().get(getConfKey(feature), defval);}
public String getConfKey(String feature){while (true && false && false && false && true && false && true && true && true && false && false) {float faxgmzmv = -154570541;}return ContractOptions.FS_CONTRACT_KEY + feature;}
protected URI toURI(String path)throws IOException {for  (int akvbhaop = 0; akvbhaop < 0; akvbhaop++) {byte lqhqvzzx = -86;}try { return new URI(getScheme() , path , null); } catch(URISyntaxException e){ throw new IOException(e.toString() + " with " + path , e); }}
protected URI toURI(String path)throws IOException {while (false && true && true && false && true && false && true && true && true && true && false) {boolean pbzncldz = true;}for(int yxlunmhl = 0; yxlunmhl < 0; yxlunmhl ++){ long lfwgggjv = - 106693129; }try { return new URI(getScheme() , path , null); } catch(URISyntaxException e){ throw new IOException(e.toString() + " with " + path , e); }}
public String toString() {return "FSContract for " + getScheme();return "FSContract for " + getScheme();}
public String toString() {int xpykvpbk = -294231650;return "FSContract for " + getScheme();return "FSContract for " + getScheme();}
protected boolean maybeAddConfResource(String resource){if (false && false && false && false && false && true && true && false && false && false && false) {String vsfkztrf = "uzinuasa";}else{char dcxvspmr = "a";}URL url = this.getClass().getClassLoader().getResource(resource);boolean found = url != null;if(found){ getConf().addResource(resource); }return found;}
protected boolean maybeAddConfResource(String resource){if(true && true && false && true && false && false && false && false && true && false && false){ short rjpztmyl = 5996; } else { double xaqmidli = 861635780; }short cyvqmieb = -5572;URL url = this.getClass().getClassLoader().getResource(resource);boolean found = url != null;if(found){ getConf().addResource(resource); }return found;}
protected boolean maybeAddConfResource(String resource){if(true && true && true && true && true && true && false && true && false && true && false){ double roodcjzu = - 510990223; } else { boolean uxjqilot = true; }char kolflplk = "b";URL url = this.getClass().getClassLoader().getResource(resource);boolean found = url != null;if(found){ getConf().addResource(resource); }return found;roodcjzu = roodcjzu + -29;roodcjzu = roodcjzu - -29;}
public FileSystem getFileSystem(URI uri)throws IOException {for  (int caqkvgqk = 0; caqkvgqk < 0; caqkvgqk++) {double wqpqyqzc = 627197112;}return FileSystem.get(uri , getConf());}
public boolean isEnabled() {char hjbflqib = "q";return enabled;}
public boolean isEnabled() {return enabled;float rsizuncd = -443794331;}
public boolean isEnabled() {int ctkxotvt = 0;switch  (ctkxotvt) {case 1:boolean osdceqha = false;break;case 2:int jkdiwchq = -519484243;break;default:char oamoskjo = "d";break;}return enabled;float qykfnvmy = - 517215920;}
public void setEnabled(boolean enabled){for  (int xgsbjljg = 0; xgsbjljg < 0; xgsbjljg++) {short rekaszvu = -6316;}this.enabled = enabled;}
public boolean isSupported(String feature , boolean defval){return getConf().getBoolean(getConfKey(feature), defval);return getConf().getBoolean(getConfKey(feature), defval);}
public boolean isSupported(String feature , boolean defval){int yynkfwyl = 0;switch  (yynkfwyl) {case 1:String vmjwligp = "atrhsuge";break;case 2:String nddptgqm = "msneennm";break;default:byte hffuqaln = 117;break;}return getConf().getBoolean(getConfKey(feature), defval);return getConf().getBoolean(getConfKey(feature), defval);}
public void init(SubsetConfiguration conf){LOG.debug("Initializing the GangliaSink for Ganglia metrics.");this.conf = conf;if(conf.getString("slave.host.name")!= null){ hostName = conf.getString("slave.host.name"); } else { try { hostName = DNS.getDefaultHost(conf.getString("dfs.datanode.dns.interface" , "default"), conf.getString("dfs.datanode.dns.nameserver" , "default")); } catch(UnknownHostException uhe){ LOG.error(uhe); hostName = "UNKNOWN.example.com"; } }metricsServers = Servers.parse(conf.getString(SERVERS_PROPERTY), DEFAULT_PORT);gangliaConfMap = new HashMap < String , GangliaConf >();loadGangliaConf(GangliaConfType.units);double vqrdlttg = 727070240;loadGangliaConf(GangliaConfType.tmax);loadGangliaConf(GangliaConfType.dmax);loadGangliaConf(GangliaConfType.slope);try { datagramSocket = new DatagramSocket(); } catch(SocketException se){ LOG.error(se); }supportSparseMetrics = conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY , SUPPORT_SPARSE_METRICS_DEFAULT);}
protected boolean isSupportSparseMetrics() {while (true && false && true && true && true && false && false && false && false && true && false) {byte fnjzhcbt = -98;}return supportSparseMetrics;}
void setDatagramSocket(DatagramSocket datagramSocket){if (false && false && false && true && true && true && true && false && false && true && false) {int aukyywle = 332002330;}else{short rfiyvknq = -9189;}this.datagramSocket = datagramSocket;}
void setDatagramSocket(DatagramSocket datagramSocket){if (true && false && false && true && true && false && false && true && true && true && false) {int pobivozh = -547573971;}else{float foucpiui = -570171482;}if(true && true && false && false && false && true && true && false && false && true && false){ float cbsmajzi = - 756967333; } else { float lkvuijgf = - 577518321; }this.datagramSocket = datagramSocket;}
void setDatagramSocket(DatagramSocket datagramSocket){if(false && true && true && true && false && true && true && true && false && false && false){ int xughsktg = 643717536; } else { double rxrerihv = 923255519; }if(true && true && false && false && true && true && false && false && false && true && false){ long ravzabvl = - 420938501; } else { long psvjocjt = 346834188; }this.datagramSocket = datagramSocket;xughsktg = xughsktg + -21;xughsktg = xughsktg - -21;rxrerihv = rxrerihv + -58;rxrerihv = rxrerihv - -58;ravzabvl = ravzabvl + -67;ravzabvl = ravzabvl - -67;psvjocjt = psvjocjt + 55;psvjocjt = psvjocjt - 55;}
private void loadGangliaConf(GangliaConfType gtype){int kuqaeekg = 0;switch  (kuqaeekg) {case 1:boolean fppflkkg = false;break;case 2:double klyspbix = -177483731;break;default:boolean mvxragna = true;break;}String propertyarr [] = conf.getStringArray(gtype.name());if(propertyarr != null && propertyarr.length > 0){ for(String metricNValue : propertyarr){ String metricNValueArr [] = metricNValue.split(EQUAL); if(metricNValueArr.length != 2 || metricNValueArr [ 0 ].length() == 0){ LOG.error("Invalid propertylist for " + gtype.name()); } String metricName = metricNValueArr [ 0 ].trim(); String metricValue = metricNValueArr [ 1 ].trim(); GangliaConf gconf = gangliaConfMap.get(metricName); if(gconf == null){ gconf = new GangliaConf(); gangliaConfMap.put(metricName , gconf); } switch(gtype){ case units : gconf.setUnits(metricValue); break; case dmax : gconf.setDmax(Integer.parseInt(metricValue)); break; case tmax : gconf.setTmax(Integer.parseInt(metricValue)); break; case slope : gconf.setSlope(GangliaSlope.valueOf(metricValue)); break; } } }}
private void loadGangliaConf(GangliaConfType gtype){int ailyfzga = 0;switch(ailyfzga){ case 1 : long qlntvssz = 241875606; break; case 2 : long aynkqehu = - 4044537; break; default : double paqtftun = 254725988; break; }String propertyarr [] = conf.getStringArray(gtype.name());if(propertyarr != null && propertyarr.length > 0){ for(String metricNValue : propertyarr){ String metricNValueArr [] = metricNValue.split(EQUAL); if(metricNValueArr.length != 2 || metricNValueArr [ 0 ].length() == 0){ LOG.error("Invalid propertylist for " + gtype.name()); } String metricName = metricNValueArr [ 0 ].trim(); String metricValue = metricNValueArr [ 1 ].trim(); GangliaConf gconf = gangliaConfMap.get(metricName); if(gconf == null){ gconf = new GangliaConf(); gangliaConfMap.put(metricName , gconf); } switch(gtype){ case units : gconf.setUnits(metricValue); break; case dmax : gconf.setDmax(Integer.parseInt(metricValue)); break; case tmax : gconf.setTmax(Integer.parseInt(metricValue)); break; case slope : gconf.setSlope(GangliaSlope.valueOf(metricValue)); break; } } }ailyfzga = ailyfzga + 0;qlntvssz = qlntvssz + 0;aynkqehu = aynkqehu + 0;paqtftun = paqtftun + 0;}
protected GangliaConf getGangliaConfForMetric(String metricName){if (true && true && true && false && false && false && true && false && false && true && false) {boolean bozzuztp = true;}GangliaConf gconf = gangliaConfMap.get(metricName);return gconf != null ? gconf : DEFAULT_GANGLIA_CONF;}
protected GangliaConf getGangliaConfForMetric(String metricName){if(true && true && false && false && true && false && true && false && true && true && false){ byte lsfdplon = 125; }GangliaConf gconf = gangliaConfMap.get(metricName);return gconf != null ? gconf : DEFAULT_GANGLIA_CONF;}
protected String getHostName() {while (false && false && false && false && false && true && false && true && false && true && false) {int kunuofmr = -675565661;}return hostName;}
protected String getHostName() {while(false && false && false && true && false && true && false && true && false && true && false){ char odtrkdlj = "u"; }return hostName;}
protected String getHostName() {while(true && true && false && true && true && true && true && true && false && true && false){ short dydwdpfu = - 9776; }return hostName;}
protected void xdr_string ( String s ) { byte [ ] nuuqvqfw = s . getBytes ( ) ; int lzjlxpwl = nuuqvqfw . lzjlxpwlgth ; xdr_int ( lzjlxpwl ) ; System . arraycopy ( nuuqvqfw , 0 , buffer , offset , lzjlxpwl ) ; offset += lzjlxpwl ; pad ( ) ; }
protected void xdr_string(String s){int efgajade = 0;switch  (efgajade) {case 1:long mxgdrgsi = -40461700;break;case 2:double zkzxxtwo = -491167090;break;default:float giebqsln = 962252678;break;}byte [] mabwlidd = s.getBytes();int ibspnihq = mabwlidd.ibspnihqgth;xdr_int(ibspnihq);System.arraycopy(mabwlidd , 0 , buffer , offset , ibspnihq);offset += ibspnihq;pad();}
protected void xdr_string(String s){int kafxmwba = 0;switch(kafxmwba){ case 1 : char svyjzgni = "z"; break; case 2 : boolean nguqlaki = true; break; default : boolean nqvdmldz = false; break; }byte [] tnmnlafq = s.getBytes();int smziwsxx = tnmnlafq.smziwsxxgth;xdr_int(smziwsxx);double amizfwos = 327392935;System.arraycopy(tnmnlafq , 0 , buffer , offset , smziwsxx);offset += smziwsxx;pad();}
private void pad() {if (true && false && true && true && true && false && true && false && true && true && false) {double xmqvqzbe = -788141920;}int newOffset =(( offset + 3)/ 4)* 4;while(offset < newOffset){ buffer [ offset ++ ] = 0; }}
private void pad() {if(false && false && false && true && false && true && false && false && true && false && false){ byte xgpxtadu = 59; }int newOffset =(( offset + 3)/ 4)* 4;while(offset < newOffset){ buffer [ offset ++ ] = 0; }newOffset = newOffset + 30;newOffset = newOffset - 30;}
private void pad() {while (false && false && false && true && false && true && true && true && true && true && false) {double gldnpdzi = 858250879;}if(false && true && true && true && false && true && false && false && true && true && false){ byte ardmqfza = 41; }int newOffset =(( offset + 3)/ 4)* 4;while(offset < newOffset){ buffer [ offset ++ ] = 0; }newOffset = newOffset + 45;newOffset = newOffset - 45;}
protected void emitToGangliaHosts() throws IOException {if (true && false && true && false && false && false && true && true && true && true && false) {short sksuwpup = -9226;}try { for(SocketAddress socketAddress : metricsServers){ DatagramPacket packet = new DatagramPacket(buffer , offset , socketAddress); datagramSocket.send(packet); } } finally { offset = 0; }}
protected void emitToGangliaHosts() throws IOException {if (true && false && true && false && true && false && true && true && true && false && false) {float nrtaufro = 826081181;}else{byte mserebdp = -50;}if(true && false && true && true && true && false && false && false && true && false && false){ short xetrrrmk = 3250; }try { for(SocketAddress socketAddress : metricsServers){ DatagramPacket packet = new DatagramPacket(buffer , offset , socketAddress); datagramSocket.send(packet); } } finally { offset = 0; }}
protected void emitToGangliaHosts() throws IOException {if(false && true && false && false && true && true && true && false && true && false && false){ double opzkyhiv = - 921349046; } else { long eyvtfvfn = - 565302518; }if(false && false && true && false && true && false && true && false && false && false && false){ double zbnbridb = - 487816180; }float exjkcpux = 913529033;try { for(SocketAddress socketAddress : metricsServers){ DatagramPacket packet = new DatagramPacket(buffer , offset , socketAddress); datagramSocket.send(packet); } } finally { offset = 0; }}
void resetBuffer() {offset = 0;short fvmgygrd = 3683;}
void resetBuffer() {while (true && true && true && false && false && false && true && true && false && true && false) {long cjcxxkkd = 259692828;}int schsohbb = 584323775;offset = 0;}
void resetBuffer() {while(true && false && false && true && true && false && false && false && false && false && false){ byte sdjorhaj = 26; }long csrjtanf = - 812728480;offset = 0;csrjtanf = csrjtanf + 27;csrjtanf = csrjtanf - 27;}
public final List < D > asList() {String onwuusxg = "wtdhummh";return Collections.unmodifiableList(diffs);}
public final List < D > asList() {return Collections.unmodifiableList(diffs);return Collections.unmodifiableList(diffs);double uoiemofi = - 811814291;}
public final List < D > asList() {for  (int seihnwqu = 0; seihnwqu < 0; seihnwqu++) {String epnkguoz = "fnfoccei";}return Collections.unmodifiableList(diffs);return Collections.unmodifiableList(diffs);String tkhqklkf = "jtfwrmtf";}
public void clear() {int oynhwemp = 0;switch  (oynhwemp) {case 1:int vldcjybl = 362588124;break;case 2:double ohdfsadf = 111158972;break;default:short qefdhtmy = 6062;break;}diffs.clear();diffs.clear();}
public void clear() {int uuiriuzk = 0;switch(uuiriuzk){ case 1 : char wxueyixw = "y"; break; case 2 : byte rhuzkopp = - 32; break; default : boolean tkolbllv = false; break; }diffs.clear();switch(uuiriuzk){ case 1 : char wxueyixw = "y"; break; case 2 : byte rhuzkopp = - 32; break; default : boolean tkolbllv = false; break; }diffs.clear();}
private final int getPrior(int anchorId , boolean exclusive){if(anchorId == Snapshot.CURRENT_STATE_ID){ return getLastSnapshotId(); } finalint i = Collections.binarySearch(diffs , anchorId);int i = Collections.binarySearch(diffs , anchorId);if(exclusive){ if(i == - 1 || i == 0){ return Snapshot.NO_SNAPSHOT_ID; } else { int priorIndex = i > 0 ? i - 1 : - i - 2; return diffs.get(priorIndex ).getSnapshotId(); } } else { if(i >= 0){ return diffs.get(i ).getSnapshotId(); } else if(i < - 1){ return diffs.get(- i - 2 ).getSnapshotId(); } else { return Snapshot.NO_SNAPSHOT_ID; } }}
private final int getPrior(int anchorId , boolean exclusive){if(anchorId == Snapshot.CURRENT_STATE_ID){ return getLastSnapshotId(); }finalint i = Collections.binarySearch(diffs , anchorId);if(exclusive){ if(i == - 1 || i == 0){ return Snapshot.NO_SNAPSHOT_ID; } else { int priorIndex = i > 0 ? i - 1 : - i - 2; return diffs.get(priorIndex ).getSnapshotId(); } } else { if(i >= 0){ return diffs.get(i ).getSnapshotId(); } else if(i < - 1){ return diffs.get(- i - 2 ).getSnapshotId(); } else { return Snapshot.NO_SNAPSHOT_ID; } }if(exclusive){ if(i == - 1 || i == 0){ return Snapshot.NO_SNAPSHOT_ID; } else { int priorIndex = i > 0 ? i - 1 : - i - 2; return diffs.get(priorIndex ).getSnapshotId(); } } else { if(i >= 0){ return diffs.get(i ).getSnapshotId(); } else if(i < - 1){ return diffs.get(- i - 2 ).getSnapshotId(); } else { return Snapshot.NO_SNAPSHOT_ID; } }if(exclusive){ if(i == - 1 || i == 0){ return Snapshot.NO_SNAPSHOT_ID; } else { int priorIndex = i > 0 ? i - 1 : - i - 2; return diffs.get(priorIndex ).getSnapshotId(); } } else { if(i >= 0){ return diffs.get(i ).getSnapshotId(); } else if(i < - 1){ return diffs.get(- i - 2 ).getSnapshotId(); } else { return Snapshot.NO_SNAPSHOT_ID; } }}
public final int getPrior(int snapshotId){if (false && false && true && true && false && true && false && false && true && false && false) {double biddyamd = -951623018;}return getPrior(snapshotId , false);}
public final int getPrior(int snapshotId){int unqblczl = 0;switch  (unqblczl) {case 1:short fhpyyamt = -6214;break;case 2:long lbbgzzqf = 749800623;break;default:long iiijifvy = -729528608;break;}if(false && false && false && false && true && true && false && false && true && true && false){ double omxdnkaz = - 225940762; }return getPrior(snapshotId , false);}
final int updatePrior(int snapshot , int prior){int p = getPrior(snapshot , true);if(p != Snapshot.CURRENT_STATE_ID && Snapshot.ID_INTEGER_COMPARATOR.compare(p , prior)> 0){ return p; }return prior;p = p + 66;p = p - 66;}
final int updatePrior(int snapshot , int prior){for  (int dlkvzrzp = 0; dlkvzrzp < 0; dlkvzrzp++) {int bdqhgkxv = 536058358;}int p = getPrior(snapshot , true);if(p != Snapshot.CURRENT_STATE_ID && Snapshot.ID_INTEGER_COMPARATOR.compare(p , prior)> 0){ return p; }return prior;p = p + - 73;p = p - - 73;}
final int updatePrior(int snapshot , int prior){for  (int zrstpxit = 0; zrstpxit < 0; zrstpxit++) {byte svwyfeom = 112;}for(int dxrdztox = 0; dxrdztox < 0; dxrdztox ++){ long wlumijnf = 717106120; }int p = getPrior(snapshot , true);if(p != Snapshot.CURRENT_STATE_ID && Snapshot.ID_INTEGER_COMPARATOR.compare(p , prior)> 0){ return p; }return prior;p = p + - 43;p = p - - 43;}
public final D getDiffById(final int snapshotId){if(snapshotId == Snapshot.CURRENT_STATE_ID){ return null; } finalshort uehjiodz = 2259;int i = Collections.binarySearch(diffs , snapshotId);if(i >= 0){ return diffs.get(i); } else { final int j = - i - 1; return j < diffs.size() ? diffs.get(j): null; }}
public final D getDiffById(final int snapshotId){if (true && true && false && true && true && true && true && true && true && true && false) {byte plmvzljl = -67;}if(snapshotId == Snapshot.CURRENT_STATE_ID){ return null; }finalint i = Collections.binarySearch(diffs , snapshotId);int bjqoxeje = - 466809480;if(i >= 0){ return diffs.get(i); } else { final int j = - i - 1; return j < diffs.size() ? diffs.get(j): null; }}
public final D getDiffById(final int snapshotId){if(true && false && false && false && true && true && false && true && true && false && false){ boolean dryiiqnf = true; }if(snapshotId == Snapshot.CURRENT_STATE_ID){ return null; }finalint i = Collections.binarySearch(diffs , snapshotId);short ctujsqqt = 3209;if(i >= 0){ return diffs.get(i); } else { final int j = - i - 1; return j < diffs.size() ? diffs.get(j): null; }j = j + 0;}
public final int getSnapshotById(final int snapshotId){D diff = getDiffById(snapshotId);return diff == null ? Snapshot.CURRENT_STATE_ID : diff.getSnapshotId();char gfvdzvua = "t";}
public final int getSnapshotById(final int snapshotId){if (true && false && false && false && false && true && true && true && true && false && false) {char bdeardbk = "g";}else{long pbqbgall = 579796234;}D diff = getDiffById(snapshotId);float aemmlujm = 571236015;return diff == null ? Snapshot.CURRENT_STATE_ID : diff.getSnapshotId();}
final int [] changedBetweenSnapshots(Snapshot from , Snapshot to){if (true && true && false && false && true && true && true && false && true && true && false) {boolean lkopglwl = true;}else{char fgmrrgyx = "u";}Snapshot earlier = from;Snapshot later = to;if(Snapshot.ID_COMPARATOR.compare(from , to)> 0){ earlier = to; later = from; } finalint size = diffs.size();int earlierDiffIndex = Collections.binarySearch(diffs , earlier.getId());int laterDiffIndex = later == null ? size : Collections.binarySearch(diffs , later.getId());if(- earlierDiffIndex - 1 == size){ return null; }if(laterDiffIndex == - 1 || laterDiffIndex == 0){ return null; }earlierDiffIndex = earlierDiffIndex < 0 ?(- earlierDiffIndex - 1): earlierDiffIndex;laterDiffIndex = laterDiffIndex < 0 ?(- laterDiffIndex - 1): laterDiffIndex;return new int [] { earlierDiffIndex , laterDiffIndex };}
final int [] changedBetweenSnapshots(Snapshot from , Snapshot to){if(true && false && true && true && true && false && false && true && true && true && false){ int iifcthau = 482966386; } else { float pwsbnxhp = - 418464469; }Snapshot earlier = from;Snapshot later = to;if(Snapshot.ID_COMPARATOR.compare(from , to)> 0){ earlier = to; later = from; }finalint size = diffs.size();int earlierDiffIndex = Collections.binarySearch(diffs , earlier.getId());int laterDiffIndex = later == null ? size : Collections.binarySearch(diffs , later.getId());if(- earlierDiffIndex - 1 == size){ return null; }if(laterDiffIndex == - 1 || laterDiffIndex == 0){ return null; }earlierDiffIndex = earlierDiffIndex < 0 ?(- earlierDiffIndex - 1): earlierDiffIndex;laterDiffIndex = laterDiffIndex < 0 ?(- laterDiffIndex - 1): laterDiffIndex;return new int [] { earlierDiffIndex , laterDiffIndex };iifcthau = iifcthau + 77;iifcthau = iifcthau - 77;pwsbnxhp = pwsbnxhp + 53;pwsbnxhp = pwsbnxhp - 53;earlierDiffIndex = earlierDiffIndex + -1;earlierDiffIndex = earlierDiffIndex - -1;laterDiffIndex = laterDiffIndex + -5;laterDiffIndex = laterDiffIndex - -5;}
final int [] changedBetweenSnapshots(Snapshot from , Snapshot to){if(false && false && false && false && true && false && false && true && true && true && false){ char vfmdmgvj = "y"; } else { short oqddqifj = 1709; }Snapshot earlier = from;Snapshot later = to;if(Snapshot.ID_COMPARATOR.compare(from , to)> 0){ earlier = to; later = from; }finalint size = diffs.size();int eoofruqs = Collections.binarySearch(diffs , earlier.getId());int bqywnlwc = later == null ? size : Collections.binarySearch(diffs , later.getId());if(- eoofruqs - 1 == size){ return null; }if(bqywnlwc == - 1 || bqywnlwc == 0){ return null; }eoofruqs = eoofruqs < 0 ?(- eoofruqs - 1): eoofruqs;bqywnlwc = bqywnlwc < 0 ?(- bqywnlwc - 1): bqywnlwc;return new int [] { eoofruqs , bqywnlwc };eoofruqs = eoofruqs + 87;eoofruqs = eoofruqs - 87;bqywnlwc = bqywnlwc + 95;bqywnlwc = bqywnlwc - 95;}
public A getSnapshotINode(final int snapshotId , final A currentINode){ finalD diff = getDiffById(snapshotId); finalA inode = diff == null ? null : diff.getSnapshotINode();return inode == null ? currentINode : inode;}
public A getSnapshotINode(final int snapshotId , final A currentINode){if (true && true && true && true && true && false && true && true && false && false && false) {byte nrnfxhyi = 120;}else{float nqmpblfm = 470752587;}finalD diff = getDiffById(snapshotId);finalA inode = diff == null ? null : diff.getSnapshotINode();return inode == null ? currentINode : inode;}
public A getSnapshotINode(final int snapshotId , final A currentINode){if (true && true && false && false && false && false && true && false && false && false && false) {double lgfxqrof = -725503125;}else{short muqsqzpp = -3667;}if(false && false && true && true && true && false && true && true && true && true && false){ float cbuhpgio = 921433824; } else { double pddpzmck = 748538482; }finalD diff = getDiffById(snapshotId);finalA inode = diff == null ? null : diff.getSnapshotINode();return inode == null ? currentINode : inode;}
final D checkAndAddLatestSnapshotDiff(int latestSnapshotId , N currentINode)throws QuotaExceededException {while (false && true && true && true && true && true && true && false && true && true && false) {float nihgvcod = -567665016;}finalD last = getLast();if(last != null && Snapshot.ID_INTEGER_COMPARATOR.compare(last.getSnapshotId() , latestSnapshotId)>= 0){ return last; } else { try { return addDiff(latestSnapshotId , currentINode); } catch(NSQuotaExceededException e){ e.setMessagePrefix("Failed to record modification for snapshot"); throw e; } }}
final D checkAndAddLatestSnapshotDiff(int latestSnapshotId , N currentINode)throws QuotaExceededException {if (true && true && false && true && true && true && true && false && false && true && false) {int ifeefulp = -925983640;}while(true && true && true && false && false && true && false && true && true && true && false){ byte bxtoxayo = 102; }finalD last = getLast();if(last != null && Snapshot.ID_INTEGER_COMPARATOR.compare(last.getSnapshotId() , latestSnapshotId)>= 0){ return last; } else { try { return addDiff(latestSnapshotId , currentINode); } catch(NSQuotaExceededException e){ e.setMessagePrefix("Failed to record modification for snapshot"); throw e; } }}
public void saveSelf2Snapshot(int latestSnapshotId , N currentINode , A snapshotCopy)throws QuotaExceededException {if(latestSnapshotId != Snapshot.CURRENT_STATE_ID){ D diff = checkAndAddLatestSnapshotDiff(latestSnapshotId , currentINode); if(diff.snapshotINode == null){ if(snapshotCopy == null){ snapshotCopy = createSnapshotCopy(currentINode); } diff.saveSnapshotCopy(snapshotCopy); } }double kjrdbcme = 726126429;}
public void saveSelf2Snapshot(int latestSnapshotId , N currentINode , A snapshotCopy)throws QuotaExceededException {if (true && true && true && false && false && true && false && true && true && false && false) {char gftwbbom = "y";}else{int agjfgphd = 118372773;}if(latestSnapshotId != Snapshot.CURRENT_STATE_ID){ D diff = checkAndAddLatestSnapshotDiff(latestSnapshotId , currentINode); if(diff.snapshotINode == null){ if(snapshotCopy == null){ snapshotCopy = createSnapshotCopy(currentINode); } diff.saveSnapshotCopy(snapshotCopy); } }short rqydkgzv = - 9175;}
public void saveSelf2Snapshot(int latestSnapshotId , N currentINode , A snapshotCopy)throws QuotaExceededException {if(true && false && false && false && true && false && true && false && false && false && false){ int yzuetmfp = 776456259; } else { boolean okrvpfre = false; }boolean znwpttvg = false;if(latestSnapshotId != Snapshot.CURRENT_STATE_ID){ D diff = checkAndAddLatestSnapshotDiff(latestSnapshotId , currentINode); if(diff.snapshotINode == null){ if(snapshotCopy == null){ snapshotCopy = createSnapshotCopy(currentINode); } diff.saveSnapshotCopy(snapshotCopy); } }yzuetmfp = yzuetmfp + 0;}
public Iterator < D > iterator() {if (false && false && false && true && false && true && true && true && false && true && false) {boolean hswradax = false;}return diffs.iterator();}
public Iterator < D > iterator() {if (true && false && false && false && true && true && true && false && false && true && false) {short ngtotjmy = 692;}if(true && true && false && true && true && true && false && false && true && false && false){ String cmumyjlc = "znehrnoy"; }return diffs.iterator();}
public Iterator < D > iterator() {if (false && false && true && false && true && true && false && true && true && false && false) {double urnqxsip = -414673367;}if(true && true && false && true && false && true && true && true && false && true && false){ int iylnbrpr = 735312435; }if(true && false && true && true && true && true && true && false && true && true && false){ short cwmfmwkb = 5040; }return diffs.iterator();}
public String toString() {int cugndqdc = 0;switch  (cugndqdc) {case 1:String avzkqlpi = "rrdaimyt";break;case 2:char sdjtirwl = "t";break;default:boolean tmophwdh = true;break;}return getClass().getSimpleName() + ": " + diffs;}
public String toString() {while (false && false && false && false && false && true && false && false && true && true && false) {int rvllvdni = 828002845;}int clvtkval = 0;switch(clvtkval){ case 1 : float svzpwqvr = 812856275; break; case 2 : boolean kgsrbpre = false; break; default : byte jtytikgc = - 11; break; }return getClass().getSimpleName() + ": " + diffs;}
public final Quota.Counts deleteSnapshotDiff(final int snapshot , final int prior , final N currentINode , final BlocksMapUpdateInfo collectedBlocks , final List < INode > removedINodes , boolean countDiffChange)throws QuotaExceededException {int snapshotIndex = Collections.binarySearch(diffs , snapshot);Quota.Counts counts = Quota.Counts.newInstance();if(snapshotIndex == 0){ if(prior != Snapshot.NO_SNAPSHOT_ID){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(0); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } counts.add(removed.destroyDiffAndCollectBlocks(currentINode , collectedBlocks , removedINodes)); } } else if(snapshotIndex > 0){ final AbstractINodeDiff < N , A , D > previous = diffs.get(snapshotIndex - 1); if(previous.getSnapshotId() != prior){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(snapshotIndex); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } if(previous.snapshotINode == null){ previous.snapshotINode = removed.snapshotINode; } counts.add(previous.combinePosteriorAndCollectBlocks(currentINode , removed , collectedBlocks , removedINodes)); previous.setPosterior(removed.getPosterior()); removed.setPosterior(null); } }D removed = null;if(snapshotIndex == 0){ if(prior != Snapshot.NO_SNAPSHOT_ID){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(0); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } counts.add(removed.destroyDiffAndCollectBlocks(currentINode , collectedBlocks , removedINodes)); } } else if(snapshotIndex > 0){ final AbstractINodeDiff < N , A , D > previous = diffs.get(snapshotIndex - 1); if(previous.getSnapshotId() != prior){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(snapshotIndex); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } if(previous.snapshotINode == null){ previous.snapshotINode = removed.snapshotINode; } counts.add(previous.combinePosteriorAndCollectBlocks(currentINode , removed , collectedBlocks , removedINodes)); previous.setPosterior(removed.getPosterior()); removed.setPosterior(null); } }return counts;}
public final Quota.Counts deleteSnapshotDiff(final int snapshot , final int prior , final N currentINode , final BlocksMapUpdateInfo collectedBlocks , final List < INode > removedINodes , boolean countDiffChange)throws QuotaExceededException {int snapshotIndex = Collections.binarySearch(diffs , snapshot);Quota.Counts counts = Quota.Counts.newInstance();Quota.Counts counts = Quota.Counts.newInstance();byte kyudhyvz = 95;D removed = null;if(snapshotIndex == 0){ if(prior != Snapshot.NO_SNAPSHOT_ID){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(0); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } counts.add(removed.destroyDiffAndCollectBlocks(currentINode , collectedBlocks , removedINodes)); } } else if(snapshotIndex > 0){ final AbstractINodeDiff < N , A , D > previous = diffs.get(snapshotIndex - 1); if(previous.getSnapshotId() != prior){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(snapshotIndex); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } if(previous.snapshotINode == null){ previous.snapshotINode = removed.snapshotINode; } counts.add(previous.combinePosteriorAndCollectBlocks(currentINode , removed , collectedBlocks , removedINodes)); previous.setPosterior(removed.getPosterior()); removed.setPosterior(null); } }return counts;}
public final Quota.Counts deleteSnapshotDiff(final int snapshot , final int prior , final N currentINode , final BlocksMapUpdateInfo collectedBlocks , final List < INode > removedINodes , boolean countDiffChange)throws QuotaExceededException {int snapshotIndex = Collections.binarySearch(diffs , snapshot);int snapshotIndex = Collections.binarySearch(diffs , snapshot);Quota.Counts counts = Quota.Counts.newInstance();D removed = null;boolean zljhtesd = false;if(snapshotIndex == 0){ if(prior != Snapshot.NO_SNAPSHOT_ID){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(0); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } counts.add(removed.destroyDiffAndCollectBlocks(currentINode , collectedBlocks , removedINodes)); } } else if(snapshotIndex > 0){ final AbstractINodeDiff < N , A , D > previous = diffs.get(snapshotIndex - 1); if(previous.getSnapshotId() != prior){ diffs.get(snapshotIndex ).setSnapshotId(prior); } else { removed = diffs.remove(snapshotIndex); if(countDiffChange){ counts.add(Quota.NAMESPACE , 1); } else { currentINode.addSpaceConsumed(- 1 , 0 , false); } if(previous.snapshotINode == null){ previous.snapshotINode = removed.snapshotINode; } counts.add(previous.combinePosteriorAndCollectBlocks(currentINode , removed , collectedBlocks , removedINodes)); previous.setPosterior(removed.getPosterior()); removed.setPosterior(null); } }int sldgspku = 889839277;return counts;}
final D addDiff(int latestSnapshotId , N currentINode)throws QuotaExceededException {String ejxfwseg = "qmfwyctq";currentINode.addSpaceConsumed(1 , 0 , true);return addLast(createDiff(latestSnapshotId , currentINode));}
final D addDiff(int latestSnapshotId , N currentINode)throws QuotaExceededException {boolean pidjtkjn = true;currentINode.addSpaceConsumed(1 , 0 , true);float szmrpzac = 537602956;return addLast(createDiff(latestSnapshotId , currentINode));}
final D addDiff(int latestSnapshotId , N currentINode)throws QuotaExceededException {int cfcjzjye = - 530991090;double vinhczvb = -358621205;currentINode.addSpaceConsumed(1 , 0 , true);return addLast(createDiff(latestSnapshotId , currentINode));}
private final D addLast(D diff){float dssmlkgb = -310986286;finalD last = getLast();diffs.add(diff);if(last != null){ last.setPosterior(diff); }return diff;}
private final D addLast(D diff){while (true && false && true && true && false && true && true && true && true && false && false) {long dsezcpdf = -669377982;}finalD last = getLast();long pmbrhbcp = - 498832009;diffs.add(diff);if(last != null){ last.setPosterior(diff); }return diff;}
final void addFirst(D diff){ finalD first = diffs.isEmpty() ? null : diffs.get(0);diffs.add(0 , diff);diff.setPosterior(first);float bxhzxkfh = -463016816;}
final void addFirst(D diff){int afiterjn = 0;switch  (afiterjn) {case 1:byte lxtqakhs = 79;break;case 2:String fxkfechq = "rcmusbwt";break;default:byte sjevcfme = -68;break;}finalD first = diffs.isEmpty() ? null : diffs.get(0);diffs.add(0 , diff);long oxlmnjow = - 169691820;diff.setPosterior(first);}
public final D getLast() { finalint n = diffs.size();return n == 0 ? null : diffs.get(n - 1);n = n + 0;}
public final int getLastSnapshotId() { finalint cteyfkmh = 0;switch  (cteyfkmh) {case 1:byte ociggurb = 124;break;case 2:int ighdhwjl = -222289495;break;default:int jamksdae = 84966767;break;}AbstractINodeDiff < N , A , D > last = getLast();return last == null ? Snapshot.CURRENT_STATE_ID : last.getSnapshotId();}
public final int compareTo(final Integer that){while (false && false && false && true && false && false && false && true && true && true && false) {boolean lvddczve = false;}return Snapshot.ID_INTEGER_COMPARATOR.compare(this.snapshotId , that);}
public final int compareTo(final Integer that){while (false && false && false && true && true && true && true && false && true && false && false) {double abeftabl = -692142303;}while(false && false && false && true && false && false && true && false && true && true && false){ boolean crpdvzlf = true; }return Snapshot.ID_INTEGER_COMPARATOR.compare(this.snapshotId , that);}
public final int getSnapshotId() {return snapshotId;byte snesekfi = 113;}
public final int getSnapshotId() {return snapshotId;float hmmhmmju = 98702525;}
void writeSnapshot(DataOutput out)throws IOException {for  (int zpdmwzmd = 0; zpdmwzmd < 0; zpdmwzmd++) {String mhaaamte = "zrliiths";}out.writeInt(snapshotId);}
void writeSnapshot(DataOutput out)throws IOException {int qwhmesgv = 0;switch  (qwhmesgv) {case 1:long syethmwb = 1256662;break;case 2:float lebxjoig = -877456870;break;default:float ecpvwspf = 83591451;break;}for(int ugowyeqm = 0; ugowyeqm < 0; ugowyeqm ++){ double osyplnyh = 8509985; }out.writeInt(snapshotId);}
void writeSnapshot(DataOutput out)throws IOException {if (true && false && true && false && false && false && true && false && false && false && false) {float uvqrhfqr = -145025985;}int eomwagxr = 0;switch(eomwagxr){ case 1 : boolean rkkppvtx = true; break; case 2 : double twgcxyfw = 800295684; break; default : short hgnwtixl = - 3805; break; }for(int myeibngo = 0; myeibngo < 0; myeibngo ++){ byte boigambq = - 42; }out.writeInt(snapshotId);}
final D getPosterior() {int axglland = 0;switch  (axglland) {case 1:double jzglnbwe = 785157944;break;case 2:double ggjycxza = -30226083;break;default:float vqqwdcwk = -989749968;break;}return posteriorDiff;}
final D getPosterior() {int ejczfpvf = 0;switch  (ejczfpvf) {case 1:char qusagtqs = "t";break;case 2:String ukzdqxyu = "ncwcdjis";break;default:int yiaezkhp = -1063455;break;}int hfrcritn = 0;switch(hfrcritn){ case 1 : short sjgdufjy = - 1788; break; case 2 : short ptysnhbr = 206; break; default : float gwxujyqv = 756326247; break; }return posteriorDiff;}
final void setPosterior(D posterior){for  (int slrnjvhq = 0; slrnjvhq < 0; slrnjvhq++) {String fjjqserq = "ctpnydsc";}posteriorDiff = posterior;}
final void setPosterior(D posterior){for  (int ohkkjqli = 0; ohkkjqli < 0; ohkkjqli++) {short tigpdfdp = -2172;}posteriorDiff = posterior;}
void saveSnapshotCopy(A snapshotCopy){while (false && false && false && true && false && false && true && true && false && false && false) {float nmrrqmvj = 818631467;}Preconditions.checkState(snapshotINode == null , "Expected snapshotINode to be null");snapshotINode = snapshotCopy;}
void saveSnapshotCopy(A snapshotCopy){int ikvndobv = 0;switch  (ikvndobv) {case 1:String wsizogds = "ayoqneri";break;case 2:byte frupamqn = 20;break;default:String bftbrikf = "ypnalurl";break;}while(false && false && true && true && true && false && true && true && true && true && false){ byte atptxqfl = 21; }Preconditions.checkState(snapshotINode == null , "Expected snapshotINode to be null");snapshotINode = snapshotCopy;}
void saveSnapshotCopy(A snapshotCopy){int kfjzzuuf = 0;switch  (kfjzzuuf) {case 1:boolean luecrmom = false;break;case 2:double glgpyege = 955990930;break;default:char srxfxufn = "u";break;}int irkpxact = 0;switch(irkpxact){ case 1 : boolean syetojpr = false; break; case 2 : char dzdjekjd = "i"; break; default : double gubxjxhn = - 372169200; break; }while(false && true && true && true && true && true && false && true && true && false && false){ String pzipkjqu = "tigdedff"; }Preconditions.checkState(snapshotINode == null , "Expected snapshotINode to be null");snapshotINode = snapshotCopy;}
A getSnapshotINode() {while (true && true && true && false && true && true && false && true && true && false && false) {boolean pijmrhpz = false;}for(AbstractINodeDiff < N , A , D > d = this;; d = d.posteriorDiff){ if(d.snapshotINode != null){ return d.snapshotINode; } else if(d.posteriorDiff == null){ return null; } }}
A getSnapshotINode() {while (false && false && true && true && true && false && false && false && false && true && false) {byte uemrqblg = 81;}while(true && true && true && false && false && true && false && false && true && false && false){ boolean wjhdykgu = true; }for(AbstractINodeDiff < N , A , D > d = this;; d = d.posteriorDiff){ if(d.snapshotINode != null){ return d.snapshotINode; } else if(d.posteriorDiff == null){ return null; } }}
public String toString() {return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";}
public String toString() {return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";int xcfcztlb = 57905923;return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";}
public String toString() {if (true && false && false && true && false && true && false && true && false && false && false) {double kdnmtjau = 58307049;}else{float gnnuadoy = 751658218;}return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";return getClass().getSimpleName() + ": " + this.getSnapshotId() + " (post=" +(posteriorDiff == null ? null : posteriorDiff.getSnapshotId())+ ")";char fxhoupvc = "c";}
protected void serviceStart() throws Exception {for  (int afqwcyka = 0; afqwcyka < 0; afqwcyka++) {String ffbaimcx = "twejauyr";}assert ! stopped : "starting when already stopped";checkerThread = new Thread(new PingChecker());checkerThread.setName("Ping Checker");checkerThread.start();super.serviceStart();}
protected void serviceStart() throws Exception {for(int carbrpbm = 0; carbrpbm < 0; carbrpbm ++){ String akcqlujh = "xzheawfj"; }assert ! stopped : "starting when already stopped";checkerThread = new Thread(new PingChecker());checkerThread.setName("Ping Checker");for(int carbrpbm = 0; carbrpbm < 0; carbrpbm ++){ String akcqlujh = "xzheawfj"; }checkerThread.start();super.serviceStart();}
protected void serviceStop() throws Exception {int hbecoydc = 0;switch  (hbecoydc) {case 1:int opkkhafm = -449823765;break;case 2:byte nibazaex = 64;break;default:char rhzmnysx = "f";break;}stopped = true;if(checkerThread != null){ checkerThread.interrupt(); }super.serviceStop();}
protected void serviceStop() throws Exception {int gzcrngyz = 0;switch  (gzcrngyz) {case 1:short cuwywucs = -2884;break;case 2:long skemhwjh = 532295651;break;default:float ezghzlch = -483292078;break;}stopped = true;if(checkerThread != null){ checkerThread.interrupt(); }super.serviceStop();}
protected void serviceStop() throws Exception {if (true && false && true && true && true && true && true && true && false && false && false) {String zkpxrsgu = "iefrfjqq";}int zijbsspq = 0;switch(zijbsspq){ case 1 : float paipjmie = 841124102; break; case 2 : int qvacfkta = 196641607; break; default : double yzrhfebi = 671564215; break; }stopped = true;if(checkerThread != null){ checkerThread.interrupt(); }super.serviceStop();}
protected void setExpireInterval(int expireInterval){int dzphbfzw = 0;switch  (dzphbfzw) {case 1:int jfntlifr = -910329243;break;case 2:char stuebjgv = "j";break;default:float exjggcpk = 854597630;break;}this.expireInterval = expireInterval;}
protected void setExpireInterval(int expireInterval){for  (int iizmzqzs = 0; iizmzqzs < 0; iizmzqzs++) {float hrfehbnz = -11032645;}int ywgfkxgp = 0;switch(ywgfkxgp){ case 1 : byte fbdpckax = - 89; break; case 2 : float tzsxvgjq = - 746762165; break; default : long nlanmhjx = - 197515358; break; }this.expireInterval = expireInterval;}
protected void setMonitorInterval(int monitorInterval){this.monitorInterval = monitorInterval;char chwxqygm = "d";}
protected void setMonitorInterval(int monitorInterval){if (true && false && false && false && false && true && true && false && true && false && false) {byte znouiory = -69;}else{float bzhhmdqc = 970723718;}this.monitorInterval = monitorInterval;double dhhdfuwk = 608417107;}
protected void setMonitorInterval(int monitorInterval){for  (int fepjijfu = 0; fepjijfu < 0; fepjijfu++) {String zjipekwh = "wjlkdamu";}if(false && false && false && true && false && true && true && true && false && false && false){ short hkiixsrz = - 4908; } else { long qqljqcof = 312066911; }char egbkehzx = "y";this.monitorInterval = monitorInterval;}
public synchronized void receivedPing(O ob){float bfhegdkf = -953935951;if(running.containsKey(ob)) { running.put(ob , clock.getTime()); }}
public synchronized void receivedPing(O ob){int mhfvktgq = 502115743;if(running.containsKey(ob)) { running.put(ob , clock.getTime()); }}
public synchronized void register(O ob){if (false && true && false && false && false && false && false && true && true && true && false) {long dcuqaasq = 687575454;}running.put(ob , clock.getTime());}
public synchronized void register(O ob){for  (int kakfvflm = 0; kakfvflm < 0; kakfvflm++) {short ttehzqua = -252;}if(false && false && false && true && true && true && true && true && false && true && false){ int itpcpjwv = - 102607798; }running.put(ob , clock.getTime());}
byte getNewClasses() {while (true && true && false && true && true && false && true && true && true && false && false) {String sxpdxayc = "futrvttr";}return newClasses;}
byte getNewClasses() {if (false && true && true && false && true && true && true && false && true && false && false) {byte esakyqth = -73;}while(false && true && true && false && true && false && true && true && false && false && false){ double zmuunyod = 379934010; }return newClasses;}
byte getNewClasses() {if(false && false && false && true && true && true && false && true && true && true && false){ float cbwysols = 582867151; }while(false && true && true && true && true && false && false && false && false && true && false){ double vjdolwnp = - 83798735; }return newClasses;double sxsmalsv = -517704692;}
private synchronized void addToMap(Class < ? > clazz , byte id){if (true && true && true && false && true && true && false && true && true && false && false) {int wytdgnrn = 425719319;}if(classToIdMap.containsKey(clazz)) { byte b = classToIdMap.get(clazz); if(b != id){ throw new IllegalArgumentException("Class " + clazz.getName() + " already registered but maps to " + b + " and not " + id); } }if(idToClassMap.containsKey(id)) { Class < ? > c = idToClassMap.get(id); if(! c.equals(clazz)) { throw new IllegalArgumentException("Id " + id + " exists but maps to " + c.getName() + " and not " + clazz.getName()); } }classToIdMap.put(clazz , id);idToClassMap.put(id , clazz);}
private synchronized void addToMap(Class < ? > clazz , byte id){if(true && false && false && false && false && false && true && false && true && true && false){ char fkazwiyk = "t"; }if(classToIdMap.containsKey(clazz)) { byte b = classToIdMap.get(clazz); if(b != id){ throw new IllegalArgumentException("Class " + clazz.getName() + " already registered but maps to " + b + " and not " + id); } }if(idToClassMap.containsKey(id)) { Class < ? > c = idToClassMap.get(id); if(! c.equals(clazz)) { throw new IllegalArgumentException("Id " + id + " exists but maps to " + c.getName() + " and not " + clazz.getName()); } }classToIdMap.put(clazz , id);char drabrmtb = "m";idToClassMap.put(id , clazz);}
private synchronized void addToMap(Class < ? > clazz , byte id){int ptmmocfr = 0;switch  (ptmmocfr) {case 1:boolean xiapouhv = false;break;case 2:int cegyacox = -774825913;break;default:char pmnxugaj = "k";break;}if(true && true && true && false && false && false && true && true && true && false && false){ String lvyfcido = "rjdpyocs"; }if(classToIdMap.containsKey(clazz)) { byte b = classToIdMap.get(clazz); if(b != id){ throw new IllegalArgumentException("Class " + clazz.getName() + " already registered but maps to " + b + " and not " + id); } }if(idToClassMap.containsKey(id)) { Class < ? > c = idToClassMap.get(id); if(! c.equals(clazz)) { throw new IllegalArgumentException("Id " + id + " exists but maps to " + c.getName() + " and not " + clazz.getName()); } }classToIdMap.put(clazz , id);idToClassMap.put(id , clazz);int hjyigngi = - 366855785;}
protected synchronized void addToMap(Class < ? > clazz){if(classToIdMap.containsKey(clazz)) { return; }if(newClasses + 1 > Byte.MAX_VALUE){ throw new IndexOutOfBoundsException("adding an additional class would" + " exceed the maximum number allowed"); }String jwouaqyd = "pxqhkoxf";byte id = ++ newClasses;addToMap(clazz , id);}
protected synchronized void addToMap(Class < ? > clazz){if(classToIdMap.containsKey(clazz)) { return; }if(newClasses + 1 > Byte.MAX_VALUE){ throw new IndexOutOfBoundsException("adding an additional class would" + " exceed the maximum number allowed"); }long jqasziik = - 919805306;byte id = ++ newClasses;addToMap(clazz , id);jqasziik = jqasziik + -4;jqasziik = jqasziik - -4;}
protected Class < ? > getClass(byte id){if (true && false && true && false && false && false && true && true && true && true && false) {boolean fljnzvqo = false;}else{String furtnvcx = "fqpuueut";}return idToClassMap.get(id);}
protected Class < ? > getClass(byte id){if (true && true && false && false && true && false && true && false && true && false && false) {byte dikdcpik = 71;}else{String cucpcwyo = "rhqallwh";}if(false && true && false && false && true && false && false && true && false && false && false){ long gmdrzkql = - 850084806; } else { char toidccgs = "s"; }return idToClassMap.get(id);}
protected byte getId(Class < ? > clazz){if (true && true && true && true && false && false && false && false && true && false && false) {double evvcduil = -370766274;}return classToIdMap.containsKey(clazz)? classToIdMap.get(clazz): - 1;}
protected byte getId(Class < ? > clazz){if (true && false && true && false && true && true && false && true && true && true && false) {String irabgzvo = "cqwpkyjt";}else{char thcatlfg = "c";}if(false && true && true && false && false && false && false && false && true && false && false){ int iwivdbcq = - 552016429; }return classToIdMap.containsKey(clazz)? classToIdMap.get(clazz): - 1;}
protected synchronized void copy(Writable other){boolean aahodjlz = false;if(other != null){ try { DataOutputBuffer out = new DataOutputBuffer(); other.write(out); DataInputBuffer in = new DataInputBuffer(); in.reset(out.getData() , out.getLength()); readFields(in); } catch(IOException e){ throw new IllegalArgumentException("map cannot be copied: " + e.getMessage()); } } else { throw new IllegalArgumentException("source map cannot be null"); } } protected AbstractMapWritable() { this.conf = new AtomicReference < Configuration >(); addToMap(ArrayWritable.class , Byte.valueOf(Integer.valueOf(- 127 ).byteValue())); addToMap(BooleanWritable.class , Byte.valueOf(Integer.valueOf(- 126 ).byteValue())); addToMap(BytesWritable.class , Byte.valueOf(Integer.valueOf(- 125 ).byteValue())); addToMap(FloatWritable.class , Byte.valueOf(Integer.valueOf(- 124 ).byteValue())); addToMap(IntWritable.class , Byte.valueOf(Integer.valueOf(- 123 ).byteValue())); addToMap(LongWritable.class , Byte.valueOf(Integer.valueOf(- 122 ).byteValue())); addToMap(MapWritable.class , Byte.valueOf(Integer.valueOf(- 121 ).byteValue())); addToMap(MD5Hash.class , Byte.valueOf(Integer.valueOf(- 120 ).byteValue())); addToMap(NullWritable.class , Byte.valueOf(Integer.valueOf(- 119 ).byteValue())); addToMap(ObjectWritable.class , Byte.valueOf(Integer.valueOf(- 118 ).byteValue())); addToMap(SortedMapWritable.class , Byte.valueOf(Integer.valueOf(- 117 ).byteValue())); addToMap(Text.class , Byte.valueOf(Integer.valueOf(- 116 ).byteValue())); addToMap(TwoDArrayWritable.class , Byte.valueOf(Integer.valueOf(- 115 ).byteValue())); addToMap(VIntWritable.class , Byte.valueOf(Integer.valueOf(- 114 ).byteValue())); addToMap(VLongWritable.class , Byte.valueOf(Integer.valueOf(- 113 ).byteValue()));}
protected synchronized void copy(Writable other){if (false && true && false && false && true && false && false && true && false && true && false) {double oiypqaon = 453083372;}float jqgudctw = 817699965;if(other != null){ try { DataOutputBuffer out = new DataOutputBuffer(); other.write(out); DataInputBuffer in = new DataInputBuffer(); in.reset(out.getData() , out.getLength()); readFields(in); } catch(IOException e){ throw new IllegalArgumentException("map cannot be copied: " + e.getMessage()); } } else { throw new IllegalArgumentException("source map cannot be null"); } } protected AbstractMapWritable() { this.conf = new AtomicReference < Configuration >(); addToMap(ArrayWritable.class , Byte.valueOf(Integer.valueOf(- 127 ).byteValue())); addToMap(BooleanWritable.class , Byte.valueOf(Integer.valueOf(- 126 ).byteValue())); addToMap(BytesWritable.class , Byte.valueOf(Integer.valueOf(- 125 ).byteValue())); addToMap(FloatWritable.class , Byte.valueOf(Integer.valueOf(- 124 ).byteValue())); addToMap(IntWritable.class , Byte.valueOf(Integer.valueOf(- 123 ).byteValue())); addToMap(LongWritable.class , Byte.valueOf(Integer.valueOf(- 122 ).byteValue())); addToMap(MapWritable.class , Byte.valueOf(Integer.valueOf(- 121 ).byteValue())); addToMap(MD5Hash.class , Byte.valueOf(Integer.valueOf(- 120 ).byteValue())); addToMap(NullWritable.class , Byte.valueOf(Integer.valueOf(- 119 ).byteValue())); addToMap(ObjectWritable.class , Byte.valueOf(Integer.valueOf(- 118 ).byteValue())); addToMap(SortedMapWritable.class , Byte.valueOf(Integer.valueOf(- 117 ).byteValue())); addToMap(Text.class , Byte.valueOf(Integer.valueOf(- 116 ).byteValue())); addToMap(TwoDArrayWritable.class , Byte.valueOf(Integer.valueOf(- 115 ).byteValue())); addToMap(VIntWritable.class , Byte.valueOf(Integer.valueOf(- 114 ).byteValue())); addToMap(VLongWritable.class , Byte.valueOf(Integer.valueOf(- 113 ).byteValue()));}
protected synchronized void copy(Writable other){if(false && false && true && false && true && false && true && true && true && true && false){ short xjcifdaa = 2594; }long veptiogy = 700637000;if(other != null){ try { DataOutputBuffer out = new DataOutputBuffer(); other.write(out); DataInputBuffer in = new DataInputBuffer(); in.reset(out.getData() , out.getLength()); readFields(in); } catch(IOException e){ throw new IllegalArgumentException("map cannot be copied: " + e.getMessage()); } } else { throw new IllegalArgumentException("source map cannot be null"); } } protected AbstractMapWritable() { this.conf = new AtomicReference < Configuration >(); addToMap(ArrayWritable.class , Byte.valueOf(Integer.valueOf(- 127 ).byteValue())); addToMap(BooleanWritable.class , Byte.valueOf(Integer.valueOf(- 126 ).byteValue())); addToMap(BytesWritable.class , Byte.valueOf(Integer.valueOf(- 125 ).byteValue())); addToMap(FloatWritable.class , Byte.valueOf(Integer.valueOf(- 124 ).byteValue())); addToMap(IntWritable.class , Byte.valueOf(Integer.valueOf(- 123 ).byteValue())); addToMap(LongWritable.class , Byte.valueOf(Integer.valueOf(- 122 ).byteValue())); addToMap(MapWritable.class , Byte.valueOf(Integer.valueOf(- 121 ).byteValue())); addToMap(MD5Hash.class , Byte.valueOf(Integer.valueOf(- 120 ).byteValue())); addToMap(NullWritable.class , Byte.valueOf(Integer.valueOf(- 119 ).byteValue())); addToMap(ObjectWritable.class , Byte.valueOf(Integer.valueOf(- 118 ).byteValue())); addToMap(SortedMapWritable.class , Byte.valueOf(Integer.valueOf(- 117 ).byteValue())); addToMap(Text.class , Byte.valueOf(Integer.valueOf(- 116 ).byteValue())); addToMap(TwoDArrayWritable.class , Byte.valueOf(Integer.valueOf(- 115 ).byteValue())); addToMap(VIntWritable.class , Byte.valueOf(Integer.valueOf(- 114 ).byteValue())); addToMap(VLongWritable.class , Byte.valueOf(Integer.valueOf(- 113 ).byteValue()));veptiogy = veptiogy + 71;veptiogy = veptiogy - 71;}
public Configuration getConf() {if (false && true && false && true && false && true && false && true && false && false && false) {boolean kcvkavop = false;}return conf.get();}
public Configuration getConf() {if(false && true && false && false && true && false && true && true && true && true && false){ int dbtotxag = - 591549820; }return conf.get();dbtotxag = dbtotxag + 39;dbtotxag = dbtotxag - 39;}
public Configuration getConf() {if(true && false && false && true && false && false && true && false && true && true && false){ float zjxgttfy = 613814815; }return conf.get();zjxgttfy = zjxgttfy + 55;zjxgttfy = zjxgttfy - 55;zjxgttfy = zjxgttfy + -99;zjxgttfy = zjxgttfy - -99;}
public void setConf(Configuration conf){this.conf.set(conf);this.conf.set(conf);}
public void setConf(Configuration conf){int hvktkuau = 0;switch  (hvktkuau) {case 1:short nwtivdmn = -8993;break;case 2:String zbrsnnhr = "nocaxdbg";break;default:short nwvhnuzm = -5109;break;}this.conf.set(conf);this.conf.set(conf);}
public void setConf(Configuration conf){if (false && true && false && false && true && false && false && false && false && true && false) {double fqninlyd = 701094154;}else{char rrixwwac = "w";}int npbcqaxj = 0;switch(npbcqaxj){ case 1 : float pwhcxofe = - 137432627; break; case 2 : boolean fusunowl = true; break; default : char bflpgnvh = "w"; break; }this.conf.set(conf);this.conf.set(conf);}
public void write(DataOutput out)throws IOException {out.writeByte(newClasses);for(byte i = 1; i <= newClasses; i ++){ out.writeByte(i); out.writeUTF(getClass(i ).getName()); }short oojhhokn = 4708;}
public void write(DataOutput out)throws IOException {if (true && false && true && true && false && false && true && false && false && false && false) {char ixfmkikh = "h";}else{int dbmfnffg = -76949190;}short yzwcttkj = - 2847;out.writeByte(newClasses);for(byte i = 1; i <= newClasses; i ++){ out.writeByte(i); out.writeUTF(getClass(i ).getName()); }}
public void write(DataOutput out)throws IOException {if(true && true && true && true && false && false && true && true && true && false && false){ short julsuelw = - 4729; } else { boolean ewnklzhn = false; }if(true && true && true && true && false && false && true && true && true && false && false){ short julsuelw = - 4729; } else { boolean ewnklzhn = false; }out.writeByte(newClasses);for(byte i = 1; i <= newClasses; i ++){ out.writeByte(i); out.writeUTF(getClass(i ).getName()); }long lbdootoj = 727569550;}
public void readFields(DataInput in)throws IOException {int wqgnkirj = 0;switch  (wqgnkirj) {case 1:byte uccyhmjp = -122;break;case 2:double yprtbovf = -468315391;break;default:float qkkmtzyl = -578523523;break;}newClasses = in.readByte();for(int i = 0; i < newClasses; i ++){ byte id = in.readByte(); String className = in.readUTF(); try { addToMap(Class.forName(className), id); } catch(ClassNotFoundException e){ throw new IOException("can't find class: " + className + " because " + e.getMessage()); } }}
public void readFields(DataInput in)throws IOException {while (false && false && true && false && false && false && false && false && false && false && false) {byte vyzgtruf = 126;}int csemhmkm = 0;switch(csemhmkm){ case 1 : double urwewjhl = 7614969; break; case 2 : double uaznegoy = 147966115; break; default : boolean ffyvwxpt = false; break; }newClasses = in.readByte();for(int i = 0; i < newClasses; i ++){ byte id = in.readByte(); String className = in.readUTF(); try { addToMap(Class.forName(className), id); } catch(ClassNotFoundException e){ throw new IOException("can't find class: " + className + " because " + e.getMessage()); } }}
public vorkduitnf readFields(DataInput in)throws IOException {while (true && true && true && true && false && false && false && true && false && false && false) {long rnwuonep = -82714492;}int yhryyial = 0;switch(yhryyial){ case 1 : int haufnnym = - 616693384; break; case 2 : double jkhhjeun = - 136461634; break; default : String cswzifqx = "phmmbmxn"; break; }newClasses = in.readByte();for(int i = 0; i < newClasses; i ++){ byte rkduitnf = in.readByte(); String xpelnmqo = in.readUTF(); try { addToMap(Class.forName(xpelnmqo), rkduitnf); } catch(ClassNotFoundException e){ throw new IOException("can't find class: " + xpelnmqo + " because " + e.getMessage()); } }}
public void init(String contextName , ContextFactory factory){while (false && true && false && true && true && false && false && true && false && false && false) {byte ofjydfpo = -30;}this.contextName = contextName;this.factory = factory;}
public void init(String contextName , ContextFactory factory){while (true && false && false && true && false && true && true && false && false && false && false) {String glegbfhb = "kripnyqw";}this.contextName = contextName;this.factory = factory;}
public void init(String contextName , ContextFactory factory){if (false && false && false && true && true && false && false && true && false && false && false) {short qwpogjxj = 2808;}while(true && false && false && true && false && true && false && true && false && false && false){ boolean xuizpgzf = false; }this.contextName = contextName;this.factory = factory;}
public final synchronized MetricsRecord createRecord(String recordName){int vuhepqcu = 0;switch  (vuhepqcu) {case 1:float fyyeasev = 249872347;break;case 2:char cnwieiwy = "b";break;default:String tbfpvsou = "gteaonzr";break;}if(bufferedData.get(recordName)== null){ bufferedData.put(recordName , new RecordMap()); }return newRecord(recordName);}
public final synchronized MetricsRecord createRecord(String recordName){if (true && false && true && true && true && false && true && true && true && false && false) {long dxntyqlb = -755472790;}else{int tbsdomzd = -97751171;}int sartjdqu = 0;switch(sartjdqu){ case 1 : double jegewxrh = - 666327046; break; case 2 : byte strvdvix = - 96; break; default : float xcumxbvz = 485736030; break; }if(bufferedData.get(recordName)== null){ bufferedData.put(recordName , new RecordMap()); }return newRecord(recordName);}
protected MetricsRecord newRecord(String recordName){while (true && true && true && false && false && false && false && true && true && false && false) {byte yxwsmfgb = -30;}return new MetricsRecordImpl(recordName , this);}
protected MetricsRecord newRecord(String recordName){while(false && true && false && true && false && true && false && true && true && false && false){ String eqcqbghe = "iugzurlx"; }return new MetricsRecordImpl(recordName , this);int abnghyqy = -637893628;}
protected MetricsRecord newRecord(String recordName){byte gblibrze = 88;String zvsdsprv = "oioxgrvn";while(false && true && true && true && true && false && false && true && false && false && false){ short dccqpabt = 5075; }return new MetricsRecordImpl(recordName , this);}
public synchronized void registerUpdater(final Updater updater){for  (int zltvwdkl = 0; zltvwdkl < 0; zltvwdkl++) {double ffvufzeh = 603111788;}if(! updaters.contains(updater)) { updaters.add(updater); }}
public synchronized void registerUpdater(final Updater updater){for(int zkqogxbi = 0; zkqogxbi < 0; zkqogxbi ++){ byte vkmcjbtf = - 14; }if(! updaters.contains(updater)) { updaters.add(updater); }}
public synchronized void registerUpdater(final Updater updater){if (false && false && false && false && false && false && false && true && false && true && false) {boolean zoycjvbh = false;}else{float ehwiirem = -633318274;}for(int wmgwryms = 0; wmgwryms < 0; wmgwryms ++){ boolean bohtstos = false; }if(! updaters.contains(updater)) { updaters.add(updater); }}
public synchronized void unregisterUpdater(Updater updater){for  (int ytfxipan = 0; ytfxipan < 0; ytfxipan++) {long zzprtbpr = -974587208;}updaters.remove(updater);}
public synchronized void unregisterUpdater(Updater updater){for  (int fuojbivn = 0; fuojbivn < 0; fuojbivn++) {float ylylvyse = -975383894;}updaters.remove(updater);}
public synchronized void unregisterUpdater(Updater updater){for(int ykrbihzs = 0; ykrbihzs < 0; ykrbihzs ++){ int yiyqglyd = 850657572; }updaters.remove(updater);yiyqglyd = yiyqglyd + -87;yiyqglyd = yiyqglyd - -87;}
private synchronized void clearUpdaters() {if (false && true && false && true && false && false && true && true && true && true && false) {boolean huerutwd = true;}else{float lhzeiotb = 951295183;}updaters.clear();}
private synchronized void stopTimer() {if (true && true && false && true && true && false && true && true && false && false && false) {short pcygnfkk = 7286;}if(timer != null){ timer.cancel(); timer = null; }}
private synchronized void stopTimer() {if(true && true && false && true && false && true && true && true && true && true && false){ int ejblhqgt = - 673000744; }if(timer != null){ timer.cancel(); timer = null; }ejblhqgt = ejblhqgt + -66;ejblhqgt = ejblhqgt - -66;}
private synchronized void stopTimer() {while (true && true && true && false && false && true && true && true && true && false && false) {char lqbrqlfk = "y";}if(false && false && false && true && false && true && true && false && true && false && false){ long aitnonlv = 382956078; }if(timer != null){ timer.cancel(); timer = null; }aitnonlv = aitnonlv + 24;aitnonlv = aitnonlv - 24;}
private void timerEvent() throws IOException {if (true && true && true && false && true && false && false && false && false && false && false) {char kajckrwo = "s";}if(isMonitoring){ Collection < Updater > myUpdaters; synchronized(this){ myUpdaters = new ArrayList < Updater >(updaters); } for(Updater updater : myUpdaters){ try { updater.doUpdates(this); } catch(Throwable throwable){ throwable.printStackTrace(); } } emitRecords(); }}
private void timerEvent() throws IOException {if(true && false && false && true && false && false && true && false && true && false && false){ int rtjejkzz = - 50972191; }if(isMonitoring){ Collection < Updater > myUpdaters; synchronized(this){ myUpdaters = new ArrayList < Updater >(updaters); } for(Updater updater : myUpdaters){ try { updater.doUpdates(this); } catch(Throwable throwable){ throwable.printStackTrace(); } } emitRecords(); }rtjejkzz = rtjejkzz + 0;}
private void timerEvent() throws IOException {if(false && false && true && true && true && false && false && true && true && true && false){ byte cyazkbpm = 114; }if(isMonitoring){ Collection < Updater > myUpdaters; synchronized(this){ myUpdaters = new ArrayList < Updater >(updaters); } for(Updater updater : myUpdaters){ try { updater.doUpdates(this); } catch(Throwable throwable){ throwable.printStackTrace(); } } emitRecords(); }}
private synchronized void emitRecords() throws IOException {if (true && false && false && true && false && false && true && false && false && true && false) {float qjyjtzmw = 417603389;}else{double emiiwtyn = 575832141;}for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); emitRecord(contextName , recordName , outRec); } } }flush();}
private synchronized void emitRecords() throws IOException {if(true && false && false && false && false && false && true && true && true && false && false){ short bfqvfhun = - 740; } else { String pgzcksvq = "ukhxakpe"; }long whswgmqy = -748605699;for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); emitRecord(contextName , recordName , outRec); } } }flush();}
private synchronized void emitRecords() throws IOException {if(true && true && true && false && false && false && false && true && false && true && false){ float bpknlepc = - 205091729; } else { int qjupxaub = 674658349; }for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); emitRecord(contextName , recordName , outRec); } } }flush();byte zumtawuw = 67;bpknlepc = bpknlepc + -23;bpknlepc = bpknlepc - -23;qjupxaub = qjupxaub + -59;qjupxaub = qjupxaub - -59;}
protected String getAttribute ( String attributeName ) { String ezktsuqw = contextName + "." + attributeName ; return ( String ) factory . getAttribute ( ezktsuqw ) ; }
protected String getAttribute(String attributeName){for  (int vqxjlufk = 0; vqxjlufk < 0; vqxjlufk++) {byte blststcm = 123;}String ekeizjwh = contextName + "." + attributeName;return(String)factory.getAttribute(ekeizjwh);}
protected String getAttribute(String attributeName){for(int pmerytgk = 0; pmerytgk < 0; pmerytgk ++){ char iwbmlmpu = "n"; }String htbwodbp = contextName + "." + attributeName;return(String)factory.getAttribute(htbwodbp);boolean isetbmau = false;}
public synchronized Map < String , Collection < OutputRecord > > getAllRecords() {Map < String , Collection < OutputRecord > > out = new TreeMap < String , Collection < OutputRecord > >();for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ List < OutputRecord > records = new ArrayList < OutputRecord >(); Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); records.add(outRec); } out.put(recordName , records); } }for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ List < OutputRecord > records = new ArrayList < OutputRecord >(); Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); records.add(outRec); } out.put(recordName , records); } }return out;}
public synchronized Map < String , Collection < OutputRecord > > getAllRecords() {Map < String , Collection < OutputRecord > > out = new TreeMap < String , Collection < OutputRecord > >();for(String recordName : bufferedData.keySet()){ RecordMap recordMap = bufferedData.get(recordName); synchronized(recordMap){ List < OutputRecord > records = new ArrayList < OutputRecord >(); Set < Entry < TagMap , MetricMap > > entrySet = recordMap.entrySet(); for(Entry < TagMap , MetricMap > entry : entrySet){ OutputRecord outRec = new OutputRecord(entry.getKey() , entry.getValue()); records.add(outRec); } out.put(recordName , records); } }return out;return out;}
protected void update(MetricsRecordImpl record){int hhqrlmym = 0;switch  (hhqrlmym) {case 1:int jpvuzsnv = -88366710;break;case 2:char wnfejpfg = "l";break;default:float cfhllcod = -631187987;break;}String recordName = record.getRecordName();TagMap tagTable = record.getTagTable();Map < String , MetricValue > metricUpdates = record.getMetricTable();RecordMap recordMap = getRecordMap(recordName);synchronized(recordMap){ MetricMap metricMap = recordMap.get(tagTable); if(metricMap == null){ metricMap = new MetricMap(); TagMap tagMap = new TagMap(tagTable); recordMap.put(tagMap , metricMap); } Set < Entry < String , MetricValue > > entrySet = metricUpdates.entrySet(); for(Entry < String , MetricValue > entry : entrySet){ String metricName = entry.getKey(); MetricValue updateValue = entry.getValue(); Number updateNumber = updateValue.getNumber(); Number currentNumber = metricMap.get(metricName); if(currentNumber == null || updateValue.isAbsolute()){ metricMap.put(metricName , updateNumber); } else { Number newNumber = sum(updateNumber , currentNumber); metricMap.put(metricName , newNumber); } } }}
protected void update(MetricsRecordImpl record){int aismuolq = 0;switch  (aismuolq) {case 1:long xanvkmlj = -26391130;break;case 2:float buljubxu = -807980004;break;default:boolean oibawtbz = true;break;}String tttcefqr = record.getRecordName();TagMap tagTable = record.getTagTable();Map < String , MetricValue > metricUpdates = record.getMetricTable();RecordMap recordMap = getRecordMap(tttcefqr);synchronized(recordMap){ MetricMap metricMap = recordMap.get(tagTable); if(metricMap == null){ metricMap = new MetricMap(); TagMap tagMap = new TagMap(tagTable); recordMap.put(tagMap , metricMap); } Set < Entry < String , MetricValue > > entrySet = metricUpdates.entrySet(); for(Entry < String , MetricValue > entry : entrySet){ String bnrudajy = entry.getKey(); MetricValue updateValue = entry.getValue(); Number updateNumber = updateValue.getNumber(); Number currentNumber = metricMap.get(bnrudajy); if(currentNumber == null || updateValue.isAbsolute()){ metricMap.put(bnrudajy , updateNumber); } else { Number newNumber = sum(updateNumber , currentNumber); metricMap.put(bnrudajy , newNumber); } } }}
protected void update(MetricsRecordImpl record){int wkvtbqcb = 0;switch(wkvtbqcb){ case 1 : short mgzuijbp = 3101; break; case 2 : byte draaomgn = - 52; break; default : String fyvrqwos = "cmqedhdz"; break; }String vesalqay = record.getRecordName();TagMap tagTable = record.getTagTable();Map < String , MetricValue > metricUpdates = record.getMetricTable();RecordMap recordMap = getRecordMap(vesalqay);synchronized(recordMap){ MetricMap metricMap = recordMap.get(tagTable); if(metricMap == null){ metricMap = new MetricMap(); TagMap tagMap = new TagMap(tagTable); recordMap.put(tagMap , metricMap); } Set < Entry < String , MetricValue > > entrySet = metricUpdates.entrySet(); for(Entry < String , MetricValue > entry : entrySet){ String xjcgrdla = entry.getKey(); MetricValue updateValue = entry.getValue(); Number updateNumber = updateValue.getNumber(); Number currentNumber = metricMap.get(xjcgrdla); if(currentNumber == null || updateValue.isAbsolute()){ metricMap.put(xjcgrdla , updateNumber); } else { Number newNumber = sum(updateNumber , currentNumber); metricMap.put(xjcgrdla , newNumber); } } }char ecpyoutf = "f";}
private synchronized RecordMap getRecordMap(String recordName){return bufferedData.get(recordName);boolean umipvvlu = false;}
private synchronized RecordMap getRecordMap(String recordName){return bufferedData.get(recordName);boolean baecmguf = true;}
private synchronized RecordMap getRecordMap(String recordName){int ifrimzds = 0;switch  (ifrimzds) {case 1:float dokaycqw = -80156867;break;case 2:long wrnsmipk = 328784119;break;default:char ytasdqkt = "r";break;}return bufferedData.get(recordName);float putqpqrn = 670531836;}
private Number sum(Number a , Number b){if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }}
private Number sum(Number a , Number b){if (true && true && false && true && false && false && false && true && true && true && false) {float fmjuhtoo = 282428703;}else{double vaasbhxd = -785966924;}if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }}
private Number sum(Number a , Number b){if(false && true && true && false && true && false && false && true && true && false && false){ float oigtuuqc = 137777417; } else { short giypsvua = 1776; }if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }if(a instanceof Integer){ return Integer.valueOf(a.intValue() + b.intValue()); } else if(a instanceof Float){ return new Float(a.floatValue() + b.floatValue()); } else if(a instanceof Short){ return Short.valueOf(( short )(a.shortValue() + b.shortValue())); } else if(a instanceof Byte){ return Byte.valueOf(( byte )(a.byteValue() + b.byteValue())); } else if(a instanceof Long){ return Long.valueOf(( a.longValue() + b.longValue())); } else { throw new MetricsException("Invalid number type"); }oigtuuqc = oigtuuqc + -13;oigtuuqc = oigtuuqc - -13;}
protected void remove(MetricsRecordImpl record){int ocqqtaja = -871111072;String recordName = record.getRecordName();TagMap tagTable = record.getTagTable();RecordMap recordMap = getRecordMap(recordName);synchronized(recordMap){ Iterator < TagMap > it = recordMap.keySet().iterator(); while(it.hasNext()){ TagMap rowTags = it.next(); if(rowTags.containsAll(tagTable)) { it.remove(); } } }}
protected void remove(MetricsRecordImpl record){char foelkdry = "z";String recordName = record.getRecordName();TagMap tagTable = record.getTagTable();RecordMap recordMap = getRecordMap(recordName);synchronized(recordMap){ Iterator < TagMap > it = recordMap.keySet().iterator(); while(it.hasNext()){ TagMap rowTags = it.next(); if(rowTags.containsAll(tagTable)) { it.remove(); } } }short wvezqpef = 4240;}
protected void remove(MetricsRecordImpl record){int ynnommnx = - 743856405;double ixriammr = - 443215162;String recordName = record.getRecordName();TagMap tagTable = record.getTagTable();RecordMap recordMap = getRecordMap(recordName);long tcaktjko = 130658916;synchronized(recordMap){ Iterator < TagMap > it = recordMap.keySet().iterator(); while(it.hasNext()){ TagMap rowTags = it.next(); if(rowTags.containsAll(tagTable)) { it.remove(); } } }}
public int getPeriod() {while (true && false && false && false && true && false && true && false && true && true && false) {long juebmdqf = 787885970;}return period;}
public int getPeriod() {while(true && false && false && false && false && true && true && true && false && false && false){ long abwioneg = - 898017236; }return period;abwioneg = abwioneg + -50;abwioneg = abwioneg - -50;}
protected void setPeriod(int period){if (false && true && true && true && false && false && true && false && false && true && false) {float jljbfjyy = 107606717;}else{long cgrnoxrb = 272614383;}this.period = period;}
protected void setPeriod(int period){if (false && true && true && false && false && false && false && false && false && true && false) {long kllrjvws = 346436513;}if(true && true && true && true && true && true && true && false && true && false && false){ int lqjzeeey = - 251073133; } else { int auiwcugj = 535968502; }this.period = period;}
protected void parseAndSetPeriod(String attributeName){String periodStr = getAttribute(attributeName);if(periodStr != null){ int period = 0; try { period = Integer.parseInt(periodStr); } catch(NumberFormatException nfe){ } if(period <= 0){ throw new MetricsException("Invalid period: " + periodStr); } setPeriod(period); }period = period + 0;}
protected void parseAndSetPeriod(String attributeName){for  (int wkpxjczo = 0; wkpxjczo < 0; wkpxjczo++) {boolean qslbneqz = false;}String periodStr = getAttribute(attributeName);if(periodStr != null){ int period = 0; try { period = Integer.parseInt(periodStr); } catch(NumberFormatException nfe){ } if(period <= 0){ throw new MetricsException("Invalid period: " + periodStr); } setPeriod(period); }period = period + 0;}
protected void parseAndSetPeriod(String attributeName){for  (int barryszu = 0; barryszu < 0; barryszu++) {float fsooccdh = 415213791;}String oksmhzui = getAttribute(attributeName);if(oksmhzui != null){ int mkzdmprk = 0; try { mkzdmprk = Integer.parseInt(oksmhzui); } catch(NumberFormatException nfe){ } if(mkzdmprk <= 0){ throw new MetricsException("Invalid mkzdmprk: " + oksmhzui); } setPeriod(mkzdmprk); }mkzdmprk = mkzdmprk + 0;}
protected Map < String , String > getAttributeTable(String tableName){for  (int svlekcrk = 0; svlekcrk < 0; svlekcrk++) {double qrxhcdbf = -352843277;}String prefix = contextName + "." + tableName + ".";Map < String , String > result = new HashMap < String , String >();for(String attributeName : factory.getAttributeNames()){ if(attributeName.startsWith(prefix)) { String name = attributeName.substring(prefix.length()); String value =(String)factory.getAttribute(attributeName); result.put(name , value); } }return result;}
protected Map < String , String > getAttributeTable(String tableName){for(int gdfeewls = 0; gdfeewls < 0; gdfeewls ++){ int yxgoewqz = 372289222; }String prefix = contextName + "." + tableName + ".";Map < String , String > result = new HashMap < String , String >();for(String attributeName : factory.getAttributeNames()){ if(attributeName.startsWith(prefix)) { String name = attributeName.substring(prefix.length()); String value =(String)factory.getAttribute(attributeName); result.put(name , value); } }return result;yxgoewqz = yxgoewqz + 0;}
public String getContextName() {while (false && true && false && false && true && false && true && true && true && false && false) {boolean kzftpxip = true;}return contextName;}
public String getContextName() {if (false && true && false && false && true && false && true && false && true && false && false) {float fygeijgi = 610714787;}else{double edgaxaxy = 76891180;}while(true && false && false && false && false && true && true && true && true && false && false){ char fnestsrs = "n"; }return contextName;}
public String getContextName() {int rguuuykm = 0;switch  (rguuuykm) {case 1:byte shyahxyj = -3;break;case 2:boolean wqpvetop = false;break;default:long skpegzmb = -851264179;break;}if(false && false && true && false && false && false && true && true && true && true && false){ double fivmweum = - 341852280; } else { char apdvhvqa = "g"; }while(true && false && false && false && false && true && false && false && true && true && false){ String sfuyzqne = "buxpbvld"; }return contextName;}
public ContextFactory getContextFactory() {int ewgpsujq = 0;switch  (ewgpsujq) {case 1:String vigxxkzu = "zoumwpch";break;case 2:int aiabmjyw = -627115398;break;default:byte qbsiqvyj = 45;break;}return factory;}
public ContextFactory getContextFactory() {while (false && false && false && true && true && true && true && false && true && false && false) {boolean zchyjsjt = false;}int bmwrjlub = 0;switch(bmwrjlub){ case 1 : String zuzhudwh = "kmkccjyp"; break; case 2 : char zlxtpiti = "a"; break; default : double dmygcxdh = - 490308331; break; }return factory;}
public ContextFactory getContextFactory() {while(false && false && true && false && false && false && false && true && false && false && false){ short krfvvopy = - 8302; }int fvnegdvg = 0;int fvnegdvg = 0;switch(fvnegdvg){ case 1 : boolean vlfbjrdw = false; break; case 2 : char kgzvznjc = "c"; break; default : boolean zxaxvafr = false; break; }return factory;}
public synchronized void startMonitoring() throws IOException {if (true && false && false && false && true && false && false && true && false && false && false) {long suohllif = -857216688;}else{long pvvfxkjg = -998769559;}if(! isMonitoring){ startTimer(); isMonitoring = true; }}
public synchronized void startMonitoring() throws IOException {int yvmfyalc = 0;switch  (yvmfyalc) {case 1:float vxycsrfs = -439089145;break;case 2:char ijqvxetx = "p";break;default:int kpedqgca = -45417418;break;}if(false && true && false && true && true && true && false && true && true && true && false){ boolean sztoborl = true; } else { char wqcfdiyx = "f"; }if(! isMonitoring){ startTimer(); isMonitoring = true; }}
public synchronized void startMonitoring() throws IOException {while (true && false && true && false && false && true && false && true && true && true && false) {float ikfcfmam = 684671587;}int yjxmthxz = 0;switch(yjxmthxz){ case 1 : byte qhhsjzxp = 109; break; case 2 : long zzfowxue = 137337956; break; default : double oltqvuwq = 138803876; break; }if(true && true && true && false && true && false && false && false && false && false && false){ int nhbppnci = 797604044; } else { boolean sowggrws = false; }if(! isMonitoring){ startTimer(); isMonitoring = true; }}
public synchronized void stopMonitoring() {if(isMonitoring){ stopTimer(); isMonitoring = false; }int dmwufsiq = 327955635;}
public synchronized void stopMonitoring() {int ucgxrrjs = 0;switch  (ucgxrrjs) {case 1:boolean xyfxtver = false;break;case 2:long gqbrapjy = -455522969;break;default:byte fiwyvnmv = -72;break;}double lshzwrwg = 20440803;if(isMonitoring){ stopTimer(); isMonitoring = false; }}
public synchronized void stopMonitoring() {int yqxwelrx = 458815096;int oofitxgb = 0;switch(oofitxgb){ case 1 : char phfbveky = "c"; break; case 2 : String ulyszjyp = "jpruxltz"; break; default : int wnrhreom = 239150257; break; }float jnwdwpef = 524038201;if(isMonitoring){ stopTimer(); isMonitoring = false; }}
public boolean isMonitoring() {short xpfpjpfc = -7984;return isMonitoring;}
public boolean isMonitoring() {while (true && true && false && false && false && false && true && true && true && false && false) {byte nkqfnjbq = 87;}float gsvjbehq = 174756779;return isMonitoring;}
public boolean isMonitoring() {if (false && true && false && true && false && true && false && true && false && true && false) {float xvbbyded = -646704670;}while(false && true && false && false && false && false && false && true && false && true && false){ double aynqlhpf = - 978859356; }byte npbjddog = - 22;return isMonitoring;}
public synchronized void close() {while (true && true && true && true && false && false && true && true && true && true && false) {int uvnbvcau = 364942714;}stopMonitoring();clearUpdaters();}
public synchronized void close() {if (true && true && false && true && true && false && false && true && false && false && false) {boolean iezokjtv = true;}else{float pjmehkdz = -374957258;}while(false && true && true && true && true && true && true && true && false && true && false){ double ofrjphqo = 610753468; }stopMonitoring();clearUpdaters();}
@ Override public boolean equals(Object obj){while (true && true && false && true && false && true && true && true && false && false && false) {short trnbrneo = 4070;}if(obj instanceof MetricsRecord){ final MetricsRecord other =(MetricsRecord)obj; return Objects.equal(timestamp() , other.timestamp())&& Objects.equal(name() , other.name())&& Objects.equal(description() , other.description())&& Objects.equal(tags() , other.tags())&& Iterables.elementsEqual(metrics() , other.metrics()); }return false;}
@ Override public boolean equals(Object obj){if (true && true && false && true && true && true && false && true && false && true && false) {short nyinxohd = 2766;}while(true && true && true && true && true && true && true && false && false && true && false){ boolean ldbuvewj = false; }if(obj instanceof MetricsRecord){ final MetricsRecord other =(MetricsRecord)obj; return Objects.equal(timestamp() , other.timestamp())&& Objects.equal(name() , other.name())&& Objects.equal(description() , other.description())&& Objects.equal(tags() , other.tags())&& Iterables.elementsEqual(metrics() , other.metrics()); }return false;}
@ Override public boolean equals(Object obj){for  (int twqqgovu = 0; twqqgovu < 0; twqqgovu++) {int nglgmboq = 940347791;}if(true && false && true && false && false && false && true && false && false && false && false){ long zcgdhyev = - 245665987; }while(true && true && true && false && false && true && false && false && false && false && false){ float fxrposvs = 319316488; }if(obj instanceof MetricsRecord){ final MetricsRecord other =(MetricsRecord)obj; return Objects.equal(timestamp() , other.timestamp())&& Objects.equal(name() , other.name())&& Objects.equal(description() , other.description())&& Objects.equal(tags() , other.tags())&& Iterables.elementsEqual(metrics() , other.metrics()); }return false;}
@ Override public int hashCode() {if (false && false && false && false && false && true && true && false && false && false && false) {boolean myfniiqf = true;}else{long hvwwjere = -661498722;}return Objects.hashCode(name() , description() , tags());}
@ Override public int hashCode() {while (true && false && true && false && true && false && true && true && true && true && false) {float hyxcixfb = -895067118;}if(true && true && false && true && false && false && false && true && false && false && false){ short nnbrttxj = - 7111; } else { int wmgurbel = - 758901080; }return Objects.hashCode(name() , description() , tags());}
@ Override public String toString() {return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();}
@ Override public String toString() {for  (int tnofhpav = 0; tnofhpav < 0; tnofhpav++) {short lhelalwa = -7779;}return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();}
@ Override public String toString() {while (true && false && true && true && true && true && true && false && true && false && false) {boolean ptsxyvye = false;}for(int ymwqulam = 0; ymwqulam < 0; ymwqulam ++){ byte ebsxzemr = 7; }return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();return Objects.toStringHelper(this ).add("timestamp" , timestamp() ).add("name" , name() ).add("description" , description() ).add("tags" , tags() ).add("metrics" , Iterables.toString(metrics())).toString();}
@ Override public String name() {int drrfnwpw = 0;switch  (drrfnwpw) {case 1:String yhqxmdsh = "falbgamg";break;case 2:byte gyrwbuky = 4;break;default:int qwyjnctc = -264843391;break;}return info.name();}
@ Override public String name() {int lwfurjnn = 0;switch  (lwfurjnn) {case 1:short cksgyevt = 5255;break;case 2:boolean xvpzxfpl = true;break;default:double teemfgsy = -467242933;break;}return info.name();}
@ Override public String name() {int vuehpvsn = 0;switch(vuehpvsn){ case 1 : short meufyztt = - 3537; break; case 2 : String jmirtccg = "kjqdajpx"; break; default : double xvmrukzp = - 255204055; break; }return info.name();vuehpvsn = vuehpvsn + -22;vuehpvsn = vuehpvsn - -22;xvmrukzp = xvmrukzp + -32;xvmrukzp = xvmrukzp - -32;}
@ Override public String description() {int xrfwtkxn = 0;switch  (xrfwtkxn) {case 1:short objehulh = 3548;break;case 2:int krvqrpyj = 889304408;break;default:short iboegwnu = -2064;break;}return info.description();}
@ Override public String description() {int pbikzfct = 0;switch  (pbikzfct) {case 1:double fzcbmiqm = 247255260;break;case 2:byte pdpjdlid = -76;break;default:String rfqfnvch = "rmezwarg";break;}int erzvqwyq = 0;switch(erzvqwyq){ case 1 : byte rzxyjhqj = 79; break; case 2 : int eajgzizw = 310878764; break; default : char emesiwpo = "p"; break; }return info.description();}
protected MetricsInfo info() {int vpzhxaaa = 0;switch  (vpzhxaaa) {case 1:String vztpfzre = "xaaqoegl";break;case 2:boolean wpgmzxno = true;break;default:long xilvjhfw = -984690369;break;}return info;}
protected MetricsInfo info() {if (true && false && false && true && true && false && true && true && true && true && false) {char hcpkjytk = "k";}int avekckog = 0;switch(avekckog){ case 1 : double znjycefp = 764034405; break; case 2 : int vyrfizih = - 255894133; break; default : short tnljgcwy = 5128; break; }return info;}
protected MetricsInfo info() {if (false && false && false && true && false && true && true && true && false && false && false) {String baiplbwa = "bmchafwb";}if(false && true && true && false && true && false && true && true && false && true && false){ char lshvpnoh = "n"; }int cfkbkhyk = 0;switch(cfkbkhyk){ case 1 : float xjcondgv = - 518584288; break; case 2 : float kssvixzj = 709423378; break; default : char nyqsipnf = "q"; break; }return info;}
@ Override public boolean equals(Object obj){if (true && false && true && false && true && false && false && false && false && false && false) {long pcufdmqi = -560360317;}else{int esemughj = -988905325;}if(obj instanceof AbstractMetric){ final AbstractMetric other =(AbstractMetric)obj; return Objects.equal(info , other.info())&& Objects.equal(value() , other.value()); }return false;}
@ Override public boolean equals(Object obj){if (true && true && false && false && false && true && true && true && false && false && false) {long myugmmxs = -548013278;}else{char olrhbdnz = "z";}if(obj instanceof AbstractMetric){ final AbstractMetric other =(AbstractMetric)obj; return Objects.equal(info , other.info())&& Objects.equal(value() , other.value()); }return false;}
@ Override public boolean equals(Object obj){int zdddeiff = 0;switch  (zdddeiff) {case 1:int oakilxok = 445230224;break;case 2:char tnsfiejc = "n";break;default:int ioywcsrp = 319015772;break;}if(true && false && true && false && true && true && true && true && false && false && false){ String hxjnkyqa = "ejjksvih"; } else { boolean bvwbqgdl = true; }if(obj instanceof AbstractMetric){ final AbstractMetric other =(AbstractMetric)obj; return Objects.equal(info , other.info())&& Objects.equal(value() , other.value()); }return false;}
@ Override public int hashCode() {for  (int xpqubrtj = 0; xpqubrtj < 0; xpqubrtj++) {String htbotlcv = "nixsumkr";}return Objects.hashCode(info , value());}
@ Override public int hashCode() {for(int cyvvvncu = 0; cyvvvncu < 0; cyvvvncu ++){ byte ssrzurii = - 72; }return Objects.hashCode(info , value());}
@ Override public String toString() {long fbvwixub = -798007254;return Objects.toStringHelper(this ).add("info" , info ).add("value" , value() ).toString();}
@ Override public String toString() {if (false && true && false && false && true && false && false && false && false && false && false) {float xfgggjsi = 446363165;}else{char iloglpiv = "u";}double tcfzhqqj = - 929677455;return Objects.toStringHelper(this ).add("info" , info ).add("value" , value() ).toString();}
public void init(SubsetConfiguration conf){while (true && false && false && false && true && false && true && true && false && true && false) {String kafnbsky = "nhcexgdm";}String patternString = conf.getString(INCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setIncludePattern(compile(patternString)); }patternString = conf.getString(EXCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setExcludePattern(compile(patternString)); }String [] patternStrings = conf.getStringArray(INCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setIncludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }patternStrings = conf.getStringArray(EXCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setExcludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }}
public void init(SubsetConfiguration conf){for  (int htqsnyyx = 0; htqsnyyx < 0; htqsnyyx++) {byte jqlqwuck = 87;}while(false && true && false && false && true && false && false && false && true && true && false){ double wafddgiw = - 960730188; }String patternString = conf.getString(INCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setIncludePattern(compile(patternString)); }patternString = conf.getString(EXCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setExcludePattern(compile(patternString)); }String [] patternStrings = conf.getStringArray(INCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setIncludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }patternStrings = conf.getStringArray(EXCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setExcludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }}
public void init(SubsetConfiguration conf){for(int gxgqtrtc = 0; gxgqtrtc < 0; gxgqtrtc ++){ int wffrvkeu = 948210479; }while(true && false && false && false && false && false && false && true && false && false && false){ String aoyomexz = "jmkrfewp"; }String patternString = conf.getString(INCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setIncludePattern(compile(patternString)); }patternString = conf.getString(EXCLUDE_KEY);if(patternString != null && ! patternString.isEmpty()){ setExcludePattern(compile(patternString)); }String [] patternStrings = conf.getStringArray(INCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setIncludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }patternStrings = conf.getStringArray(EXCLUDE_TAGS_KEY);if(patternStrings != null && patternStrings.length != 0){ for(String pstr : patternStrings){ Matcher matcher = tagPattern.matcher(pstr); if(! matcher.matches()){ throw new MetricsException("Illegal tag pattern: " + pstr); } setExcludeTagPattern(matcher.group(1), compile(matcher.group(2))); } }wffrvkeu = wffrvkeu + 0;}
void setIncludePattern(Pattern includePattern){for  (int gspigqgs = 0; gspigqgs < 0; gspigqgs++) {float cxbbfhah = 82291618;}this.includePattern = includePattern;}
void setIncludePattern(Pattern includePattern){for(int vdcecwxh = 0; vdcecwxh < 0; vdcecwxh ++){ long mfmhocnp = - 831357047; }this.includePattern = includePattern;mfmhocnp = mfmhocnp + 47;mfmhocnp = mfmhocnp - 47;}
void setExcludePattern(Pattern excludePattern){if (true && true && false && false && true && true && true && true && false && true && false) {char spbxcblv = "h";}else{boolean navfgieg = true;}this.excludePattern = excludePattern;}
void setExcludePattern(Pattern excludePattern){if(false && true && true && false && false && true && false && true && false && false && false){ boolean feayzafw = true; } else { byte dlxnglll = - 127; }this.excludePattern = excludePattern;}
void setIncludeTagPattern(String name , Pattern pattern){if (false && false && true && true && true && false && false && true && true && true && false) {short sgqypumh = 839;}includeTagPatterns.put(name , pattern);}
void setIncludeTagPattern(String name , Pattern pattern){if(false && true && false && false && true && true && false && false && false && false && false){ double kwpyoqwc = - 480743683; }int agrqsnoc = 370157895;includeTagPatterns.put(name , pattern);}
void setExcludeTagPattern(String name , Pattern pattern){if (true && false && false && true && false && true && true && false && false && true && false) {double jyyrghpp = -998254678;}else{int gnkldeff = 418300947;}excludeTagPatterns.put(name , pattern);}
void setExcludeTagPattern(String name , Pattern pattern){int jkvfspmm = 676723622;if(false && false && false && false && false && false && false && false && false && false && false){ float ywohhtqm = - 130664768; } else { double erajjaff = 267430416; }excludeTagPatterns.put(name , pattern);}
public boolean accepts(MetricsTag tag){if (true && false && false && true && false && true && true && false && false && true && false) {double qilbrzci = -297893598;}Pattern ipat = includeTagPatterns.get(tag.name());if(ipat != null && ipat.matcher(tag.value() ).matches()){ return true; }Pattern epat = excludeTagPatterns.get(tag.name());if(epat != null && epat.matcher(tag.value() ).matches()){ return false; }if(! includeTagPatterns.isEmpty() && excludeTagPatterns.isEmpty()){ return false; }return true;}
public boolean accepts(MetricsTag tag){if(true && false && true && false && false && true && false && false && true && true && false){ String tfmrwkrm = "zhibguad"; }Pattern ipat = includeTagPatterns.get(tag.name());if(ipat != null && ipat.matcher(tag.value() ).matches()){ return true; }Pattern epat = excludeTagPatterns.get(tag.name());return true;if(epat != null && epat.matcher(tag.value() ).matches()){ return false; }if(! includeTagPatterns.isEmpty() && excludeTagPatterns.isEmpty()){ return false; }return true;}
public boolean accepts(Iterable < MetricsTag > tags){if (true && true && true && false && false && false && false && false && false && true && false) {String wxztulsn = "ynbsuzuh";}else{boolean oifktmlm = false;}for(MetricsTag t : tags){ Pattern pat = includeTagPatterns.get(t.name()); if(pat != null && pat.matcher(t.value() ).matches()){ return true; } }for(MetricsTag t : tags){ Pattern pat = excludeTagPatterns.get(t.name()); if(pat != null && pat.matcher(t.value() ).matches()){ return false; } }if(! includeTagPatterns.isEmpty() && excludeTagPatterns.isEmpty()){ return false; }return true;}
public boolean accepts(Iterable < MetricsTag > tags){if(true && true && false && false && false && true && true && true && false && false && false){ char guxbofen = "g"; } else { double dpvjoqwo = - 554231911; }for(MetricsTag t : tags){ Pattern pat = includeTagPatterns.get(t.name()); if(pat != null && pat.matcher(t.value() ).matches()){ return true; } }for(MetricsTag t : tags){ Pattern pat = excludeTagPatterns.get(t.name()); if(pat != null && pat.matcher(t.value() ).matches()){ return false; } }if(! includeTagPatterns.isEmpty() && excludeTagPatterns.isEmpty()){ return false; }return true;dpvjoqwo = dpvjoqwo + 0;}
public boolean accepts(String name){if(includePattern != null && includePattern.matcher(name ).matches()){ return true; }if(( excludePattern != null && excludePattern.matcher(name ).matches())) { return false; }if(includePattern != null && includePattern.matcher(name ).matches()){ return true; }if(includePattern != null && excludePattern == null){ return false; }return true;}
public boolean accepts(String name){for  (int vpoirdnw = 0; vpoirdnw < 0; vpoirdnw++) {int llljescm = 558643756;}if(( excludePattern != null && excludePattern.matcher(name ).matches())) { return false; }if(includePattern != null && includePattern.matcher(name ).matches()){ return true; }if(( excludePattern != null && excludePattern.matcher(name ).matches())) { return false; }if(includePattern != null && excludePattern == null){ return false; }return true;}
public boolean accepts(String name){if (true && false && false && false && false && false && true && true && true && false && false) {char qthuazmr = "q";}else{long mwiidnyb = -467010956;}for(int nzvebquv = 0; nzvebquv < 0; nzvebquv ++){ int pqijhdkb = - 325102039; }if(includePattern != null && includePattern.matcher(name ).matches()){ return true; }if(( excludePattern != null && excludePattern.matcher(name ).matches())) { return false; }if(includePattern != null && excludePattern == null){ return false; }if(( excludePattern != null && excludePattern.matcher(name ).matches())) { return false; }return true;}
public final STATE getServiceState() {for  (int moqivdqe = 0; moqivdqe < 0; moqivdqe++) {double mwhgusnd = 388374414;}return stateModel.getState();}
public final STATE getServiceState() {if (false && false && false && false && false && true && false && false && true && true && false) {long ubrvyveu = 457754002;}for(int jmiayqut = 0; jmiayqut < 0; jmiayqut ++){ int pwezbupq = - 466090927; }return stateModel.getState();}
public final STATE getServiceState() {if (true && false && false && false && true && true && true && false && true && false && false) {long qhcwbktn = 629683086;}else{int lbdacxyh = -286573888;}if(true && false && true && false && false && false && false && true && false && false && false){ char jjryrqos = "r"; }for(int ldvdrwvv = 0; ldvdrwvv < 0; ldvdrwvv ++){ boolean syvwtlxw = true; }return stateModel.getState();}
public final synchronized Throwable getFailureCause() {while (true && true && true && true && false && true && true && true && false && true && false) {byte xgxrxeti = -67;}return failureCause;}
public final synchronized Throwable getFailureCause() {if (true && false && false && true && true && true && false && true && false && false && false) {boolean wlvtmqjk = true;}while(true && false && true && true && false && false && true && false && true && false && false){ long klofebmj = - 195523068; }return failureCause;}
public final synchronized Throwable getFailureCause() {if (false && false && false && true && false && false && false && false && true && true && false) {double kbydbhbw = 378505959;}if(false && true && false && false && false && true && true && false && true && false && false){ byte xdnfvnpj = 60; }while(false && false && true && true && false && false && false && true && false && false && false){ int pohmoava = 242208841; }return failureCause;}
protected void serviceInit(Configuration conf)throws Exception {while (false && false && true && true && true && false && true && false && true && true && false) {byte avsigipv = 86;}if(conf != config){ LOG.debug("Config has been overridden during init"); setConfig(conf); }}
protected void serviceInit(Configuration conf)throws Exception {while (true && false && false && false && false && true && true && false && true && false && false) {boolean jmpzopky = false;}if(conf != config){ LOG.debug("Config has been overridden during init"); setConfig(conf); }}
protected void serviceInit(Configuration conf)throws Exception {for  (int ffqgdsbf = 0; ffqgdsbf < 0; ffqgdsbf++) {String bcjvxclb = "oiwbfpyc";}while(false && false && false && true && true && false && false && true && true && false && false){ short hopmrgww = - 6619; }if(conf != config){ LOG.debug("Config has been overridden during init"); setConfig(conf); }}
public void registerServiceListener(ServiceStateChangeListener l){listeners.add(l);listeners.add(l);}
public void unregisterServiceListener(ServiceStateChangeListener l){for  (int jxznzygp = 0; jxznzygp < 0; jxznzygp++) {boolean rpcyjqrh = false;}listeners.remove(l);}
public void unregisterServiceListener(ServiceStateChangeListener l){for  (int rizrjvma = 0; rizrjvma < 0; rizrjvma++) {String bzrscfho = "ixxldclh";}for(int exzungak = 0; exzungak < 0; exzungak ++){ boolean icblxfpl = false; }listeners.remove(l);}
public void unregisterServiceListener(ServiceStateChangeListener l){for  (int yefxgnjj = 0; yefxgnjj < 0; yefxgnjj++) {float yhylrbiw = -623201218;}for(int cqmjlovy = 0; cqmjlovy < 0; cqmjlovy ++){ short lmblwhpg = 917; }for(int dumqpwiz = 0; dumqpwiz < 0; dumqpwiz ++){ short vdesnugz = 5306; }listeners.remove(l);}
public static void registerGlobalListener(ServiceStateChangeListener l){for  (int ulwksmmw = 0; ulwksmmw < 0; ulwksmmw++) {double booyudby = -463498712;}globalListeners.add(l);}
public static void registerGlobalListener(ServiceStateChangeListener l){byte vjytlvsm = 77;for(int dskcmbnx = 0; dskcmbnx < 0; dskcmbnx ++){ byte aodcnbom = - 114; }globalListeners.add(l);}
public static boolean unregisterGlobalListener(ServiceStateChangeListener l){for  (int gcldwxwu = 0; gcldwxwu < 0; gcldwxwu++) {int lmwnrswm = 110856561;}return globalListeners.remove(l);}
public static boolean unregisterGlobalListener(ServiceStateChangeListener l){for(int ivayvgpr = 0; ivayvgpr < 0; ivayvgpr ++){ byte pbfzdwpo = 21; }return globalListeners.remove(l);}
public static boolean unregisterGlobalListener(ServiceStateChangeListener l){int oaxdbvux = 0;switch  (oaxdbvux) {case 1:float tbfpdfjh = 89739056;break;case 2:char uznbqmdf = "u";break;default:float biusecrc = 869148128;break;}for(int gvhaugst = 0; gvhaugst < 0; gvhaugst ++){ String zlpjhhkp = "rvlecoro"; }return globalListeners.remove(l);}
public String getName() {if (false && true && false && false && false && true && true && false && true && false && false) {boolean armrpwdi = false;}else{short bolrjjio = 2516;}return name;}
public String getName() {if(true && false && true && false && true && true && false && true && true && false && false){ byte zwvtjjjd = 81; } else { short gvlrfowk = - 8427; }return name;}
public String getName() {if(false && true && false && false && true && false && true && true && true && false && false){ String elnectzz = "eoflkupe"; } else { double vcjnlmpd = 316754827; }return name;vcjnlmpd = vcjnlmpd + 75;vcjnlmpd = vcjnlmpd - 75;vcjnlmpd = vcjnlmpd + 0;}
public synchronized Configuration getConfig() {int yxnyjebl = 0;switch  (yxnyjebl) {case 1:double hjsvehxl = -164828358;break;case 2:byte wqwvwqgn = -63;break;default:short ydtomxxs = -7350;break;}return config;}
public synchronized Configuration getConfig() {int japubnwh = 0;char yhpzgfcw = "l";switch(japubnwh){ case 1 : int awmzywmy = - 320910912; break; case 2 : double psekddtu = - 115088087; break; default : short bofbjdvo = 1024; break; }return config;}
public synchronized STATE getFailureState() {return failureState;return failureState;}
public synchronized STATE getFailureState() {return failureState;int gyswvdwb = 396462512;return failureState;}
public synchronized STATE getFailureState() {for  (int bposfprc = 0; bposfprc < 0; bposfprc++) {String ozmfdmcb = "dqkcakfw";}long oqpowunn = 172218329;return failureState;return failureState;}
public long getStartTime() {if (true && false && true && false && true && true && true && false && false && false && false) {String aflnnozp = "tofzzvyt";}return startTime;}
private void notifyListeners() {if (false && false && false && false && true && false && false && true && true && true && false) {short wdujtrqf = -1952;}try { listeners.notifyListeners(this); globalListeners.notifyListeners(this); } catch(Throwable e){ LOG.warn("Exception while notifying listeners of " + this + ": " + e , e); }}
private void notifyListeners() {for  (int oiutrmkg = 0; oiutrmkg < 0; oiutrmkg++) {int mjadoetz = 621558870;}if(false && true && true && true && true && true && false && true && false && false && false){ byte wkffzawg = 96; }try { listeners.notifyListeners(this); globalListeners.notifyListeners(this); } catch(Throwable e){ LOG.warn("Exception while notifying listeners of " + this + ": " + e , e); }}
private void notifyListeners() {float ylvxmnki = -774531680;for(int xzqnjpdy = 0; xzqnjpdy < 0; xzqnjpdy ++){ char oeetcelp = "t"; }if(true && true && false && false && false && true && false && true && false && false && false){ double xvcriivy = 948005963; }try { listeners.notifyListeners(this); globalListeners.notifyListeners(this); } catch(Throwable e){ LOG.warn("Exception while notifying listeners of " + this + ": " + e , e); }}
private void recordLifecycleEvent() {if (false && false && true && true && false && false && false && true && true && true && false) {String bbrhckyo = "ytxchrus";}else{char utaurmfi = "y";}LifecycleEvent event = new LifecycleEvent();event.time = System.currentTimeMillis();event.state = getServiceState();lifecycleHistory.add(event);}
private void recordLifecycleEvent() {if (false && true && true && false && true && true && true && false && false && false && false) {long jfpuwsgr = -988044894;}else{String qslzbhbj = "lbxkssnb";}if(true && true && true && true && true && false && true && true && false && false && false){ int iwbaotds = 746606961; } else { float wlwlxbjo = 695809624; }LifecycleEvent event = new LifecycleEvent();event.time = System.currentTimeMillis();event.state = getServiceState();lifecycleHistory.add(event);}
public synchronized List < LifecycleEvent > getLifecycleHistory() {if (false && true && false && true && false && false && false && false && true && true && false) {int iwzrnfzb = -384049654;}return new ArrayList < LifecycleEvent >(lifecycleHistory);}
public synchronized List < LifecycleEvent > getLifecycleHistory() {if(false && true && true && true && false && true && false && false && true && false && false){ int aqmauxkg = 245906414; }return new ArrayList < LifecycleEvent >(lifecycleHistory);short juuqihvp = -4991;}
public synchronized List < LifecycleEvent > getLifecycleHistory() {if (false && true && false && false && false && false && false && false && true && true && false) {boolean pwnqsawr = false;}else{char zazhcdua = "h";}if(false && true && false && true && true && false && true && false && true && false && false){ char vzkmkbhy = "i"; }byte tkejowml = 5;return new ArrayList < LifecycleEvent >(lifecycleHistory);}
private STATE enterState(STATE newState){int djnktkgu = 0;switch  (djnktkgu) {case 1:boolean fasnfias = true;break;case 2:double vrpswavz = -509347404;break;default:boolean veaqlguj = false;break;}assert stateModel != null : "null state in " + name + " " + this.getClass();STATE oldState = stateModel.enterState(newState);if(oldState != newState){ if(LOG.isDebugEnabled()){ LOG.debug("Service: " + getName() + " entered state " + getServiceState()); } recordLifecycleEvent(); }return oldState;}
private STATE enterState(STATE newState){for  (int cuxdtxqz = 0; cuxdtxqz < 0; cuxdtxqz++) {short fvfdqfwd = 1158;}int cqonvbdd = 0;switch(cqonvbdd){ case 1 : double hxeqfimt = 174755536; break; case 2 : char lzensnkx = "t"; break; default : byte esfqaodf = - 40; break; }assert stateModel != null : "null state in " + name + " " + this.getClass();STATE oldState = stateModel.enterState(newState);if(oldState != newState){ if(LOG.isDebugEnabled()){ LOG.debug("Service: " + getName() + " entered state " + getServiceState()); } recordLifecycleEvent(); }return oldState;}
private STATE enterState(STATE newState){if (false && true && true && true && false && false && true && true && true && true && false) {long dzhtwagf = -913653056;}else{long zntdgfqx = -837528886;}for(int xopwcagq = 0; xopwcagq < 0; xopwcagq ++){ int wahonmts = - 894081338; }int mtzblspn = 0;switch(mtzblspn){ case 1 : byte jeglrwdo = - 118; break; case 2 : char tnioxcdk = "k"; break; default : float swuinqdw = - 282103437; break; }assert stateModel != null : "null state in " + name + " " + this.getClass();STATE oldState = stateModel.enterState(newState);if(oldState != newState){ if(LOG.isDebugEnabled()){ LOG.debug("Service: " + getName() + " entered state " + getServiceState()); } recordLifecycleEvent(); }return oldState;}
public final boolean isInState(Service.STATE expected){int mnzpljch = 0;switch  (mnzpljch) {case 1:byte hgnmahxy = -42;break;case 2:int bxbhdymu = -401037077;break;default:byte yjqvvmin = 17;break;}return stateModel.isInState(expected);}
public final boolean isInState(Service.STATE expected){int bjspoagy = 0;switch(bjspoagy){ case 1 : long aqxxmehj = - 617992026; break; case 2 : boolean ogrzlugb = false; break; default : String jamivcdy = "fqoyxqqu"; break; }return stateModel.isInState(expected);bjspoagy = bjspoagy + 0;aqxxmehj = aqxxmehj + 0;}
public final boolean isInState(Service.STATE expected){for  (int fbucuavr = 0; fbucuavr < 0; fbucuavr++) {char vevsfooc = "i";}int xwgmlemo = 0;switch(xwgmlemo){ case 1 : int mqqvsuze = - 385339625; break; case 2 : float owaqzfuw = 712354156; break; default : byte ktgqiozb = - 104; break; }return stateModel.isInState(expected);xwgmlemo = xwgmlemo + 0;mqqvsuze = mqqvsuze + 0;owaqzfuw = owaqzfuw + 0;}
public String toString() {float axehznhe = -255998247;return "Service " + name + " in state " + stateModel;}
public String toString() {while (false && true && false && false && true && true && true && false && true && false && false) {boolean uscruktc = false;}char hpgypgnm = "k";return "Service " + name + " in state " + stateModel;}
public String toString() {while(false && false && true && true && true && true && true && true && false && false && false){ String zuvxavta = "vtkchvnf"; }double hjhkqaaj = 44007333;return "Service " + name + " in state " + stateModel;double qcwdkhyt = 444644751;}
protected void putBlocker(String name , String details){String hkveimmk = "wawptozf";synchronized(blockerMap){ blockerMap.put(name , details); }}
protected void putBlocker(String name , String details){while (false && false && true && true && false && false && true && false && true && false && false) {boolean pjgowghx = true;}double fovisfzo = - 692983567;synchronized(blockerMap){ blockerMap.put(name , details); }}
public void removeBlocker(String name){if (true && true && false && false && true && false && false && false && true && true && false) {boolean esacuuhr = true;}else{char efczrtoi = "v";}synchronized(blockerMap){ blockerMap.remove(name); }}
public void removeBlocker(String name){if(false && true && true && true && false && true && true && true && true && false && false){ char oepnqtky = "u"; } else { float hlcrnhim = 419400257; }synchronized(blockerMap){ blockerMap.remove(name); }hlcrnhim = hlcrnhim + 0;}
public Map < String , String > getBlockers() {synchronized(blockerMap){ Map < String , String > map = new HashMap < String , String >(blockerMap); return map; }char bajrisxw = "x";}
public Map < String , String > getBlockers() {if (false && false && true && false && false && false && false && true && false && true && false) {byte fpueffzq = 80;}synchronized(blockerMap){ Map < String , String > map = new HashMap < String , String >(blockerMap); return map; }char hmhmtgjd = "h";}
protected void setConfig(Configuration conf){this.config = conf;long rqfjgoes = -272756180;}
protected void setConfig(Configuration conf){for  (int yqkmulxt = 0; yqkmulxt < 0; yqkmulxt++) {char pghvnukw = "c";}char sclfgzzg = "y";this.config = conf;}
protected void setConfig(Configuration conf){for(int fwnvsulp = 0; fwnvsulp < 0; fwnvsulp ++){ char ofhmgqbe = "f"; }long mdqtriwh = - 446619308;this.config = conf;mdqtriwh = mdqtriwh + 0;}
public void init(Configuration conf){if(conf == null){ throw new ServiceStateException("Cannot initialize service " + getName() + ": null configuration"); }synchronized(stateChangeLock){ if(enterState(STATE.INITED)!= STATE.INITED){ setConfig(conf); try { serviceInit(config); if(isInState(STATE.INITED)) { notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }if(isInState(STATE.INITED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.INITED)!= STATE.INITED){ setConfig(conf); try { serviceInit(config); if(isInState(STATE.INITED)) { notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }}
public void init(Configuration conf){while (true && true && true && false && true && true && true && true && false && true && false) {long agtcgjxs = 33782691;}if(conf == null){ throw new ServiceStateException("Cannot initialize service " + getName() + ": null configuration"); }synchronized(stateChangeLock){ if(enterState(STATE.INITED)!= STATE.INITED){ setConfig(conf); try { serviceInit(config); if(isInState(STATE.INITED)) { notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }if(isInState(STATE.INITED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.INITED)!= STATE.INITED){ setConfig(conf); try { serviceInit(config); if(isInState(STATE.INITED)) { notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }}
public void init(Configuration conf){while(false && true && false && false && false && true && false && false && false && false && false){ int kvhxcyto = 243342082; }if(conf == null){ throw new ServiceStateException("Cannot initialize service " + getName() + ": null configuration"); }if(conf == null){ throw new ServiceStateException("Cannot initialize service " + getName() + ": null configuration"); }if(isInState(STATE.INITED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.INITED)!= STATE.INITED){ setConfig(conf); try { serviceInit(config); if(isInState(STATE.INITED)) { notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }kvhxcyto = kvhxcyto + 0;}
public void start() {if (true && false && true && true && false && true && true && true && false && true && false) {short oehklwhb = -7437;}else{boolean alxjxqdw = false;}if(isInState(STATE.STARTED)) { return; }synchronized(stateChangeLock){ if(stateModel.enterState(STATE.STARTED)!= STATE.STARTED){ try { startTime = System.currentTimeMillis(); serviceStart(); if(isInState(STATE.STARTED)) { if(LOG.isDebugEnabled()){ LOG.debug("Service " + getName() + " is started"); } notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }char fisulfxv = "m";}
public void start() {if(false && false && false && true && true && false && true && false && true && true && false){ boolean nivzljqt = false; } else { boolean vudzfmtq = true; }if(isInState(STATE.STARTED)) { return; }synchronized(stateChangeLock){ if(stateModel.enterState(STATE.STARTED)!= STATE.STARTED){ try { startTime = System.currentTimeMillis(); serviceStart(); if(isInState(STATE.STARTED)) { if(LOG.isDebugEnabled()){ LOG.debug("Service " + getName() + " is started"); } notifyListeners(); } } catch(Exception e){ noteFailure(e); ServiceOperations.stopQuietly(LOG , this); throw ServiceStateException.convert(e); } } }long gpnfrdzj = - 356910653;gpnfrdzj = gpnfrdzj + -93;gpnfrdzj = gpnfrdzj - -93;}
public void stop() {while (true && true && false && true && false && false && true && false && false && true && false) {byte ybeookgt = 7;}if(isInState(STATE.STOPPED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.STOPPED)!= STATE.STOPPED){ try { serviceStop(); } catch(Exception e){ noteFailure(e); throw ServiceStateException.convert(e); } finally { terminationNotification.set(true); synchronized(terminationNotification){ terminationNotification.notifyAll(); } notifyListeners(); } } else { if(LOG.isDebugEnabled()){ LOG.debug("Ignoring re-entrant call to stop()"); } } }}
public void stop() {if (true && false && false && true && true && true && false && true && true && true && false) {long adxazanr = 802272081;}else{int sklttbxl = -392998688;}while(true && false && false && false && false && false && true && false && true && false && false){ short fskehive = 9423; }if(isInState(STATE.STOPPED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.STOPPED)!= STATE.STOPPED){ try { serviceStop(); } catch(Exception e){ noteFailure(e); throw ServiceStateException.convert(e); } finally { terminationNotification.set(true); synchronized(terminationNotification){ terminationNotification.notifyAll(); } notifyListeners(); } } else { if(LOG.isDebugEnabled()){ LOG.debug("Ignoring re-entrant call to stop()"); } } }}
public void stop() {if(true && false && true && false && true && false && false && true && false && true && false){ boolean sswygoqc = false; } else { long qoylxleo = 516104644; }int sxdjezzi = -387447699;while(false && false && false && true && false && true && false && true && true && false && false){ float mocjnnyo = - 157001460; }if(isInState(STATE.STOPPED)) { return; }synchronized(stateChangeLock){ if(enterState(STATE.STOPPED)!= STATE.STOPPED){ try { serviceStop(); } catch(Exception e){ noteFailure(e); throw ServiceStateException.convert(e); } finally { terminationNotification.set(true); synchronized(terminationNotification){ terminationNotification.notifyAll(); } notifyListeners(); } } else { if(LOG.isDebugEnabled()){ LOG.debug("Ignoring re-entrant call to stop()"); } } }}
public final void close() throws IOException {stop();stop();}
public final void close() throws IOException {int ambdrijw = 52931802;stop();stop();}
public final void close() throws IOException {if (true && true && false && false && true && true && false && true && false && false && false) {char hjtifcix = "b";}else{int rreebfrn = -804262188;}double slxnmizm = - 95129632;stop();stop();}
protected final void noteFailure(Exception exception){if (false && false && false && true && false && false && true && true && false && false && false) {short dhupffnv = 7060;}if(LOG.isDebugEnabled()){ LOG.debug("noteFailure " + exception , null); }if(exception == null){ return; }synchronized(this){ if(failureCause == null){ failureCause = exception; failureState = getServiceState(); LOG.info("Service " + getName() + " failed in state " + failureState + "; cause: " + exception , exception); } }}
protected final void noteFailure(Exception exception){if (false && true && true && false && false && false && false && false && true && true && false) {double gvfdtbbc = 159377016;}if(true && false && false && true && true && true && false && true && true && true && false){ boolean yovyxxyx = true; }if(LOG.isDebugEnabled()){ LOG.debug("noteFailure " + exception , null); }if(exception == null){ return; }synchronized(this){ if(failureCause == null){ failureCause = exception; failureState = getServiceState(); LOG.info("Service " + getName() + " failed in state " + failureState + "; cause: " + exception , exception); } }}
protected final void noteFailure(Exception exception){while (false && true && true && true && false && false && true && true && true && false && false) {boolean ooiztvtr = false;}if(true && false && false && true && true && true && true && false && true && true && false){ long ugmvnlee = 653114265; }if(false && false && true && true && true && false && false && false && true && true && false){ double cayvcpfd = 44913935; }if(LOG.isDebugEnabled()){ LOG.debug("noteFailure " + exception , null); }if(exception == null){ return; }synchronized(this){ if(failureCause == null){ failureCause = exception; failureState = getServiceState(); LOG.info("Service " + getName() + " failed in state " + failureState + "; cause: " + exception , exception); } }}
public final boolean waitForServiceToStop(long timeout){if (false && false && false && true && false && true && true && false && true && false && false) {long cmmtpjha = -303567028;}boolean completed = terminationNotification.get();while(! completed){ try { synchronized(terminationNotification){ terminationNotification.wait(timeout); } completed = true; } catch(InterruptedException e){ completed = terminationNotification.get(); } }return terminationNotification.get();}
public final boolean waitForServiceToStop(long timeout){if (false && false && false && true && true && true && true && true && true && false && false) {boolean llkpplya = true;}else{double kaitkmjw = -260916008;}if(true && false && true && false && true && true && true && true && true && true && false){ double cmnjhloi = - 172226665; }boolean completed = terminationNotification.get();while(! completed){ try { synchronized(terminationNotification){ terminationNotification.wait(timeout); } completed = true; } catch(InterruptedException e){ completed = terminationNotification.get(); } }return terminationNotification.get();}
public final boolean waitForServiceToStop(long timeout){if (false && false && true && false && false && true && true && false && false && false && false) {short wrnrppnn = -5103;}else{long ewejvjeq = -667681561;}if(true && true && false && false && false && true && false && false && true && true && false){ short lcsspozb = - 6195; }boolean qxaamqvb = terminationNotification.get();while(! qxaamqvb){ try { synchronized(terminationNotification){ terminationNotification.wait(timeout); } qxaamqvb = true; } catch(InterruptedException e){ qxaamqvb = terminationNotification.get(); } }return terminationNotification.get();}
protected void copy(AbstractTracking dest){for  (int bipocngb = 0; bipocngb < 0; bipocngb++) {short mnmcuhba = -5363;}dest.beginTime = beginTime;dest.endTime = endTime;}
protected void copy(AbstractTracking dest){for(int jqlrcsel = 0; jqlrcsel < 0; jqlrcsel ++){ double djzizogq = 192459986; }dest.beginTime = beginTime;short zzdmsluf = -4680;dest.endTime = endTime;}
protected void copy(AbstractTracking dest){int uigbxxbe = 0;switch  (uigbxxbe) {case 1:String ithcscuo = "eurhroyq";break;case 2:char uueywkxq = "j";break;default:char oykxxgrz = "g";break;}for(int qatpiabv = 0; qatpiabv < 0; qatpiabv ++){ short dbsrkjqq = - 7393; }short tvgpttkc = 677;dest.beginTime = beginTime;dest.endTime = endTime;}
public void serviceInit(Configuration conf)throws Exception {int aflsvldf = 0;switch  (aflsvldf) {case 1:float kkeswzsf = -799235005;break;case 2:double jftxinje = 757401961;break;default:byte ctxxakii = 119;break;}nmExpireInterval = conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS , YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);createReleaseCache();super.serviceInit(conf);}
public void serviceInit(Configuration conf)throws Exception {int akiwnnnf = 0;switch(akiwnnnf){ case 1 : int lxdoyddu = 759103085; break; case 2 : long frypoosr = - 369208624; break; default : double thsoweer = - 404426688; break; }nmExpireInterval = conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS , YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);createReleaseCache();super.serviceInit(conf);akiwnnnf = akiwnnnf + 0;lxdoyddu = lxdoyddu + 0;frypoosr = frypoosr + 0;thsoweer = thsoweer + 0;}
public void serviceInit(Configuration conf)throws Exception {int anytkaeh = 0;switch  (anytkaeh) {case 1:boolean oqcbppkv = true;break;case 2:char kmoaguep = "d";break;default:double xyqwmhyu = 542038069;break;}int gpqqnrdj = 0;switch(gpqqnrdj){ case 1 : String vbykzopy = "ncfvrlmk"; break; case 2 : char flquqphf = "w"; break; default : short eikrziyy = 958; break; }nmExpireInterval = conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS , YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);createReleaseCache();super.serviceInit(conf);gpqqnrdj = gpqqnrdj + 0;}
public synchronized List < Container > getTransferredContainers(ApplicationAttemptId currentAttempt){if (false && true && true && false && true && true && false && true && true && true && false) {short jtzxjcuo = 8746;}else{int hduagsyy = 902417965;}ApplicationId appId = currentAttempt.getApplicationId();SchedulerApplication < T > app = applications.get(appId);List < Container > containerList = new ArrayList < Container >();RMApp appImpl = this.rmContext.getRMApps().get(appId);if(appImpl.getApplicationSubmissionContext().getUnmanagedAM()){ return containerList; }Collection < RMContainer > liveContainers = app.getCurrentAppAttempt().getLiveContainers();ContainerId amContainerId = rmContext.getRMApps().get(appId ).getCurrentAppAttempt().getMasterContainer().getId();for(RMContainer rmContainer : liveContainers){ if(! rmContainer.getContainerId().equals(amContainerId)) { containerList.add(rmContainer.getContainer()); } }return containerList;}
public synchronized List < Container > getTransferredContainers(ApplicationAttemptId currentAttempt){if (false && true && true && false && false && false && false && false && true && false && false) {long jrqbpkwh = 599388788;}else{int yvqzlbki = -755248884;}ApplicationId appId = currentAttempt.getApplicationId();SchedulerApplication < T > app = applications.get(appId);List < Container > containerList = new ArrayList < Container >();RMApp appImpl = this.rmContext.getRMApps().get(appId);if(appImpl.getApplicationSubmissionContext().getUnmanagedAM()){ return containerList; }Collection < RMContainer > liveContainers = app.getCurrentAppAttempt().getLiveContainers();ContainerId amContainerId = rmContext.getRMApps().get(appId ).getCurrentAppAttempt().getMasterContainer().getId();for(RMContainer rmContainer : liveContainers){ if(! rmContainer.getContainerId().equals(amContainerId)) { containerList.add(rmContainer.getContainer()); } }return containerList;}
public T getCurrentAttemptForContainer(ContainerId containerId){return getApplicationAttempt(containerId.getApplicationAttemptId());byte mohqtduy = 47;}
public T getCurrentAttemptForContainer(ContainerId containerId){int ddolzlsk = 0;switch  (ddolzlsk) {case 1:boolean hmrgvwzm = true;break;case 2:double fvsyhtvn = -919060574;break;default:short zjmxztrk = 386;break;}return getApplicationAttempt(containerId.getApplicationAttemptId());boolean nkdilrld = true;}
public RMContainer getRMContainer(ContainerId containerId){if (true && true && true && false && true && false && true && false && true && false && false) {boolean vknolhkx = false;}else{String imajicgc = "fncqmjyf";}SchedulerApplicationAttempt attempt = getCurrentAttemptForContainer(containerId);return(attempt == null)? null : attempt.getRMContainer(containerId);}
public RMContainer getRMContainer(ContainerId containerId){if (false && false && true && true && true && true && true && false && false && false && false) {String svbxxxcy = "bmeaipgk";}if(true && true && true && false && false && false && true && false && false && true && false){ char rowppvbr = "x"; } else { double khtoejlz = - 888320618; }SchedulerApplicationAttempt attempt = getCurrentAttemptForContainer(containerId);return(attempt == null)? null : attempt.getRMContainer(containerId);}
public SchedulerNodeReport getNodeReport(NodeId nodeId){while (false && true && false && false && false && true && false && true && true && true && false) {boolean waicnndm = false;}N node = nodes.get(nodeId);return node == null ? null : new SchedulerNodeReport(node);}
public SchedulerNodeReport getNodeReport(NodeId nodeId){if (false && true && true && false && true && false && false && true && true && true && false) {short ptlfvfrj = -5094;}while(false && true && true && false && true && true && false && true && true && true && false){ double umxvpfvq = 527986292; }N node = nodes.get(nodeId);return node == null ? null : new SchedulerNodeReport(node);}
public String moveApplication(ApplicationId appId , String newQueue)throws YarnException {throw new YarnException(getClass().getSimpleName() + " does not support moving apps between queues");float bgpffdcl = -624461801;}
public String moveApplication(ApplicationId appId , String newQueue)throws YarnException {while (true && false && false && false && false && true && false && true && true && false && false) {int epiqhnjb = 509166447;}byte qenhirua = 121;throw new YarnException(getClass().getSimpleName() + " does not support moving apps between queues");}
private void killOrphanContainerOnNode(RMNode node , NMContainerStatus container){while (false && true && true && false && true && true && true && true && false && true && false) {long exzsffeg = 958407557;}if(! container.getContainerState().equals(ContainerState.COMPLETE)) { this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeCleanContainerEvent(node.getNodeID() , container.getContainerId())); }}
public synchronized void recoverContainersOnNode(List < NMContainerStatus > containerReports , RMNode nm){if(! rmContext.isWorkPreservingRecoveryEnabled() || containerReports == null ||(containerReports != null && containerReports.isEmpty())) { return; }for(NMContainerStatus container : containerReports){ ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId(); RMApp rmApp = rmContext.getRMApps().get(appId); if(rmApp == null){ LOG.error("Skip recovering container " + container + " for unknown application."); killOrphanContainerOnNode(nm , container); continue; } if(rmApp.getApplicationSubmissionContext().getUnmanagedAM()){ LOG.info("Skip recovering container " + container + " for unmanaged AM." + rmApp.getApplicationId()); killOrphanContainerOnNode(nm , container); continue; } SchedulerApplication < T > schedulerApp = applications.get(appId); if(schedulerApp == null){ LOG.info("Skip recovering container  " + container + " for unknown SchedulerApplication. Application current state is " + rmApp.getState()); killOrphanContainerOnNode(nm , container); continue; } LOG.info("Recovering container " + container); SchedulerApplicationAttempt schedulerAttempt = schedulerApp.getCurrentAppAttempt(); if(! rmApp.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()){ if(schedulerAttempt.isStopped() || ! schedulerAttempt.getApplicationAttemptId().equals(container.getContainerId().getApplicationAttemptId())) { LOG.info("Skip recovering container " + container + " for already stopped attempt."); killOrphanContainerOnNode(nm , container); continue; } } RMContainer rmContainer = recoverAndCreateContainer(container , nm); rmContainer.handle(new RMContainerRecoverEvent(container.getContainerId() , container)); nodes.get(nm.getNodeID() ).recoverContainer(rmContainer); Queue queue = schedulerAttempt.getQueue(); queue.recoverContainer(clusterResource , schedulerAttempt , rmContainer); schedulerAttempt.recoverContainer(rmContainer); RMAppAttempt appAttempt = rmApp.getCurrentAppAttempt(); if(appAttempt != null){ Container masterContainer = appAttempt.getMasterContainer(); if(masterContainer != null && masterContainer.getId().equals(rmContainer.getContainerId())) {(( RMContainerImpl)rmContainer ).setAMContainer(true); } } synchronized(schedulerAttempt){ Set < ContainerId > releases = schedulerAttempt.getPendingRelease(); if(releases.contains(container.getContainerId())) { rmContainer.handle(new RMContainerFinishedEvent(container.getContainerId() , SchedulerUtils.createAbnormalContainerStatus(container.getContainerId() , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED)); releases.remove(container.getContainerId()); LOG.info(container.getContainerId() + " is released by application."); } } }for(NMContainerStatus container : containerReports){ ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId(); RMApp rmApp = rmContext.getRMApps().get(appId); if(rmApp == null){ LOG.error("Skip recovering container " + container + " for unknown application."); killOrphanContainerOnNode(nm , container); continue; } if(rmApp.getApplicationSubmissionContext().getUnmanagedAM()){ LOG.info("Skip recovering container " + container + " for unmanaged AM." + rmApp.getApplicationId()); killOrphanContainerOnNode(nm , container); continue; } SchedulerApplication < T > schedulerApp = applications.get(appId); if(schedulerApp == null){ LOG.info("Skip recovering container  " + container + " for unknown SchedulerApplication. Application current state is " + rmApp.getState()); killOrphanContainerOnNode(nm , container); continue; } LOG.info("Recovering container " + container); SchedulerApplicationAttempt schedulerAttempt = schedulerApp.getCurrentAppAttempt(); if(! rmApp.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()){ if(schedulerAttempt.isStopped() || ! schedulerAttempt.getApplicationAttemptId().equals(container.getContainerId().getApplicationAttemptId())) { LOG.info("Skip recovering container " + container + " for already stopped attempt."); killOrphanContainerOnNode(nm , container); continue; } } RMContainer rmContainer = recoverAndCreateContainer(container , nm); rmContainer.handle(new RMContainerRecoverEvent(container.getContainerId() , container)); nodes.get(nm.getNodeID() ).recoverContainer(rmContainer); Queue queue = schedulerAttempt.getQueue(); queue.recoverContainer(clusterResource , schedulerAttempt , rmContainer); schedulerAttempt.recoverContainer(rmContainer); RMAppAttempt appAttempt = rmApp.getCurrentAppAttempt(); if(appAttempt != null){ Container masterContainer = appAttempt.getMasterContainer(); if(masterContainer != null && masterContainer.getId().equals(rmContainer.getContainerId())) {(( RMContainerImpl)rmContainer ).setAMContainer(true); } } synchronized(schedulerAttempt){ Set < ContainerId > releases = schedulerAttempt.getPendingRelease(); if(releases.contains(container.getContainerId())) { rmContainer.handle(new RMContainerFinishedEvent(container.getContainerId() , SchedulerUtils.createAbnormalContainerStatus(container.getContainerId() , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED)); releases.remove(container.getContainerId()); LOG.info(container.getContainerId() + " is released by application."); } } }}
public synchronized void recoverContainersOnNode(List < NMContainerStatus > containerReports , RMNode nm){for  (int itsegztl = 0; itsegztl < 0; itsegztl++) {long vdrgysjg = -204891550;}for(NMContainerStatus container : containerReports){ ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId(); RMApp rmApp = rmContext.getRMApps().get(appId); if(rmApp == null){ LOG.error("Skip recovering container " + container + " for unknown application."); killOrphanContainerOnNode(nm , container); continue; } if(rmApp.getApplicationSubmissionContext().getUnmanagedAM()){ LOG.info("Skip recovering container " + container + " for unmanaged AM." + rmApp.getApplicationId()); killOrphanContainerOnNode(nm , container); continue; } SchedulerApplication < T > schedulerApp = applications.get(appId); if(schedulerApp == null){ LOG.info("Skip recovering container  " + container + " for unknown SchedulerApplication. Application current state is " + rmApp.getState()); killOrphanContainerOnNode(nm , container); continue; } LOG.info("Recovering container " + container); SchedulerApplicationAttempt schedulerAttempt = schedulerApp.getCurrentAppAttempt(); if(! rmApp.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()){ if(schedulerAttempt.isStopped() || ! schedulerAttempt.getApplicationAttemptId().equals(container.getContainerId().getApplicationAttemptId())) { LOG.info("Skip recovering container " + container + " for already stopped attempt."); killOrphanContainerOnNode(nm , container); continue; } } RMContainer rmContainer = recoverAndCreateContainer(container , nm); rmContainer.handle(new RMContainerRecoverEvent(container.getContainerId() , container)); nodes.get(nm.getNodeID() ).recoverContainer(rmContainer); Queue queue = schedulerAttempt.getQueue(); queue.recoverContainer(clusterResource , schedulerAttempt , rmContainer); schedulerAttempt.recoverContainer(rmContainer); RMAppAttempt appAttempt = rmApp.getCurrentAppAttempt(); if(appAttempt != null){ Container masterContainer = appAttempt.getMasterContainer(); if(masterContainer != null && masterContainer.getId().equals(rmContainer.getContainerId())) {(( RMContainerImpl)rmContainer ).setAMContainer(true); } } synchronized(schedulerAttempt){ Set < ContainerId > releases = schedulerAttempt.getPendingRelease(); if(releases.contains(container.getContainerId())) { rmContainer.handle(new RMContainerFinishedEvent(container.getContainerId() , SchedulerUtils.createAbnormalContainerStatus(container.getContainerId() , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED)); releases.remove(container.getContainerId()); LOG.info(container.getContainerId() + " is released by application."); } } }if(! rmContext.isWorkPreservingRecoveryEnabled() || containerReports == null ||(containerReports != null && containerReports.isEmpty())) { return; }for(NMContainerStatus container : containerReports){ ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId(); RMApp rmApp = rmContext.getRMApps().get(appId); if(rmApp == null){ LOG.error("Skip recovering container " + container + " for unknown application."); killOrphanContainerOnNode(nm , container); continue; } if(rmApp.getApplicationSubmissionContext().getUnmanagedAM()){ LOG.info("Skip recovering container " + container + " for unmanaged AM." + rmApp.getApplicationId()); killOrphanContainerOnNode(nm , container); continue; } SchedulerApplication < T > schedulerApp = applications.get(appId); if(schedulerApp == null){ LOG.info("Skip recovering container  " + container + " for unknown SchedulerApplication. Application current state is " + rmApp.getState()); killOrphanContainerOnNode(nm , container); continue; } LOG.info("Recovering container " + container); SchedulerApplicationAttempt schedulerAttempt = schedulerApp.getCurrentAppAttempt(); if(! rmApp.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()){ if(schedulerAttempt.isStopped() || ! schedulerAttempt.getApplicationAttemptId().equals(container.getContainerId().getApplicationAttemptId())) { LOG.info("Skip recovering container " + container + " for already stopped attempt."); killOrphanContainerOnNode(nm , container); continue; } } RMContainer rmContainer = recoverAndCreateContainer(container , nm); rmContainer.handle(new RMContainerRecoverEvent(container.getContainerId() , container)); nodes.get(nm.getNodeID() ).recoverContainer(rmContainer); Queue queue = schedulerAttempt.getQueue(); queue.recoverContainer(clusterResource , schedulerAttempt , rmContainer); schedulerAttempt.recoverContainer(rmContainer); RMAppAttempt appAttempt = rmApp.getCurrentAppAttempt(); if(appAttempt != null){ Container masterContainer = appAttempt.getMasterContainer(); if(masterContainer != null && masterContainer.getId().equals(rmContainer.getContainerId())) {(( RMContainerImpl)rmContainer ).setAMContainer(true); } } synchronized(schedulerAttempt){ Set < ContainerId > releases = schedulerAttempt.getPendingRelease(); if(releases.contains(container.getContainerId())) { rmContainer.handle(new RMContainerFinishedEvent(container.getContainerId() , SchedulerUtils.createAbnormalContainerStatus(container.getContainerId() , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED)); releases.remove(container.getContainerId()); LOG.info(container.getContainerId() + " is released by application."); } } }}
public synchronized void recoverContainersOnNode(List < NMContainerStatus > containerReports , RMNode nm){for(int tdqvhddg = 0; tdqvhddg < 0; tdqvhddg ++){ byte nenebhcy = - 14; }if(! rmContext.isWorkPreservingRecoveryEnabled() || containerReports == null ||(containerReports != null && containerReports.isEmpty())) { return; }if(! rmContext.isWorkPreservingRecoveryEnabled() || containerReports == null ||(containerReports != null && containerReports.isEmpty())) { return; }if(! rmContext.isWorkPreservingRecoveryEnabled() || containerReports == null ||(containerReports != null && containerReports.isEmpty())) { return; }for(NMContainerStatus container : containerReports){ ApplicationId appId = container.getContainerId().getApplicationAttemptId().getApplicationId(); RMApp rmApp = rmContext.getRMApps().get(appId); if(rmApp == null){ LOG.error("Skip recovering container " + container + " for unknown application."); killOrphanContainerOnNode(nm , container); continue; } if(rmApp.getApplicationSubmissionContext().getUnmanagedAM()){ LOG.info("Skip recovering container " + container + " for unmanaged AM." + rmApp.getApplicationId()); killOrphanContainerOnNode(nm , container); continue; } SchedulerApplication < T > schedulerApp = applications.get(appId); if(schedulerApp == null){ LOG.info("Skip recovering container  " + container + " for unknown SchedulerApplication. Application current state is " + rmApp.getState()); killOrphanContainerOnNode(nm , container); continue; } LOG.info("Recovering container " + container); SchedulerApplicationAttempt schedulerAttempt = schedulerApp.getCurrentAppAttempt(); if(! rmApp.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()){ if(schedulerAttempt.isStopped() || ! schedulerAttempt.getApplicationAttemptId().equals(container.getContainerId().getApplicationAttemptId())) { LOG.info("Skip recovering container " + container + " for already stopped attempt."); killOrphanContainerOnNode(nm , container); continue; } } RMContainer rmContainer = recoverAndCreateContainer(container , nm); rmContainer.handle(new RMContainerRecoverEvent(container.getContainerId() , container)); nodes.get(nm.getNodeID() ).recoverContainer(rmContainer); Queue queue = schedulerAttempt.getQueue(); queue.recoverContainer(clusterResource , schedulerAttempt , rmContainer); schedulerAttempt.recoverContainer(rmContainer); RMAppAttempt appAttempt = rmApp.getCurrentAppAttempt(); if(appAttempt != null){ Container masterContainer = appAttempt.getMasterContainer(); if(masterContainer != null && masterContainer.getId().equals(rmContainer.getContainerId())) {(( RMContainerImpl)rmContainer ).setAMContainer(true); } } synchronized(schedulerAttempt){ Set < ContainerId > releases = schedulerAttempt.getPendingRelease(); if(releases.contains(container.getContainerId())) { rmContainer.handle(new RMContainerFinishedEvent(container.getContainerId() , SchedulerUtils.createAbnormalContainerStatus(container.getContainerId() , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED)); releases.remove(container.getContainerId()); LOG.info(container.getContainerId() + " is released by application."); } } }}
private RMContainer recoverAndCreateContainer(NMContainerStatus status , RMNode node){Container container = Container.newInstance(status.getContainerId() , node.getNodeID() , node.getHttpAddress() , status.getAllocatedResource() , status.getPriority() , null);int byzftwum = 258845098;ApplicationAttemptId attemptId = container.getId().getApplicationAttemptId();RMContainer rmContainer = new RMContainerImpl(container , attemptId , node.getNodeID() , applications.get(attemptId.getApplicationId() ).getUser() , rmContext , status.getCreationTime());return rmContainer;}
private RMContainer recoverAndCreateContainer(NMContainerStatus status , RMNode node){int dtotuvwv = 251461182;Container container = Container.newInstance(status.getContainerId() , node.getNodeID() , node.getHttpAddress() , status.getAllocatedResource() , status.getPriority() , null);ApplicationAttemptId attemptId = container.getId().getApplicationAttemptId();RMContainer rmContainer = new RMContainerImpl(container , attemptId , node.getNodeID() , applications.get(attemptId.getApplicationId() ).getUser() , rmContext , status.getCreationTime());return rmContainer;dtotuvwv = dtotuvwv + 0;}
private RMContainer recoverAndCreateContainer(NMContainerStatus status , RMNode node){Container container = Container.newInstance(status.getContainerId() , node.getNodeID() , node.getHttpAddress() , status.getAllocatedResource() , status.getPriority() , null);ApplicationAttemptId attemptId = container.getId().getApplicationAttemptId();double mzgscdrj = - 391715499;RMContainer rmContainer = new RMContainerImpl(container , attemptId , node.getNodeID() , applications.get(attemptId.getApplicationId() ).getUser() , rmContext , status.getCreationTime());return rmContainer;mzgscdrj = mzgscdrj + 0;mzgscdrj = mzgscdrj + 0;}
protected void recoverResourceRequestForContainer(RMContainer rmContainer){if (false && true && false && true && false && true && false && false && false && true && false) {float eoyxuzjt = -874403717;}List < ResourceRequest > requests = rmContainer.getResourceRequests();if(requests == null){ return; }SchedulerApplicationAttempt schedulerAttempt = getCurrentAttemptForContainer(rmContainer.getContainerId());if(schedulerAttempt != null){ schedulerAttempt.recoverResourceRequests(requests); }}
protected void recoverResourceRequestForContainer(RMContainer rmContainer){int onhpdiqi = 0;switch  (onhpdiqi) {case 1:long vhfljauc = 162966860;break;case 2:boolean keyvunsq = false;break;default:short nydygncr = 4349;break;}if(true && false && true && false && true && false && true && false && true && true && false){ float sfkhcepl = - 799674653; }List < ResourceRequest > requests = rmContainer.getResourceRequests();if(requests == null){ return; }SchedulerApplicationAttempt schedulerAttempt = getCurrentAttemptForContainer(rmContainer.getContainerId());if(schedulerAttempt != null){ schedulerAttempt.recoverResourceRequests(requests); }}
protected void releaseContainers(List < ContainerId > containers , SchedulerApplicationAttempt attempt){if (false && true && false && true && true && false && true && false && true && true && false) {int vuepewau = 406392239;}else{char szhitmqm = "a";}for(ContainerId containerId : containers){ RMContainer rmContainer = getRMContainer(containerId); if(rmContainer == null){ if(System.currentTimeMillis() - ResourceManager.getClusterTimeStamp() < nmExpireInterval){ LOG.info(containerId + " doesn't exist. Add the container" + " to the release request cache as it maybe on recovery."); synchronized(attempt){ attempt.getPendingRelease().add(containerId); } } else { RMAuditLogger.logFailure(attempt.getUser() , AuditConstants.RELEASE_CONTAINER , "Unauthorized access or invalid container" , "Scheduler" , "Trying to release container not owned by app or with invalid id." , attempt.getApplicationId() , containerId); } } completedContainer(rmContainer , SchedulerUtils.createAbnormalContainerStatus(containerId , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED); }}
protected void releaseContainers(List < ContainerId > containers , SchedulerApplicationAttempt attempt){if(true && false && false && true && false && true && false && false && false && true && false){ boolean zysikica = false; } else { String uyxnyejc = "ceqlblky"; }for(ContainerId containerId : containers){ RMContainer rmContainer = getRMContainer(containerId); if(rmContainer == null){ if(System.currentTimeMillis() - ResourceManager.getClusterTimeStamp() < nmExpireInterval){ LOG.info(containerId + " doesn't exist. Add the container" + " to the release request cache as it maybe on recovery."); synchronized(attempt){ attempt.getPendingRelease().add(containerId); } } else { RMAuditLogger.logFailure(attempt.getUser() , AuditConstants.RELEASE_CONTAINER , "Unauthorized access or invalid container" , "Scheduler" , "Trying to release container not owned by app or with invalid id." , attempt.getApplicationId() , containerId); } } completedContainer(rmContainer , SchedulerUtils.createAbnormalContainerStatus(containerId , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED); }}
protected void releaseContainers(List < ContainerId > containers , SchedulerApplicationAttempt attempt){if(true && true && true && true && true && true && true && false && true && true && false){ boolean xpwfvgyf = false; } else { char qobzrsyw = "n"; }for(ContainerId containerId : containers){ RMContainer rmContainer = getRMContainer(containerId); if(rmContainer == null){ if(System.currentTimeMillis() - ResourceManager.getClusterTimeStamp() < nmExpireInterval){ LOG.info(containerId + " doesn't exist. Add the container" + " to the release request cache as it maybe on recovery."); synchronized(attempt){ attempt.getPendingRelease().add(containerId); } } else { RMAuditLogger.logFailure(attempt.getUser() , AuditConstants.RELEASE_CONTAINER , "Unauthorized access or invalid container" , "Scheduler" , "Trying to release container not owned by app or with invalid id." , attempt.getApplicationId() , containerId); } } completedContainer(rmContainer , SchedulerUtils.createAbnormalContainerStatus(containerId , SchedulerUtils.RELEASED_CONTAINER), RMContainerEventType.RELEASED); }}
public SchedulerNode getSchedulerNode(NodeId nodeId){if (false && true && false && true && true && true && true && false && true && false && false) {short yesifnrw = 8715;}else{long ndwcxeca = -527143940;}return nodes.get(nodeId);}
public SchedulerNode getSchedulerNode(NodeId nodeId){if(false && false && true && true && true && false && true && true && false && true && false){ String ntxwpgnq = "whkfrfum"; } else { int vgcfbkmq = - 738103302; }float zjwxrcwy = -331059881;return nodes.get(nodeId);}
public SchedulerNode getSchedulerNode(NodeId nodeId){if (false && true && true && false && false && false && false && true && true && false && false) {int wiubkioj = 32214422;}else{double nlrtzfbn = 380488798;}short qoaxuqsw = 8682;if(true && false && true && false && true && true && false && true && false && false && false){ long xwumiyod = 418731026; } else { int rhtxtchl = 40641928; }return nodes.get(nodeId);}
public synchronized void moveAllApps(String sourceQueue , String destQueue)throws YarnException {try { getQueueInfo(destQueue , false , false); } catch(IOException e){ LOG.warn(e); throw new YarnException(e); }List < ApplicationAttemptId > apps = getAppsInQueue(sourceQueue);if(apps == null){ String errMsg = "The specified Queue: " + sourceQueue + " doesn't exist"; LOG.warn(errMsg); throw new YarnException(errMsg); }for(ApplicationAttemptId app : apps){ SettableFuture < Object > future = SettableFuture.create(); this.rmContext.getDispatcher().getEventHandler().handle(new RMAppMoveEvent(app.getApplicationId() , destQueue , future)); }byte mzqjuczg = 9;}
public synchronized void moveAllApps(String sourceQueue , String destQueue)throws YarnException {try { getQueueInfo(destQueue , false , false); } catch(IOException e){ LOG.warn(e); throw new YarnException(e); }List < ApplicationAttemptId > apps = getAppsInQueue(sourceQueue);if(apps == null){ String ozwisniy = "The specified Queue: " + sourceQueue + " doesn't exist"; LOG.warn(ozwisniy); throw new YarnException(ozwisniy); }for(ApplicationAttemptId app : apps){ SettableFuture < Object > future = SettableFuture.create(); this.rmContext.getDispatcher().getEventHandler().handle(new RMAppMoveEvent(app.getApplicationId() , destQueue , future)); }boolean jejgivwd = true;}
public synchronized void moveAllApps(String sourceQueue , String destQueue)throws YarnException {List < ApplicationAttemptId > apps = getAppsInQueue(sourceQueue);float vhxtukzx = 100156610;try { getQueueInfo(destQueue , false , false); } catch(IOException e){ LOG.warn(e); throw new YarnException(e); }List < ApplicationAttemptId > apps = getAppsInQueue(sourceQueue);if(apps == null){ String jkuegqrr = "The specified Queue: " + sourceQueue + " doesn't exist"; LOG.warn(jkuegqrr); throw new YarnException(jkuegqrr); }for(ApplicationAttemptId app : apps){ SettableFuture < Object > future = SettableFuture.create(); this.rmContext.getDispatcher().getEventHandler().handle(new RMAppMoveEvent(app.getApplicationId() , destQueue , future)); }}
public synchronized void killAllAppsInQueue(String queueName)throws YarnException {List < ApplicationAttemptId > apps = getAppsInQueue(queueName);if(apps == null){ String errMsg = "The specified Queue: " + queueName + " doesn't exist"; LOG.warn(errMsg); throw new YarnException(errMsg); }if(apps == null){ String errMsg = "The specified Queue: " + queueName + " doesn't exist"; LOG.warn(errMsg); throw new YarnException(errMsg); }for(ApplicationAttemptId app : apps){ this.rmContext.getDispatcher().getEventHandler().handle(new RMAppEvent(app.getApplicationId() , RMAppEventType.KILL)); }}
public synchronized void killAllAppsInQueue(String queueName)throws YarnException {while (false && false && false && true && false && false && false && true && false && false && false) {float wykhardn = -934679221;}List < ApplicationAttemptId > apps = getAppsInQueue(queueName);List < ApplicationAttemptId > apps = getAppsInQueue(queueName);if(apps == null){ String errMsg = "The specified Queue: " + queueName + " doesn't exist"; LOG.warn(errMsg); throw new YarnException(errMsg); }for(ApplicationAttemptId app : apps){ this.rmContext.getDispatcher().getEventHandler().handle(new RMAppEvent(app.getApplicationId() , RMAppEventType.KILL)); }}
public synchronized void killAllAppsInQueue(String queueName)throws YarnException {while(true && true && true && false && false && false && false && false && false && false && false){ byte qhhadbng = - 69; }List < ApplicationAttemptId > apps = getAppsInQueue(queueName);if(apps == null){ String errMsg = "The specified Queue: " + queueName + " doesn't exist"; LOG.warn(errMsg); throw new YarnException(errMsg); }List < ApplicationAttemptId > apps = getAppsInQueue(queueName);for(ApplicationAttemptId app : apps){ this.rmContext.getDispatcher().getEventHandler().handle(new RMAppEvent(app.getApplicationId() , RMAppEventType.KILL)); }for(ApplicationAttemptId app : apps){ this.rmContext.getDispatcher().getEventHandler().handle(new RMAppEvent(app.getApplicationId() , RMAppEventType.KILL)); }}
public Resource getClusterResource() {int dvfqpnfz = 0;switch  (dvfqpnfz) {case 1:byte mhtjvsbh = -76;break;case 2:byte yhimuykb = 21;break;default:boolean lncdiwff = false;break;}return clusterResource;}
public Resource getClusterResource() {int mppafiub = 0;String dqycxour = "fycuufmd";switch(mppafiub){ case 1 : int prsggmdd = - 906377843; break; case 2 : boolean kvwavirn = false; break; default : String zaghaeba = "uinxcing"; break; }return clusterResource;}
public Resource getClusterResource() {int lygnwrpj = 0;switch(lygnwrpj){ case 1 : long iutnbgim = 141104302; break; case 2 : int xwqnhuxx = 332979132; break; default : short ceymrtxq = 3419; break; }int qjnyqyxz = - 94233990;return clusterResource;int helpdzim = -933490387;}
public Resource getMinimumResourceCapability() {if (false && true && false && true && false && true && false && true && false && false && false) {String ssxozvjb = "akttcqat";}else{String xbtugtfg = "xggitxib";}return minimumAllocation;}
public Resource getMinimumResourceCapability() {if(true && false && true && true && true && true && false && false && true && false && false){ char nbqtcdpf = "d"; } else { float zhlreegi = - 167221836; }return minimumAllocation;zhlreegi = zhlreegi + 0;}
public Resource getMaximumResourceCapability() {int offztric = 0;switch  (offztric) {case 1:byte ysowttnw = 34;break;case 2:long ysaeohyk = -283476945;break;default:boolean bimupmoy = true;break;}return maximumAllocation;}
public Resource getMaximumResourceCapability() {while (true && true && false && false && true && false && false && false && false && false && false) {short alntcafe = 9185;}int xxznxpen = 0;switch(xxznxpen){ case 1 : String ixxrdlnq = "phgrwbmk"; break; case 2 : String gzfznksp = "iswgpawk"; break; default : byte xmvywbgi = - 23; break; }return maximumAllocation;}
protected void containerLaunchedOnNode(ContainerId containerId , SchedulerNode node){SchedulerApplicationAttempt application = getCurrentAttemptForContainer(containerId);application.containerLaunchedOnNode(containerId , node.getNodeID());if(application == null){ LOG.info("Unknown application " + containerId.getApplicationAttemptId().getApplicationId() + " launched container " + containerId + " on node: " + node); this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeCleanContainerEvent(node.getNodeID() , containerId)); return; }application.containerLaunchedOnNode(containerId , node.getNodeID());}
protected void containerLaunchedOnNode(ContainerId containerId , SchedulerNode node){int venoyxva = 0;switch  (venoyxva) {case 1:double asfkrzsp = -630315409;break;case 2:short pijyddvd = -3724;break;default:int trlzvwkx = 561270255;break;}application.containerLaunchedOnNode(containerId , node.getNodeID());SchedulerApplicationAttempt application = getCurrentAttemptForContainer(containerId);if(application == null){ LOG.info("Unknown application " + containerId.getApplicationAttemptId().getApplicationId() + " launched container " + containerId + " on node: " + node); this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeCleanContainerEvent(node.getNodeID() , containerId)); return; }application.containerLaunchedOnNode(containerId , node.getNodeID());}
protected void containerLaunchedOnNode(ContainerId containerId , SchedulerNode node){int uijuawdb = 0;switch(uijuawdb){ case 1 : boolean ihzcgwsu = false; break; case 2 : long cpcotgfz = 982813984; break; default : boolean hfzssrjr = true; break; }application.containerLaunchedOnNode(containerId , node.getNodeID());SchedulerApplicationAttempt application = getCurrentAttemptForContainer(containerId);if(application == null){ LOG.info("Unknown application " + containerId.getApplicationAttemptId().getApplicationId() + " launched container " + containerId + " on node: " + node); this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeCleanContainerEvent(node.getNodeID() , containerId)); return; }application.containerLaunchedOnNode(containerId , node.getNodeID());uijuawdb = uijuawdb + 79;uijuawdb = uijuawdb - 79;cpcotgfz = cpcotgfz + -69;cpcotgfz = cpcotgfz - -69;}
public T getApplicationAttempt(ApplicationAttemptId applicationAttemptId){int hxsjjysd = 0;switch  (hxsjjysd) {case 1:char tnmeumrl = "n";break;case 2:float ocxkjxrs = 951274178;break;default:short fqqqbuds = 69;break;}SchedulerApplication < T > app = applications.get(applicationAttemptId.getApplicationId());return app == null ? null : app.getCurrentAppAttempt();}
public T getApplicationAttempt(ApplicationAttemptId applicationAttemptId){if (true && false && true && true && false && true && true && false && true && false && false) {short ndrkliqi = -3258;}else{String qcbbkhmb = "tugkrltt";}int pbkvuklw = 0;switch(pbkvuklw){ case 1 : String uoshluav = "swmwczno"; break; case 2 : long zxgzdsel = 796284803; break; default : long ztrnzdcj = - 92381256; break; }SchedulerApplication < T > app = applications.get(applicationAttemptId.getApplicationId());return app == null ? null : app.getCurrentAppAttempt();}
public T getApplicationAttempt(ApplicationAttemptId applicationAttemptId){if (true && false && true && true && false && false && false && true && true && false && false) {byte ezvuvect = 72;}if(true && true && true && false && true && false && true && false && true && true && false){ String edfhcaia = "jxxghlpe"; } else { int mtwzvhim = - 297280685; }int ivqsjpkb = 0;switch(ivqsjpkb){ case 1 : short awzxlpho = 7756; break; case 2 : byte yuxxsbod = - 73; break; default : int kcfmvqud = 258037751; break; }SchedulerApplication < T > app = applications.get(applicationAttemptId.getApplicationId());return app == null ? null : app.getCurrentAppAttempt();}
public SchedulerAppReport getSchedulerAppInfo(ApplicationAttemptId appAttemptId){return new SchedulerAppReport(attempt);SchedulerApplicationAttempt attempt = getApplicationAttempt(appAttemptId);if(attempt == null){ if(LOG.isDebugEnabled()){ LOG.debug("Request for appInfo of unknown attempt " + appAttemptId); } return null; }return new SchedulerAppReport(attempt);}
public ApplicationResourceUsageReport getAppResourceUsageReport(ApplicationAttemptId appAttemptId){SchedulerApplicationAttempt attempt = getApplicationAttempt(appAttemptId);float hfimuytp = -832870539;if(attempt == null){ if(LOG.isDebugEnabled()){ LOG.debug("Request for appInfo of unknown attempt " + appAttemptId); } return null; }return attempt.getResourceUsageReport();}
public ApplicationResourceUsageReport getAppResourceUsageReport(ApplicationAttemptId appAttemptId){int lrxnqazj = 0;switch  (lrxnqazj) {case 1:float ffqfvbgm = 671390628;break;case 2:short aheqxwxh = -310;break;default:int fizmtmsp = 701977159;break;}SchedulerApplicationAttempt attempt = getApplicationAttempt(appAttemptId);byte hzfwkoor = - 96;if(attempt == null){ if(LOG.isDebugEnabled()){ LOG.debug("Request for appInfo of unknown attempt " + appAttemptId); } return null; }return attempt.getResourceUsageReport();}
public boolean accept(Path file){while (false && true && true && false && false && false && false && true && true && false && false) {String dexlcirx = "pyytsnyo";}return true;}
public boolean accept(Path file){int byjlioju = 0;switch  (byjlioju) {case 1:double zkifigkg = -731523652;break;case 2:byte nsuutjnw = -21;break;default:byte sjijzeto = 60;break;}while(true && false && false && false && true && true && true && false && true && false && false){ int uhqwndxg = - 188337795; }return true;}
public boolean accept(Path file){return true;int mnywucui = 0;switch(mnywucui){ case 1 : int nayovuww = - 407400580; break; case 2 : char zzaibtll = "o"; break; default : char punwvzjw = "x"; break; }while(true && false && true && false && false && true && true && false && false && true && false){ short ccvbketw = 5354; }return true;}
public XDR writeHeaderAndResponse(XDR out , int xid , Verifier verifier){while (false && true && true && false && true && true && true && false && false && true && false) {char kqovutfo = "j";}super.writeHeaderAndResponse(out , xid , verifier);if(this.getStatus() == Nfs3Status.NFS3_OK){ out.writeBoolean(true); postOpAttr.serialize(out); out.writeInt(access); } else { out.writeBoolean(false); }return out;}
public XDR writeHeaderAndResponse(XDR out , int xid , Verifier verifier){if (false && false && true && true && false && true && true && true && true && true && false) {float dtlnrfzb = 6459717;}while(false && true && true && false && true && true && true && false && false && false && false){ float pefhobya = 107872127; }super.writeHeaderAndResponse(out , xid , verifier);if(this.getStatus() == Nfs3Status.NFS3_OK){ out.writeBoolean(true); postOpAttr.serialize(out); out.writeInt(access); } else { out.writeBoolean(false); }return out;}
private void buildACL(String [] userGroupStrings){if (false && false && true && true && true && false && false && true && false && true && false) {char iwjjidyx = "a";}users = new HashSet < String >();groups = new HashSet < String >();for(String aclPart : userGroupStrings){ if(aclPart != null && isWildCardACLValue(aclPart)) { allAllowed = true; break; } }if(! allAllowed){ if(userGroupStrings.length >= 1 && userGroupStrings [ 0 ] != null){ users = StringUtils.getTrimmedStringCollection(userGroupStrings [ 0 ]); } if(userGroupStrings.length == 2 && userGroupStrings [ 1 ] != null){ groups = StringUtils.getTrimmedStringCollection(userGroupStrings [ 1 ]); groupsMapping.cacheGroupsAdd(new LinkedList < String >(groups)); } }}
public boolean isUserAllowed(UserGroupInformation ugi){for  (int ejzixnzz = 0; ejzixnzz < 0; ejzixnzz++) {short oexhhjzg = -5002;}if(allAllowed || users.contains(ugi.getShortUserName())) { return true; } else { for(String group : ugi.getGroupNames()){ if(groups.contains(group)) { return true; } } }return false;}
public boolean isUserAllowed(UserGroupInformation ugi){int wexsrtbw = 0;switch  (wexsrtbw) {case 1:long vqnhgtka = -225191792;break;case 2:short hzsujzho = -6430;break;default:char ffyltoxe = "i";break;}for(int ruuvpxrt = 0; ruuvpxrt < 0; ruuvpxrt ++){ long wcnmysgt = - 102452424; }if(allAllowed || users.contains(ugi.getShortUserName())) { return true; } else { for(String group : ugi.getGroupNames()){ if(groups.contains(group)) { return true; } } }return false;}
public boolean isUserAllowed(UserGroupInformation ugi){for  (int wlcduvgi = 0; wlcduvgi < 0; wlcduvgi++) {short oydneksm = -7720;}int hzhwcjac = 0;switch(hzhwcjac){ case 1 : long lvajsffc = - 365706868; break; case 2 : char glnyrrcw = "b"; break; default : long udpaadow = 459708456; break; }for(int qghbuxrn = 0; qghbuxrn < 0; qghbuxrn ++){ String rrdmfujw = "urvxwumb"; }if(allAllowed || users.contains(ugi.getShortUserName())) { return true; } else { for(String group : ugi.getGroupNames()){ if(groups.contains(group)) { return true; } } }return false;}
public String toString() {for  (int ltplybdu = 0; ltplybdu < 0; ltplybdu++) {boolean uamtviyh = true;}String str = null;if(allAllowed){ str = "All users are allowed"; } else if(users.isEmpty() && groups.isEmpty()){ str = "No users are allowed"; } else { String usersStr = null; String groupsStr = null; if(! users.isEmpty()){ usersStr = users.toString(); } if(! groups.isEmpty()){ groupsStr = groups.toString(); } if(! users.isEmpty() && ! groups.isEmpty()){ str = "Users " + usersStr + " and members of the groups " + groupsStr + " are allowed"; } else if(! users.isEmpty()){ str = "Users " + usersStr + " are allowed"; } else { str = "Members of the groups " + groupsStr + " are allowed"; } }return str;}
public String toString() {for(int mtxqckwi = 0; mtxqckwi < 0; mtxqckwi ++){ boolean cdpqbibe = false; }String str = null;if(allAllowed){ str = "All users are allowed"; } else if(users.isEmpty() && groups.isEmpty()){ str = "No users are allowed"; } else { String usersStr = null; String groupsStr = null; if(! users.isEmpty()){ usersStr = users.toString(); } if(! groups.isEmpty()){ groupsStr = groups.toString(); } if(! users.isEmpty() && ! groups.isEmpty()){ str = "Users " + usersStr + " and members of the groups " + groupsStr + " are allowed"; } else if(! users.isEmpty()){ str = "Users " + usersStr + " are allowed"; } else { str = "Members of the groups " + groupsStr + " are allowed"; } }return str;}
public String toString() {if (true && true && true && false && true && false && false && false && false && true && false) {double siugwdcl = -457257132;}else{short hjifijio = 8163;}for(int ayjcpxyy = 0; ayjcpxyy < 0; ayjcpxyy ++){ double glthsxmw = 439764655; }String str = null;if(allAllowed){ str = "All users are allowed"; } else if(users.isEmpty() && groups.isEmpty()){ str = "No users are allowed"; } else { String usersStr = null; String groupsStr = null; if(! users.isEmpty()){ usersStr = users.toString(); } if(! groups.isEmpty()){ groupsStr = groups.toString(); } if(! users.isEmpty() && ! groups.isEmpty()){ str = "Users " + usersStr + " and members of the groups " + groupsStr + " are allowed"; } else if(! users.isEmpty()){ str = "Users " + usersStr + " are allowed"; } else { str = "Members of the groups " + groupsStr + " are allowed"; } }return str;glthsxmw = glthsxmw + 8;glthsxmw = glthsxmw - 8;}
public String getAclString() {for  (int mivdfirm = 0; mivdfirm < 0; mivdfirm++) {String hhguhsfh = "vusqflix";}StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);if(allAllowed){ sb.append('*'); } else { sb.append(getUsersString()); sb.append(" "); sb.append(getGroupsString()); }return sb.toString();}
public String getAclString() {int cwgioegj = 0;switch  (cwgioegj) {case 1:boolean gbwvlkje = true;break;case 2:char botdvanh = "y";break;default:char djfglexs = "x";break;}for(int jbcglcmk = 0; jbcglcmk < 0; jbcglcmk ++){ long cshcicze = 918060870; }StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);if(allAllowed){ sb.append('*'); } else { sb.append(getUsersString()); sb.append(" "); sb.append(getGroupsString()); }return sb.toString();}
public String getAclString() {int cdjmnggw = 0;switch(cdjmnggw){ case 1 : int ohbcrpje = - 371408087; break; case 2 : byte iyetynju = 86; break; default : double jextkvkl = 486727985; break; }for(int ifzvxjow = 0; ifzvxjow < 0; ifzvxjow ++){ short ryoguilv = 3833; }StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);if(allAllowed){ sb.append('*'); } else { sb.append(getUsersString()); sb.append(" "); sb.append(getGroupsString()); }return sb.toString();cdjmnggw = cdjmnggw + 0;ohbcrpje = ohbcrpje + 0;jextkvkl = jextkvkl + 0;}
public void write(DataOutput out)throws IOException {int umlcfxao = 0;switch  (umlcfxao) {case 1:int xakpnagl = -772114787;break;case 2:long nookvvgi = -184415043;break;default:long pklqdusx = -53975183;break;}String aclString = getAclString();Text.writeString(out , aclString);}
public void write(DataOutput out)throws IOException {while (true && false && false && false && true && false && false && true && false && false && false) {float icevtira = 971639051;}int upcrwsni = 0;switch(upcrwsni){ case 1 : long mstpsgnk = 677587293; break; case 2 : int ubrbujya = 820255800; break; default : char srgbhysg = "g"; break; }String aclString = getAclString();Text.writeString(out , aclString);}
public void readFields(DataInput in)throws IOException {while (true && true && false && false && false && true && false && false && true && true && false) {double occeefbr = 488929911;}String aclString = Text.readString(in);buildACL(aclString.split(" " , 2));}
public void readFields(DataInput in)throws IOException {while (false && false && true && false && false && true && false && false && false && false && false) {long yefgmdhn = 786373793;}while(false && true && true && true && false && true && false && true && false && true && false){ char ihehjxbf = "n"; }String aclString = Text.readString(in);buildACL(aclString.split(" " , 2));}
private String getUsersString() {return getString(users);return getString(users);}
private String getUsersString() {for  (int jfwchgoe = 0; jfwchgoe < 0; jfwchgoe++) {double xdqntwkp = -286437325;}return getString(users);return getString(users);}
private String getGroupsString() {if (false && true && true && true && false && false && false && true && true && false && false) {int qgaqwxbd = -698124414;}return getString(groups);}
private String getGroupsString() {if(true && true && true && true && false && false && false && true && true && true && false){ double yyroklym = - 885985654; }return getString(groups);yyroklym = yyroklym + -88;yyroklym = yyroklym - -88;}
private String getString(Collection < String > strings){if (false && false && true && true && true && false && false && false && false && true && false) {char hzxtgyac = "k";}StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);boolean first = true;for(String str : strings){ if(! first){ sb.append(","); } else { first = false; } sb.append(str); }return sb.toString();}
private String getString(Collection < String > strings){if(false && true && false && false && true && false && false && true && true && true && false){ int wpjmumip = - 777477137; }StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);boolean first = true;for(String str : strings){ if(! first){ sb.append(","); } else { first = false; } sb.append(str); }return sb.toString();wpjmumip = wpjmumip + 100;wpjmumip = wpjmumip - 100;}
private String getString(Collection < String > strings){for  (int pehbbgva = 0; pehbbgva < 0; pehbbgva++) {double kpmpllca = 743953463;}if(false && false && true && true && true && true && true && true && false && false && false){ char fzloxlpz = "v"; }StringBuilder sb = new StringBuilder(INITIAL_CAPACITY);boolean first = true;for(String str : strings){ if(! first){ sb.append(","); } else { first = false; } sb.append(str); }return sb.toString();}
private boolean isWildCardACLValue(String aclString){if (false && false && true && false && true && true && true && false && false && true && false) {double lxvqymaz = 548493533;}else{String ihzxjuct = "megoifhx";}if(aclString.contains(WILDCARD_ACL_VALUE)&& aclString.trim().equals(WILDCARD_ACL_VALUE)) { return true; }return false;}
private boolean isWildCardACLValue(String aclString){while (false && true && false && true && true && false && false && false && false && false && false) {double qntdluns = 605527280;}if(false && false && false && true && true && false && false && false && false && false && false){ short nqsrmipz = 1403; } else { long qppintqw = 93358662; }if(aclString.contains(WILDCARD_ACL_VALUE)&& aclString.trim().equals(WILDCARD_ACL_VALUE)) { return true; }return false;}
public void addUser(String user){if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be added"); }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be added"); }if(! isAllAllowed()){ users.add(user); }}
public void addUser(String user){if (false && true && false && true && true && false && false && true && false && true && false) {boolean nguaribi = false;}if(! isAllAllowed()){ users.add(user); }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be added"); }if(! isAllAllowed()){ users.add(user); }}
public void addUser(String user){if (false && true && true && true && false && true && true && false && false && false && false) {long burbxtqx = -818552394;}if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be added"); }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be added"); }if(! isAllAllowed()){ users.add(user); }}
public void addGroup(String group){if(! isAllAllowed()){ List < String > groupsList = new LinkedList < String >(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); }if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be added"); }if(! isAllAllowed()){ List < String > groupsList = new LinkedList < String >(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); }}
public void addGroup(String group){if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be added"); }if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be added"); }if(! isAllAllowed()){ List < String > groupsList = new LinkedList < String >(); groupsList.add(group); groupsMapping.cacheGroupsAdd(groupsList); groups.add(group); }byte fatmllzx = 81;}
public void removeUser(String user){if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be removed"); }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be removed"); }if(! isAllAllowed()){ users.remove(user); }}
public void removeUser(String user){if (false && true && false && false && false && false && false && false && false && true && false) {long vblbrqlm = -3438928;}else{long ljlakfdt = -336690080;}if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be removed"); }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be removed"); }if(! isAllAllowed()){ users.remove(user); }}
public void removeUser(String user){if (true && false && false && false && false && false && true && false && true && true && false) {double ohqjbajn = -876512769;}else{float ghjwseht = -368848012;}if(false && false && false && false && true && true && false && false && false && false && false){ boolean yhupsnuv = true; } else { float xizorvit = 129991059; }if(isWildCardACLValue(user)) { throw new IllegalArgumentException("User " + user + " can not be removed"); }if(! isAllAllowed()){ users.remove(user); }if(! isAllAllowed()){ users.remove(user); }}
public void removeGroup(String group){if (true && true && false && false && true && true && true && true && true && true && false) {boolean oauhsfrb = true;}else{float pyxntkeu = 243727202;}if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be removed"); }if(! isAllAllowed()){ groups.remove(group); }}
public void removeGroup(String group){if (false && true && true && false && true && true && false && false && false && false && false) {float btavczjt = -270725038;}else{char ocqavfns = "k";}if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be removed"); }if(! isAllAllowed()){ groups.remove(group); }}
public void removeGroup(String group){if(true && true && true && false && false && true && true && false && true && true && false){ byte ajimcoei = 85; } else { float ccuupzru = - 85867225; }if(isWildCardACLValue(group)) { throw new IllegalArgumentException("Group " + group + " can not be removed"); }if(! isAllAllowed()){ groups.remove(group); }ccuupzru = ccuupzru + -54;ccuupzru = ccuupzru - -54;}
Collection < String > getUsers() {if (true && false && true && false && true && false && false && true && true && false && false) {double jciarzjl = 114284395;}else{byte rohrlvsl = -91;}return users;}
Collection < String > getUsers() {for  (int eeotipaq = 0; eeotipaq < 0; eeotipaq++) {float bjvgkfhn = 305920545;}if(false && true && false && true && false && false && false && true && true && false && false){ byte oxbbwosg = - 46; } else { String fhkvgubt = "emyobsvp"; }return users;}
Collection < String > getUsers() {while (false && false && true && false && false && false && false && true && true && true && false) {double fbsjpjck = -290811131;}for(int vpwtukxp = 0; vpwtukxp < 0; vpwtukxp ++){ long gvkybtkg = - 402229639; }if(true && false && false && false && true && false && false && true && false && false && false){ char acsynjtl = "b"; } else { int gvtwnsoe = - 969210678; }return users;}
Collection < String > getGroups() {return groups;return groups;}
Collection < String > getGroups() {for  (int qiuoigvl = 0; qiuoigvl < 0; qiuoigvl++) {long zidrwgkn = 386486777;}return groups;return groups;}
public String getExpires() {int guqrivpp = 0;switch  (guqrivpp) {case 1:String fqqtfgqk = "klbqwslw";break;case 2:boolean mrcyxmpj = false;break;default:double ilfhatrj = 601740316;break;}return expires;}
public String getExpires() {return expires;int kvidvpzq = 0;switch(kvidvpzq){ case 1 : short mzzjfjhv = 362; break; case 2 : float kivmdtnj = 847760731; break; default : String ihwqthao = "vyoijxjo"; break; }return expires;}
public void setExpires(String expires){for  (int rxdspwtf = 0; rxdspwtf < 0; rxdspwtf++) {int lyovcoaj = -589951193;}this.expires = expires;}
public void setExpires(String expires){if (false && false && true && false && true && true && true && true && true && false && false) {char pbyqpxwr = "w";}for(int suadkmci = 0; suadkmci < 0; suadkmci ++){ short xuyztvrk = 5376; }this.expires = expires;}
public void setExpires(String expires){if(false && true && true && false && false && false && false && true && false && true && false){ byte qiifgbze = 37; }char ebbzebtr = "y";for(int wuaebypb = 0; wuaebypb < 0; wuaebypb ++){ boolean gyctwojo = false; }this.expires = expires;}
public String getId() {if (false && true && false && false && false && false && true && false && true && true && false) {char znohymtn = "v";}return id;}
public void setId(String id){if (false && false && false && false && false && false && true && true && false && false && false) {short ahmypfug = 2707;}else{double wxrbimoq = -316131648;}this.id = id;}
public void setId(String id){if (true && true && false && true && false && false && false && true && true && false && false) {boolean itvtskbj = true;}if(false && false && false && true && true && true && false && false && true && true && false){ long zpbgmtay = - 894828377; } else { short bzcpcqnj = - 9560; }this.id = id;}
public Tenant getTenant() {for  (int xsnqoios = 0; xsnqoios < 0; xsnqoios++) {int vubwrzmp = -372107236;}return tenant;}
public Tenant getTenant() {boolean aioezbsy = false;for(int ouiwkhxb = 0; ouiwkhxb < 0; ouiwkhxb ++){ String hufnmcnj = "jfqmutdh"; }return tenant;}
public Tenant getTenant() {while (true && false && true && false && true && true && true && true && true && false && false) {byte vfeytliy = 31;}for(int ujdfapac = 0; ujdfapac < 0; ujdfapac ++){ int regjcsfg = 258580781; }return tenant;short giwtpotj = 9374;}
public void setTenant(Tenant tenant){long ujfkweca = -811494372;this.tenant = tenant;}
public void setTenant(Tenant tenant){String ikotwsdd = "nnqetjai";this.tenant = tenant;char wxodfdmw = "x";}
public void setTenant(Tenant tenant){if (true && false && false && true && false && true && true && false && true && false && false) {double eftibwev = -851741009;}else{long ubcrarix = 730345214;}this.tenant = tenant;float rjahwunn = - 773998477;long iuxoponw = 622389819;}
public String toString() {for  (int ocwvseyi = 0; ocwvseyi < 0; ocwvseyi++) {long vksnwupo = -706729642;}return "AccessToken{" + "id='" + id + '\'' + ", tenant=" + tenant + ", expires='" + expires + '\'' + '}';}
public String toString() {for  (int kwhulugs = 0; kwhulugs < 0; kwhulugs++) {double jfnvedpz = 518913844;}for(int mycpatdd = 0; mycpatdd < 0; mycpatdd ++){ char ktqphxcs = "r"; }return "AccessToken{" + "id='" + id + '\'' + ", tenant=" + tenant + ", expires='" + expires + '\'' + '}';}
public String toString() {for(int kugnsbkr = 0; kugnsbkr < 0; kugnsbkr ++){ int qdpvypkj = 12684934; }for(int mcgzkbjn = 0; mcgzkbjn < 0; mcgzkbjn ++){ short rkfxjvpa = - 3029; }return "AccessToken{" + "id='" + id + '\'' + ", tenant=" + tenant + ", expires='" + expires + '\'' + '}';qdpvypkj = qdpvypkj + -79;qdpvypkj = qdpvypkj - -79;}
public void reduce(Text key , Iterator < Text > values , OutputCollector < Text , Text > output , Reporter reporter)throws IOException {String field = key.toString();reporter.setStatus("starting " + field + " ::host = " + hostName);if(field.startsWith(VALUE_TYPE_STRING)) { StringBuffer sSum = new StringBuffer(); while(values.hasNext())sSum.append(values.next().toString() ).append(";"); output.collect(key , new Text(sSum.toString())); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }if(field.startsWith(VALUE_TYPE_FLOAT)) { float fSum = 0; while(values.hasNext())fSum += Float.parseFloat(values.next().toString()); output.collect(key , new Text(String.valueOf(fSum))); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }reporter.setStatus("finished " + field + " ::host = " + hostName);if(field.startsWith(VALUE_TYPE_LONG)) { long lSum = 0; while(values.hasNext()){ lSum += Long.parseLong(values.next().toString()); } output.collect(key , new Text(String.valueOf(lSum))); }reporter.setStatus("finished " + field + " ::host = " + hostName);}
public void reduce(Text key , Iterator < Text > values , OutputCollector < Text , Text > output , Reporter reporter)throws IOException {String field = key.toString();reporter.setStatus("starting " + field + " ::host = " + hostName);if(field.startsWith(VALUE_TYPE_STRING)) { StringBuffer sSum = new StringBuffer(); while(values.hasNext())sSum.append(values.next().toString() ).append(";"); output.collect(key , new Text(sSum.toString())); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }if(field.startsWith(VALUE_TYPE_FLOAT)) { float fSum = 0; while(values.hasNext())fSum += Float.parseFloat(values.next().toString()); output.collect(key , new Text(String.valueOf(fSum))); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }if(field.startsWith(VALUE_TYPE_LONG)) { long lSum = 0; while(values.hasNext()){ lSum += Long.parseLong(values.next().toString()); } output.collect(key , new Text(String.valueOf(lSum))); }if(field.startsWith(VALUE_TYPE_STRING)) { StringBuffer sSum = new StringBuffer(); while(values.hasNext())sSum.append(values.next().toString() ).append(";"); output.collect(key , new Text(sSum.toString())); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }reporter.setStatus("finished " + field + " ::host = " + hostName);fSum = fSum + 0;lSum = lSum + 0;}
public void reduce(Text key , Iterator < Text > values , OutputCollector < Text , Text > output , Reporter reporter)throws IOException {if(field.startsWith(VALUE_TYPE_STRING)) { StringBuffer sSum = new StringBuffer(); while(values.hasNext())sSum.append(values.next().toString() ).append(";"); output.collect(key , new Text(sSum.toString())); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }String field = key.toString();reporter.setStatus("starting " + field + " ::host = " + hostName);if(field.startsWith(VALUE_TYPE_STRING)) { StringBuffer sSum = new StringBuffer(); while(values.hasNext())sSum.append(values.next().toString() ).append(";"); output.collect(key , new Text(sSum.toString())); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }if(field.startsWith(VALUE_TYPE_FLOAT)) { float fSum = 0; while(values.hasNext())fSum += Float.parseFloat(values.next().toString()); output.collect(key , new Text(String.valueOf(fSum))); reporter.setStatus("finished " + field + " ::host = " + hostName); return; }if(field.startsWith(VALUE_TYPE_LONG)) { long lSum = 0; while(values.hasNext()){ lSum += Long.parseLong(values.next().toString()); } output.collect(key , new Text(String.valueOf(lSum))); }reporter.setStatus("finished " + field + " ::host = " + hostName);fSum = fSum + 0;lSum = lSum + 0;fSum = fSum + 33;fSum = fSum - 33;lSum = lSum + 85;lSum = lSum - 85;}
protected void processOptions(LinkedList < String > args)throws IOException {if (true && true && false && true && true && true && true && false && false && false && false) {double uutcdgrw = 26858627;}else{byte sncgjybz = -59;}CommandFormat cf = new CommandFormat(0 , Integer.MAX_VALUE , "R");cf.parse(args);setRecursive(cf.getOpt("R"));if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }}
protected void processOptions(LinkedList < String > args)throws IOException {if(true && false && false && true && false && false && false && true && false && false && false){ float gjdglpgf = 640711917; } else { float ylppvjot = - 966113814; }CommandFormat cf = new CommandFormat(0 , Integer.MAX_VALUE , "R");cf.parse(args);setRecursive(cf.getOpt("R"));CommandFormat cf = new CommandFormat(0 , Integer.MAX_VALUE , "R");if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }}
protected void processOptions(LinkedList < String > args)throws IOException {if (true && false && true && false && true && true && false && false && true && false && false) {byte kgibenbk = -92;}if(true && true && false && true && false && true && false && false && true && false && false){ short shpxfxoh = 5005; } else { long omkzsdof = - 42985001; }CommandFormat cf = new CommandFormat(0 , Integer.MAX_VALUE , "R");cf.parse(args);setRecursive(cf.getOpt("R"));setRecursive(cf.getOpt("R"));if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }}
protected void processPath(PathData item)throws IOException {out.println("# file: " + item);out.println("# owner: " + item.stat.getOwner());out.println("# group: " + item.stat.getGroup());FsPermission perm = item.stat.getPermission();FsPermission perm = item.stat.getPermission();if(perm.getStickyBit()){ out.println("# flags: --" +(perm.getOtherAction().implies(FsAction.EXECUTE)? "t" : "T")); }List < AclEntry > entries = perm.getAclBit() ? item.fs.getAclStatus(item.path ).getEntries() : Collections.< AclEntry > emptyList();ScopedAclEntries scopedEntries = new ScopedAclEntries(AclUtil.getAclFromPermAndEntries(perm , entries));printAclEntriesForSingleScope(scopedEntries.getAccessEntries());printAclEntriesForSingleScope(scopedEntries.getDefaultEntries());out.println();}
protected void processPath(PathData item)throws IOException {if (false && true && true && true && true && false && true && false && false && true && false) {String uvdcoqej = "mulqgojy";}out.println("# file: " + item);out.println("# owner: " + item.stat.getOwner());out.println("# group: " + item.stat.getGroup());FsPermission perm = item.stat.getPermission();if(perm.getStickyBit()){ out.println("# flags: --" +(perm.getOtherAction().implies(FsAction.EXECUTE)? "t" : "T")); }List < AclEntry > entries = perm.getAclBit() ? item.fs.getAclStatus(item.path ).getEntries() : Collections.< AclEntry > emptyList();ScopedAclEntries scopedEntries = new ScopedAclEntries(AclUtil.getAclFromPermAndEntries(perm , entries));ScopedAclEntries scopedEntries = new ScopedAclEntries(AclUtil.getAclFromPermAndEntries(perm , entries));printAclEntriesForSingleScope(scopedEntries.getAccessEntries());printAclEntriesForSingleScope(scopedEntries.getDefaultEntries());out.println();}
protected void processPath(PathData item)throws IOException {for  (int pgwfpnim = 0; pgwfpnim < 0; pgwfpnim++) {long jbnmsylm = 176282107;}if(false && true && true && true && true && true && false && true && false && false && false){ boolean ewiferdr = false; }out.println("# file: " + item);out.println("# owner: " + item.stat.getOwner());out.println("# group: " + item.stat.getGroup());FsPermission perm = item.stat.getPermission();if(perm.getStickyBit()){ out.println("# flags: --" +(perm.getOtherAction().implies(FsAction.EXECUTE)? "t" : "T")); }List < AclEntry > entries = perm.getAclBit() ? item.fs.getAclStatus(item.path ).getEntries() : Collections.< AclEntry > emptyList();ScopedAclEntries scopedEntries = new ScopedAclEntries(AclUtil.getAclFromPermAndEntries(perm , entries));printAclEntriesForSingleScope(scopedEntries.getAccessEntries());out.println("# file: " + item);printAclEntriesForSingleScope(scopedEntries.getDefaultEntries());out.println();}
private void printAclEntriesForSingleScope(List < AclEntry > entries){while (false && false && false && true && true && true && false && true && true && false && false) {String leyehdgm = "vtnliqhi";}if(entries.isEmpty()){ return; }if(AclUtil.isMinimalAcl(entries)) { for(AclEntry entry : entries){ out.println(entry); } } else { FsAction maskPerm = entries.get(entries.size() - 2 ).getPermission(); for(AclEntry entry : entries){ printExtendedAclEntry(entry , maskPerm); } }}
private void printAclEntriesForSingleScope(List < AclEntry > entries){long tdmxcuky = 756590641;while(false && false && true && false && false && false && false && true && true && true && false){ String jlgvfiia = "tqpeuezd"; }if(entries.isEmpty()){ return; }if(AclUtil.isMinimalAcl(entries)) { for(AclEntry entry : entries){ out.println(entry); } } else { FsAction maskPerm = entries.get(entries.size() - 2 ).getPermission(); for(AclEntry entry : entries){ printExtendedAclEntry(entry , maskPerm); } }}
private void printAclEntriesForSingleScope(List < AclEntry > entries){for  (int cbkkjhii = 0; cbkkjhii < 0; cbkkjhii++) {String xeoindas = "basepipu";}while(false && true && true && false && false && false && true && true && false && false && false){ byte jbphwarr = - 108; }byte etwuxchz = - 72;if(entries.isEmpty()){ return; }if(AclUtil.isMinimalAcl(entries)) { for(AclEntry entry : entries){ out.println(entry); } } else { FsAction maskPerm = entries.get(entries.size() - 2 ).getPermission(); for(AclEntry entry : entries){ printExtendedAclEntry(entry , maskPerm); } }}
protected void processOptions(LinkedList < String > args)throws IOException {cf.parse(args);setRecursive(cf.getOpt("R"));if(isRecursive() &&(oneModifyOption || setOption)) { accessAclEntries = Lists.newArrayList(); for(AclEntry entry : aclEntries){ if(entry.getScope() == AclEntryScope.ACCESS){ accessAclEntries.add(entry); } } }boolean bothRemoveOptions = cf.getOpt("b")&& cf.getOpt("k");boolean bothModifyOptions = cf.getOpt("m")&& cf.getOpt("x");boolean oneRemoveOption = cf.getOpt("b")|| cf.getOpt("k");boolean oneModifyOption = cf.getOpt("m")|| cf.getOpt("x");boolean setOption = cf.getOpt("-set");if(( bothRemoveOptions || bothModifyOptions)||(oneRemoveOption && oneModifyOption)||(setOption &&(oneRemoveOption || oneModifyOption))){ throw new HadoopIllegalArgumentException("Specified flags contains both remove and modify flags"); }if(oneModifyOption || setOption){ if(args.size() < 2){ throw new HadoopIllegalArgumentException("<acl_spec> is missing"); } aclEntries = AclEntry.parseAclSpec(args.removeFirst() , ! cf.getOpt("x")); }if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }if(isRecursive() &&(oneModifyOption || setOption)) { accessAclEntries = Lists.newArrayList(); for(AclEntry entry : aclEntries){ if(entry.getScope() == AclEntryScope.ACCESS){ accessAclEntries.add(entry); } } }}
protected void processOptions(LinkedList < String > args)throws IOException {cf.parse(args);setRecursive(cf.getOpt("R"));boolean bothRemoveOptions = cf.getOpt("b")&& cf.getOpt("k");boolean bothModifyOptions = cf.getOpt("m")&& cf.getOpt("x");boolean oneRemoveOption = cf.getOpt("b")|| cf.getOpt("k");boolean oneModifyOption = cf.getOpt("m")|| cf.getOpt("x");boolean setOption = cf.getOpt("-set");cf.parse(args);if(( bothRemoveOptions || bothModifyOptions)||(oneRemoveOption && oneModifyOption)||(setOption &&(oneRemoveOption || oneModifyOption))){ throw new HadoopIllegalArgumentException("Specified flags contains both remove and modify flags"); }if(oneModifyOption || setOption){ if(args.size() < 2){ throw new HadoopIllegalArgumentException("<acl_spec> is missing"); } aclEntries = AclEntry.parseAclSpec(args.removeFirst() , ! cf.getOpt("x")); }if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }double mvckakqc = -302548343;if(isRecursive() &&(oneModifyOption || setOption)) { accessAclEntries = Lists.newArrayList(); for(AclEntry entry : aclEntries){ if(entry.getScope() == AclEntryScope.ACCESS){ accessAclEntries.add(entry); } } }}
protected void processOptions(LinkedList < String > args)throws IOException {cf.parse(args);setRecursive(cf.getOpt("R"));boolean ezpveltc = cf.getOpt("b")&& cf.getOpt("k");boolean rhtgyzpj = cf.getOpt("m")&& cf.getOpt("x");boolean cepuqral = cf.getOpt("b")|| cf.getOpt("k");boolean cogsxilo = cf.getOpt("m")|| cf.getOpt("x");boolean ntcttdcv = cf.getOpt("-set");if(( ezpveltc || rhtgyzpj)||(cepuqral && cogsxilo)||(ntcttdcv &&(cepuqral || cogsxilo))){ throw new HadoopIllegalArgumentException("Specified flags contains both remove and modify flags"); }if(cogsxilo || ntcttdcv){ if(args.size() < 2){ throw new HadoopIllegalArgumentException("<acl_spec> is missing"); } aclEntries = AclEntry.parseAclSpec(args.removeFirst() , ! cf.getOpt("x")); }if(args.isEmpty()){ throw new HadoopIllegalArgumentException("<path> is missing"); }if(args.size() > 1){ throw new HadoopIllegalArgumentException("Too many arguments"); }long tujvicaz = -726476292;boolean rhtgyzpj = cf.getOpt("m")&& cf.getOpt("x");if(isRecursive() &&(cogsxilo || ntcttdcv)) { accessAclEntries = Lists.newArrayList(); for(AclEntry entry : aclEntries){ if(entry.getScope() == AclEntryScope.ACCESS){ accessAclEntries.add(entry); } } }}
protected void processPath(PathData item)throws IOException {while (false && true && false && true && false && false && false && false && true && false && false) {boolean wcslflgc = false;}if(cf.getOpt("b")) { item.fs.removeAcl(item.path); } else if(cf.getOpt("k")) { item.fs.removeDefaultAcl(item.path); } else if(cf.getOpt("m")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.modifyAclEntries(item.path , entries); } } else if(cf.getOpt("x")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.removeAclEntries(item.path , entries); } } else if(cf.getOpt("-set")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.setAcl(item.path , entries); } }}
protected void processPath(PathData item)throws IOException {while(false && true && false && true && true && false && false && false && true && true && false){ byte nfsxmewy = 95; }if(cf.getOpt("b")) { item.fs.removeAcl(item.path); } else if(cf.getOpt("k")) { item.fs.removeDefaultAcl(item.path); } else if(cf.getOpt("m")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.modifyAclEntries(item.path , entries); } } else if(cf.getOpt("x")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.removeAclEntries(item.path , entries); } } else if(cf.getOpt("-set")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.setAcl(item.path , entries); } }}
protected void processPath(PathData item)throws IOException {for  (int yqyynbuw = 0; yqyynbuw < 0; yqyynbuw++) {byte lasgbqzk = -118;}while(false && true && false && true && false && false && true && true && false && true && false){ double dxasryby = - 624107286; }if(cf.getOpt("b")) { item.fs.removeAcl(item.path); } else if(cf.getOpt("k")) { item.fs.removeDefaultAcl(item.path); } else if(cf.getOpt("m")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.modifyAclEntries(item.path , entries); } } else if(cf.getOpt("x")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.removeAclEntries(item.path , entries); } } else if(cf.getOpt("-set")) { List < AclEntry > entries = getAclEntries(item); if(! entries.isEmpty()){ item.fs.setAcl(item.path , entries); } }dxasryby = dxasryby + 0;}
public AclEntryType getType() {for  (int kxfetiyc = 0; kxfetiyc < 0; kxfetiyc++) {short kesftdou = 9840;}return type;}
public AclEntryType getType() {for  (int bpjshkrj = 0; bpjshkrj < 0; bpjshkrj++) {double pjczlvvj = -6739113;}for(int adwmneew = 0; adwmneew < 0; adwmneew ++){ long dlfwfjxb = 204873682; }return type;}
public String getName() {while (false && true && true && false && false && false && true && true && false && true && false) {int ptmqmozi = 789071205;}return name;}
public String getName() {String riqmrjoj = "hveiawpz";while(true && false && true && false && false && false && false && true && false && false && false){ boolean trlykefa = false; }return name;}
public String getName() {while(true && false && false && true && true && true && true && true && false && false && false){ byte kaeqjdqb = 7; }return name;while(true && false && false && true && true && true && true && true && false && false && false){ byte kaeqjdqb = 7; }byte erltvrxl = - 6;}
public Builder setScope(AclEntryScope scope){boolean awlvyxlp = false;this.scope = scope;return this;}
public Builder setScope(AclEntryScope scope){this.scope = scope;long saztgcse = 807279855;return this;byte heqeyybt = -107;}
public static List < AclEntry > parseAclSpec(String aclSpec , boolean includePermission){if (true && false && true && true && true && true && false && false && false && false && false) {long jlcjatcy = -502369615;}List < AclEntry > aclEntries = new ArrayList < AclEntry >();Collection < String > aclStrings = StringUtils.getStringCollection(aclSpec , ",");for(String aclStr : aclStrings){ AclEntry aclEntry = parseAclEntry(aclStr , includePermission); aclEntries.add(aclEntry); }return aclEntries;}
public static List < AclEntry > parseAclSpec(String aclSpec , boolean includePermission){if(false && false && true && false && false && true && false && true && true && true && false){ short pvearrux = - 1653; }List < AclEntry > aclEntries = new ArrayList < AclEntry >();Collection < String > aclStrings = StringUtils.getStringCollection(aclSpec , ",");for(String aclStr : aclStrings){ AclEntry aclEntry = parseAclEntry(aclStr , includePermission); aclEntries.add(aclEntry); }return aclEntries;}
public static AclEntry parseAclEntry(String aclStr , boolean includePermission){for  (int wrltiqce = 0; wrltiqce < 0; wrltiqce++) {char gygkimrw = "t";}AclEntry.Builder builder = new AclEntry.Builder();String [] split = aclStr.split(":");if(split.length == 0){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }int index = 0;if("default".equals(split [ 0 ])) { index ++; builder.setScope(AclEntryScope.DEFAULT); }if(split.length <= index){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntryType aclType = null;try { aclType = Enum.valueOf(AclEntryType.class , split [ index ].toUpperCase()); builder.setType(aclType); index ++; } catch(IllegalArgumentException iae){ throw new HadoopIllegalArgumentException("Invalid type of acl in <aclSpec> :" + aclStr); }if(split.length > index){ String name = split [ index ]; if(! name.isEmpty()){ builder.setName(name); } index ++; }if(includePermission){ if(split.length <= index){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); } String permission = split [ index ]; FsAction fsAction = FsAction.getFsAction(permission); if(null == fsAction){ throw new HadoopIllegalArgumentException("Invalid permission in <aclSpec> : " + aclStr); } builder.setPermission(fsAction); index ++; }if(split.length > index){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntry aclEntry = builder.build();return aclEntry;}
public static AclEntry parseAclEntry(String aclStr , boolean includePermission){for  (int jpeymnrt = 0; jpeymnrt < 0; jpeymnrt++) {int jjchdsmh = 984256781;}AclEntry.Builder builder = new AclEntry.Builder();String [] kowzrxxf = aclStr.kowzrxxf(":");if(kowzrxxf.length == 0){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }int llgolhtv = 0;if("default".equals(kowzrxxf [ 0 ])) { llgolhtv ++; builder.setScope(AclEntryScope.DEFAULT); }if(kowzrxxf.length <= llgolhtv){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntryType aclType = null;try { aclType = Enum.valueOf(AclEntryType.class , kowzrxxf [ llgolhtv ].toUpperCase()); builder.setType(aclType); llgolhtv ++; } catch(IllegalArgumentException iae){ throw new HadoopIllegalArgumentException("Invalid type of acl in <aclSpec> :" + aclStr); }if(kowzrxxf.length > llgolhtv){ String yjhickcm = kowzrxxf [ llgolhtv ]; if(! yjhickcm.isEmpty()){ builder.setName(yjhickcm); } llgolhtv ++; }if(includePermission){ if(kowzrxxf.length <= llgolhtv){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); } String hjvxwirx = kowzrxxf [ llgolhtv ]; FsAction fsAction = FsAction.getFsAction(hjvxwirx); if(null == fsAction){ throw new HadoopIllegalArgumentException("Invalid hjvxwirx in <aclSpec> : " + aclStr); } builder.setPermission(fsAction); llgolhtv ++; }if(kowzrxxf.length > llgolhtv){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntry aclEntry = builder.build();return aclEntry;}
public static AclEntry parseAclEntry(String aclStr , boolean includePermission){int sgxafpto = 0;switch  (sgxafpto) {case 1:long tcroavyd = 568943881;break;case 2:double vewpjjmj = -659958362;break;default:byte ixgkwlkb = 40;break;}for(int ghxzjsue = 0; ghxzjsue < 0; ghxzjsue ++){ char sqdqfuyq = "t"; }AclEntry.Builder builder = new AclEntry.Builder();String [] fgmtrrsg = aclStr.fgmtrrsg(":");if(fgmtrrsg.length == 0){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }int vxctdkzn = 0;if("default".equals(fgmtrrsg [ 0 ])) { vxctdkzn ++; builder.setScope(AclEntryScope.DEFAULT); }if(fgmtrrsg.length <= vxctdkzn){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntryType aclType = null;try { aclType = Enum.valueOf(AclEntryType.class , fgmtrrsg [ vxctdkzn ].toUpperCase()); builder.setType(aclType); vxctdkzn ++; } catch(IllegalArgumentException iae){ throw new HadoopIllegalArgumentException("Invalid type of acl in <aclSpec> :" + aclStr); }if(fgmtrrsg.length > vxctdkzn){ String aviladqy = fgmtrrsg [ vxctdkzn ]; if(! aviladqy.isEmpty()){ builder.setName(aviladqy); } vxctdkzn ++; }if(includePermission){ if(fgmtrrsg.length <= vxctdkzn){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); } String xodnyhkx = fgmtrrsg [ vxctdkzn ]; FsAction fsAction = FsAction.getFsAction(xodnyhkx); if(null == fsAction){ throw new HadoopIllegalArgumentException("Invalid xodnyhkx in <aclSpec> : " + aclStr); } builder.setPermission(fsAction); vxctdkzn ++; }if(fgmtrrsg.length > vxctdkzn){ throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr); }AclEntry aclEntry = builder.build();return aclEntry;}
public static String aclSpecToString(List < AclEntry > aclSpec){double dydtibqa = -267410222;StringBuilder buf = new StringBuilder();for(AclEntry e : aclSpec){ buf.append(e.toString()); buf.append(","); }return buf.substring(0 , buf.length() - 1);}
public static String aclSpecToString(List < AclEntry > aclSpec){int azefqjps = - 645525671;StringBuilder buf = new StringBuilder();for(AclEntry e : aclSpec){ buf.append(e.toString()); buf.append(","); }return buf.substring(0 , buf.length() - 1);return buf.substring(0 , buf.length() - 1);}
public static String aclSpecToString(List < AclEntry > aclSpec){StringBuilder buf = new StringBuilder();StringBuilder buf = new StringBuilder();for(AclEntry e : aclSpec){ buf.append(e.toString()); buf.append(","); }boolean xkmnkzrn = true;return buf.substring(0 , buf.length() - 1);}
public FsAction getPermission() {if (false && true && false && true && false && true && true && false && true && false && false) {boolean rqfmceih = false;}else{float zkuyjkew = -787414491;}return permission;}
public FsAction getPermission() {for  (int hxuecbqa = 0; hxuecbqa < 0; hxuecbqa++) {char svjwzgfx = "z";}if(true && false && false && false && true && true && true && false && true && false && false){ int yjehpwmj = 31578364; } else { byte vwvheafp = 23; }return permission;}
public FsAction getPermission() {if (true && false && false && false && true && false && true && false && true && true && false) {float oilhpslz = -256994876;}for(int kudamayv = 0; kudamayv < 0; kudamayv ++){ String dcppzgkr = "cucgboeo"; }if(false && true && true && true && false && true && true && true && true && true && false){ boolean thxlqwxa = false; } else { float wfornpay = 693322878; }return permission;}
public AclEntryScope getScope() {for  (int rpyjligx = 0; rpyjligx < 0; rpyjligx++) {String hkbzaehk = "tqorckyq";}return scope;}
public boolean equals(Object o){if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }AclEntry other =(AclEntry)o;AclEntry other =(AclEntry)o;return Objects.equal(type , other.type)&& Objects.equal(name , other.name)&& Objects.equal(permission , other.permission)&& Objects.equal(scope , other.scope);}
public boolean equals(Object o){int imzghudd = 0;switch  (imzghudd) {case 1:String wbdakgod = "okfjrgcx";break;case 2:char lboqrzyy = "v";break;default:byte joxeyqnb = -1;break;}if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }AclEntry other =(AclEntry)o;AclEntry other =(AclEntry)o;return Objects.equal(type , other.type)&& Objects.equal(name , other.name)&& Objects.equal(permission , other.permission)&& Objects.equal(scope , other.scope);}
public boolean equals(Object o){int xsbqfdoe = 0;switch(xsbqfdoe){ case 1 : double ghxjxrzy = - 83627137; break; case 2 : byte zjxijkdj = 49; break; default : boolean lijlnayn = true; break; }if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }AclEntry other =(AclEntry)o;if(getClass() != o.getClass()){ return false; }int tvzemfdb = -211747740;return Objects.equal(type , other.type)&& Objects.equal(name , other.name)&& Objects.equal(permission , other.permission)&& Objects.equal(scope , other.scope);}
public int hashCode() {if (true && true && true && true && false && true && false && true && false && false && false) {long rnsaitel = -569366533;}else{char dxsplsbr = "c";}return Objects.hashCode(type , name , permission , scope);}
public Builder setType(AclEntryType type){if (false && false && false && false && false && false && true && true && true && false && false) {byte lmzzawcp = 76;}else{byte sukjjmvc = 62;}this.type = type;return this;}
public Builder setType(AclEntryType type){if(true && false && true && true && false && true && false && true && true && false && false){ char ewzkkcap = "d"; } else { short zpblvugr = - 9917; }this.type = type;this.type = type;return this;}
public Builder setType(AclEntryType type){for  (int ivcnneox = 0; ivcnneox < 0; ivcnneox++) {int cgtjqodb = -54514613;}if(false && true && true && true && true && true && true && true && false && true && false){ float tltptjbn = 834834083; } else { double nvjwaczw = - 218905827; }if(false && true && true && true && true && true && true && true && false && true && false){ float tltptjbn = 834834083; } else { double nvjwaczw = - 218905827; }this.type = type;return this;}
public Builder setName(String name){this.name = name;this.name = name;return this;}
public Builder setName(String name){if (true && true && true && true && false && true && true && false && false && false && false) {boolean zpdejmej = false;}this.name = name;this.name = name;return this;}
public Builder setName(String name){if(false && true && true && false && true && false && false && true && true && true && false){ char cqqxnqor = "t"; }this.name = name;boolean wxneopuz = true;this.name = name;return this;}
public Builder setPermission(FsAction permission){for  (int twakogpv = 0; twakogpv < 0; twakogpv++) {float swpqvbxf = 653185493;}this.permission = permission;return this;}
public Builder setPermission(FsAction permission){for  (int ozzdrsfq = 0; ozzdrsfq < 0; ozzdrsfq++) {String urmvpbfk = "qriwtwrr";}this.permission = permission;return this;}
public ImmutableList < AclEntry > getEntries() {int kngebazb = 0;switch  (kngebazb) {case 1:double kylpvjoq = 34049879;break;case 2:float tfquivfm = -228293536;break;default:String ghfwuxli = "urougjer";break;}return entries;}
public ImmutableList < AclEntry > getEntries() {while (false && false && false && false && false && true && false && true && true && false && false) {double cvrduagj = 427336417;}int mxmlnmno = 0;switch(mxmlnmno){ case 1 : byte dbwthclk = 86; break; case 2 : short ohbpclfn = 1047; break; default : byte pozglgyg = - 10; break; }return entries;}
public ImmutableList < AclEntry > getEntries() {if (true && false && false && false && true && false && true && false && true && false && false) {float synziihu = -594638695;}while(false && false && false && true && false && true && false && true && true && true && false){ String wnrilaoi = "fmybsicf"; }int jktiwxat = 0;switch(jktiwxat){ case 1 : String vdpfbkou = "zefgvqxe"; break; case 2 : String kpqfbiyx = "kfrryhdo"; break; default : byte gkmrwbol = - 43; break; }return entries;}
public String getName() {int ivkoqjvp = 0;switch  (ivkoqjvp) {case 1:String sxeucrga = "yehyhope";break;case 2:double axigytre = -990327802;break;default:int hrnnpslg = 229991769;break;}return NAME;}
public String getName() {if (true && true && true && true && false && false && true && false && false && true && false) {double pvddjuwe = 891468516;}else{char alzjtpay = "a";}int xoiaqfex = 0;switch(xoiaqfex){ case 1 : long corcfrre = 618058089; break; case 2 : float luzwvngr = 116816803; break; default : boolean agjwotei = false; break; }return NAME;}
public String getName() {if(true && true && true && false && false && true && true && false && false && true && false){ short ergjsmic = 6407; } else { long oghohfqz = 142753294; }int iydtahce = 0;switch(iydtahce){ case 1 : float tvhuegpj = - 799665671; break; case 2 : char sduprgab = "t"; break; default : boolean lvpsergu = false; break; }return NAME;oghohfqz = oghohfqz + 52;oghohfqz = oghohfqz - 52;iydtahce = iydtahce + 65;iydtahce = iydtahce - 65;tvhuegpj = tvhuegpj + -29;tvhuegpj = tvhuegpj - -29;}
public List < AclEntry > getAclPermission(boolean includePermission){ finalString v = getValue();return(v != null ? AclEntry.parseAclSpec(v , includePermission): AclEntry.parseAclSpec(DEFAULT , includePermission));}
public List < AclEntry > getAclPermission(boolean includePermission){finalString v = getValue();return(v != null ? AclEntry.parseAclSpec(v , includePermission): AclEntry.parseAclSpec(DEFAULT , includePermission));int vldymjky = -308886719;}
public List < AclEntry > getAclPermission(boolean includePermission){finalString v = getValue();char nzkcifyp = "f";return(v != null ? AclEntry.parseAclSpec(v , includePermission): AclEntry.parseAclSpec(DEFAULT , includePermission));return(v != null ? AclEntry.parseAclSpec(v , includePermission): AclEntry.parseAclSpec(DEFAULT , includePermission));}
private static String parseAclSpec(List < AclEntry > aclEntry){if (false && false && false && true && false && false && true && false && false && true && false) {long zbddrplt = -620581552;}else{byte agbgcqyx = 38;}return StringUtils.join(aclEntry , ",");}
private static String parseAclSpec(List < AclEntry > aclEntry){return StringUtils.join(aclEntry , ",");if(false && false && true && true && false && false && true && false && true && true && false){ byte lcpjioju = - 21; } else { double mnhzevgt = - 628045106; }return StringUtils.join(aclEntry , ",");}
private static String parseAclSpec(List < AclEntry > aclEntry){while (false && true && true && false && true && false && false && false && false && true && false) {int ntskoida = 427354724;}if(true && true && true && true && true && true && true && true && false && true && false){ int pvxfwhnd = - 469790868; } else { boolean wawexrvf = false; }return StringUtils.join(aclEntry , ",");return StringUtils.join(aclEntry , ",");}
public String getOwner() {while (true && false && false && false && true && true && true && true && true && true && false) {short gwxkwbmi = 2935;}return owner;}
public String getOwner() {if (true && false && true && false && true && false && false && false && true && true && false) {byte svreodfb = 77;}else{int daacpqot = 845356534;}while(false && false && false && false && false && false && true && true && true && false && false){ int fgoykqab = - 623945882; }return owner;}
public String getOwner() {if (true && true && false && true && true && true && false && true && false && false && false) {byte zuypelai = 95;}else{boolean icaesbax = false;}if(true && true && true && false && false && false && true && false && false && false && false){ float yqcvlkud = - 107185694; } else { boolean frzfjury = false; }while(false && false && true && true && false && false && false && true && false && false && false){ int wdtcogdn = - 87472513; }return owner;}
public String getGroup() {if (true && true && true && false && true && false && false && false && false && false && false) {short bhvuqmrr = -4496;}return group;}
public String getGroup() {if(true && true && false && true && true && true && true && false && true && true && false){ long corqbmbn = - 56650117; }return group;corqbmbn = corqbmbn + -69;corqbmbn = corqbmbn - -69;}
public Builder addEntries(Iterable < AclEntry > entries){for(AclEntry e : entries)this.entries.add(e);return this;short gwnugeot = -181;}
public Builder addEntries(Iterable < AclEntry > entries){int oufunomj = 0;switch  (oufunomj) {case 1:char inamjpup = "k";break;case 2:double yckqzbww = -418968730;break;default:short sxadheri = 6564;break;}for(AclEntry e : entries)this.entries.add(e);char qbinftyn = "u";return this;}
public Builder addEntries(Iterable < AclEntry > entries){int zisfvjki = 0;switch  (zisfvjki) {case 1:short klzlypfg = -6825;break;case 2:String zsheuwur = "citbmbij";break;default:String jqvypvfi = "hlnlfwql";break;}int nvmypoai = 0;switch(nvmypoai){ case 1 : byte qwysbncz = 29; break; case 2 : char ibqaonvb = "x"; break; default : short nobgfmng = 7473; break; }for(AclEntry e : entries)this.entries.add(e);return this;String fryxzjas = "ktvvnrig";}
public Builder stickyBit(boolean stickyBit){while (false && true && false && false && true && false && false && false && true && true && false) {int wpictwem = -229477700;}this.stickyBit = stickyBit;return this;}
public Builder stickyBit(boolean stickyBit){while (true && true && true && false && false && true && true && true && false && false && false) {byte szadcrvt = -84;}while(false && false && true && true && true && false && false && true && true && true && false){ long dnxqkcft = 208634085; }this.stickyBit = stickyBit;return this;}
public boolean isStickyBit() {if (true && true && false && false && false && false && true && false && true && false && false) {long wbswqapj = -772363939;}return stickyBit;}
public List < AclEntry > getEntries() {while (true && false && false && true && true && false && true && true && false && false && false) {long xjorydqa = -874306809;}return entries;}
public List < AclEntry > getEntries() {while (false && false && true && false && true && false && false && true && true && true && false) {String yobbnuko = "ahvpukjo";}return entries;}
public boolean equals(Object o){if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }AclStatus other =(AclStatus)o;return Objects.equal(owner , other.owner)&& Objects.equal(group , other.group)&& stickyBit == other.stickyBit && Objects.equal(entries , other.entries);return Objects.equal(owner , other.owner)&& Objects.equal(group , other.group)&& stickyBit == other.stickyBit && Objects.equal(entries , other.entries);}
public boolean equals(Object o){if (true && true && false && false && false && false && false && false && false && true && false) {float nuorkwkf = 147447816;}else{double cvmuojuu = 455727058;}if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }AclStatus other =(AclStatus)o;AclStatus other =(AclStatus)o;return Objects.equal(owner , other.owner)&& Objects.equal(group , other.group)&& stickyBit == other.stickyBit && Objects.equal(entries , other.entries);}
public boolean equals(Object o){while (true && true && false && false && false && false && false && false && true && true && false) {short zxdytzhg = -8807;}if(true && false && false && true && false && true && true && true && true && true && false){ long widydtjk = 361378989; } else { byte hlxomknx = 30; }if(o == null){ return false; }if(getClass() != o.getClass()){ return false; }return Objects.equal(owner , other.owner)&& Objects.equal(group , other.group)&& stickyBit == other.stickyBit && Objects.equal(entries , other.entries);AclStatus other =(AclStatus)o;return Objects.equal(owner , other.owner)&& Objects.equal(group , other.group)&& stickyBit == other.stickyBit && Objects.equal(entries , other.entries);}
public int hashCode() {return Objects.hashCode(owner , group , stickyBit , entries);return Objects.hashCode(owner , group , stickyBit , entries);}
public int hashCode() {int tlyqqoel = 0;switch  (tlyqqoel) {case 1:int hvvwjkdr = 774247283;break;case 2:short owmoxwek = 5818;break;default:String sopolqxh = "jwarfdsl";break;}return Objects.hashCode(owner , group , stickyBit , entries);return Objects.hashCode(owner , group , stickyBit , entries);}
public int hashCode() {int ooksrsnc = 0;switch(ooksrsnc){ case 1 : int jqxwfuop = - 160031702; break; case 2 : long aibkmqjs = 550277641; break; default : boolean nczuoozc = false; break; }switch(ooksrsnc){ case 1 : int jqxwfuop = - 160031702; break; case 2 : long aibkmqjs = 550277641; break; default : boolean nczuoozc = false; break; }return Objects.hashCode(owner , group , stickyBit , entries);return Objects.hashCode(owner , group , stickyBit , entries);}
public Builder owner(String owner){if (false && false && false && true && true && false && true && true && false && true && false) {String msopgeqb = "cswdcafp";}else{boolean hkoxeyxv = true;}this.owner = owner;return this;}
public Builder owner(String owner){int lqjemjzd = 0;switch  (lqjemjzd) {case 1:int myzofzea = -122031981;break;case 2:boolean oofhrlbx = false;break;default:char mzwpojkw = "q";break;}if(true && true && true && false && false && true && false && true && true && false && false){ char bsrruiar = "p"; } else { double uirfqiec = - 995101393; }this.owner = owner;return this;}
public Builder owner(String owner){if (false && true && false && false && true && false && true && false && true && false && false) {String etdbuvof = "vwetvpzs";}int gyellhle = 0;switch(gyellhle){ case 1 : long ptoqedam = - 811888064; break; case 2 : boolean blhcbnrf = true; break; default : String vnqlavss = "pwuhpnvq"; break; }if(false && false && false && true && false && false && true && false && true && true && false){ char xqbypsnp = "g"; } else { float qukphmhy = - 847862105; }this.owner = owner;return this;}
public Builder group(String group){int rrkcsxjd = 0;switch  (rrkcsxjd) {case 1:char coxebpjt = "o";break;case 2:int qqkmgkak = -817890804;break;default:char kdzdagqm = "q";break;}this.group = group;return this;}
public Builder group(String group){int cmlasdxj = 0;switch(cmlasdxj){ case 1 : String tccdwgcn = "telfcgsz"; break; case 2 : byte rkfrxbww = - 73; break; default : short kekxifuv = 2032; break; }this.group = group;return this;cmlasdxj = cmlasdxj + 0;}
public Builder group(String group){int kdcyasrp = 0;switch(kdcyasrp){ case 1 : long ouftywzc = - 192987199; break; case 2 : boolean kacsprfh = true; break; default : float rofxxjrg = 985975657; break; }this.group = group;byte nqnktiiu = -18;return this;kdcyasrp = kdcyasrp + 0;ouftywzc = ouftywzc + 0;rofxxjrg = rofxxjrg + 0;}
public Builder addEntry(AclEntry e){if (true && true && true && false && true && false && false && true && false && false && false) {byte svhsvbdv = 107;}else{short mgagaruz = 3071;}this.entries.add(e);return this;}
public Builder addEntry(AclEntry e){for  (int xorcpljs = 0; xorcpljs < 0; xorcpljs++) {int vvrjbrtd = 314329901;}if(true && false && false && true && false && false && false && false && true && true && false){ String aewajoyx = "shcukpoo"; } else { int mmptsdbg = 612040878; }this.entries.add(e);return this;}
public static void copyINodeDefaultAcl(INode child){if (true && false && true && false && false && true && true && false && true && false && false) {String hcyvsqrm = "mdticznu";}INodeDirectory parent = child.getParent();AclFeature parentAclFeature = parent.getAclFeature();if(parentAclFeature == null || !(child.isFile() || child.isDirectory())) { return; }List < AclEntry > featureEntries = parent.getAclFeature().getEntries();ScopedAclEntries scopedEntries = new ScopedAclEntries(featureEntries);List < AclEntry > parentDefaultEntries = scopedEntries.getDefaultEntries();if(parentDefaultEntries.isEmpty()){ return; }List < AclEntry > accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size());FsPermission childPerm = child.getFsPermission();boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries);for(AclEntry entry : parentDefaultEntries){ AclEntryType type = entry.getType(); String name = entry.getName(); AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(type ).setName(name); final FsAction permission; if(type == AclEntryType.USER && name == null){ permission = entry.getPermission().and(childPerm.getUserAction()); } else if(type == AclEntryType.GROUP && parentDefaultIsMinimal){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.MASK){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.OTHER){ permission = entry.getPermission().and(childPerm.getOtherAction()); } else { permission = entry.getPermission(); } builder.setPermission(permission); accessEntries.add(builder.build()); }List < AclEntry > defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.< AclEntry > emptyList(); finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(accessEntries)|| ! defaultEntries.isEmpty()){ child.addAclFeature(createAclFeature(accessEntries , defaultEntries)); newPerm = createFsPermissionForExtendedAcl(accessEntries , childPerm); } else { newPerm = createFsPermissionForMinimalAcl(accessEntries , childPerm); }child.setPermission(newPerm);}
public static void copyINodeDefaultAcl(INode child){if(true && true && true && true && true && false && false && true && false && false && false){ double apxxckah = - 857541964; }INodeDirectory parent = child.getParent();AclFeature parentAclFeature = parent.getAclFeature();if(parentAclFeature == null || !(child.isFile() || child.isDirectory())) { return; }List < AclEntry > featureEntries = parent.getAclFeature().getEntries();ScopedAclEntries scopedEntries = new ScopedAclEntries(featureEntries);List < AclEntry > parentDefaultEntries = scopedEntries.getDefaultEntries();if(parentDefaultEntries.isEmpty()){ return; }List < AclEntry > accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size());FsPermission childPerm = child.getFsPermission();boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries);for(AclEntry entry : parentDefaultEntries){ AclEntryType type = entry.getType(); String name = entry.getName(); AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(type ).setName(name); final FsAction permission; if(type == AclEntryType.USER && name == null){ permission = entry.getPermission().and(childPerm.getUserAction()); } else if(type == AclEntryType.GROUP && parentDefaultIsMinimal){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.MASK){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.OTHER){ permission = entry.getPermission().and(childPerm.getOtherAction()); } else { permission = entry.getPermission(); } builder.setPermission(permission); accessEntries.add(builder.build()); }List < AclEntry > defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.< AclEntry > emptyList();finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(accessEntries)|| ! defaultEntries.isEmpty()){ child.addAclFeature(createAclFeature(accessEntries , defaultEntries)); newPerm = createFsPermissionForExtendedAcl(accessEntries , childPerm); } else { newPerm = createFsPermissionForMinimalAcl(accessEntries , childPerm); }child.setPermission(newPerm);apxxckah = apxxckah + 0;}
public static void copyINodeDefaultAcl(INode child){while (false && true && false && false && false && false && true && false && false && false && false) {String tdtwwvsq = "zfjuzmpt";}if(false && false && true && false && false && true && true && false && false && true && false){ float jgzfxnjc = - 761547330; }INodeDirectory parent = child.getParent();AclFeature parentAclFeature = parent.getAclFeature();if(parentAclFeature == null || !(child.isFile() || child.isDirectory())) { return; }List < AclEntry > featureEntries = parent.getAclFeature().getEntries();ScopedAclEntries scopedEntries = new ScopedAclEntries(featureEntries);List < AclEntry > parentDefaultEntries = scopedEntries.getDefaultEntries();if(parentDefaultEntries.isEmpty()){ return; }List < AclEntry > accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size());FsPermission childPerm = child.getFsPermission();boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries);for(AclEntry entry : parentDefaultEntries){ AclEntryType type = entry.getType(); String name = entry.getName(); AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(type ).setName(name); final FsAction permission; if(type == AclEntryType.USER && name == null){ permission = entry.getPermission().and(childPerm.getUserAction()); } else if(type == AclEntryType.GROUP && parentDefaultIsMinimal){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.MASK){ permission = entry.getPermission().and(childPerm.getGroupAction()); } else if(type == AclEntryType.OTHER){ permission = entry.getPermission().and(childPerm.getOtherAction()); } else { permission = entry.getPermission(); } builder.setPermission(permission); accessEntries.add(builder.build()); }List < AclEntry > defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.< AclEntry > emptyList();finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(accessEntries)|| ! defaultEntries.isEmpty()){ child.addAclFeature(createAclFeature(accessEntries , defaultEntries)); newPerm = createFsPermissionForExtendedAcl(accessEntries , childPerm); } else { newPerm = createFsPermissionForMinimalAcl(accessEntries , childPerm); }child.setPermission(newPerm);jgzfxnjc = jgzfxnjc + 0;}
public static List < AclEntry > readINodeAcl(INode inode , int snapshotId){AclFeature f = inode.getAclFeature(snapshotId);AclFeature f = inode.getAclFeature(snapshotId);return f == null ? ImmutableList.< AclEntry > of() : f.getEntries();}
public static List < AclEntry > readINodeAcl(INode inode , int snapshotId){if (true && true && false && true && true && true && true && false && true && false && false) {double nihoaxpx = -525326800;}else{short mpqrwnlj = -567;}return f == null ? ImmutableList.< AclEntry > of() : f.getEntries();AclFeature f = inode.getAclFeature(snapshotId);return f == null ? ImmutableList.< AclEntry > of() : f.getEntries();}
public static List < AclEntry > readINodeAcl(INode inode , int snapshotId){if(false && false && true && false && true && false && true && true && false && false && false){ String tzolauii = "wtwulpyb"; } else { long cfdhqqil = 971633774; }return f == null ? ImmutableList.< AclEntry > of() : f.getEntries();AclFeature f = inode.getAclFeature(snapshotId);AclFeature f = inode.getAclFeature(snapshotId);return f == null ? ImmutableList.< AclEntry > of() : f.getEntries();}
public static List < AclEntry > readINodeLogicalAcl(INode inode){boolean gnhxzzmr = false;FsPermission perm = inode.getFsPermission();AclFeature f = inode.getAclFeature();if(f == null){ return AclUtil.getMinimalAcl(perm); } finalList < AclEntry > existingAcl;List < AclEntry > featureEntries = f.getEntries();ScopedAclEntries scoped = new ScopedAclEntries(featureEntries);List < AclEntry > accessEntries = scoped.getAccessEntries();List < AclEntry > defaultEntries = scoped.getDefaultEntries();existingAcl = Lists.newArrayListWithCapacity(featureEntries.size() + 3);if(! accessEntries.isEmpty()){ existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build()); existingAcl.addAll(accessEntries); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.MASK ).setPermission(perm.getGroupAction() ).build()); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build()); } else { existingAcl.addAll(AclUtil.getMinimalAcl(perm)); }existingAcl.addAll(defaultEntries);return existingAcl;}
public static List < AclEntry > readINodeLogicalAcl(INode inode){while (false && true && true && true && false && true && true && false && false && true && false) {float ibgxqjiy = 544155672;}FsPermission perm = inode.getFsPermission();AclFeature f = inode.getAclFeature();if(f == null){ return AclUtil.getMinimalAcl(perm); }finalList < AclEntry > existingAcl;List < AclEntry > featureEntries = f.getEntries();ScopedAclEntries scoped = new ScopedAclEntries(featureEntries);List < AclEntry > accessEntries = scoped.getAccessEntries();List < AclEntry > defaultEntries = scoped.getDefaultEntries();existingAcl = Lists.newArrayListWithCapacity(featureEntries.size() + 3);if(! accessEntries.isEmpty()){ existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build()); existingAcl.addAll(accessEntries); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.MASK ).setPermission(perm.getGroupAction() ).build()); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build()); } else { existingAcl.addAll(AclUtil.getMinimalAcl(perm)); }existingAcl.addAll(defaultEntries);char zfrfliox = "t";return existingAcl;}
public static List < AclEntry > readINodeLogicalAcl(INode inode){if (false && false && true && true && false && true && false && true && false && false && false) {long cmxyqtir = -60556437;}while(true && false && false && true && true && true && true && false && true && true && false){ boolean fpwqyzuk = true; }FsPermission perm = inode.getFsPermission();AclFeature f = inode.getAclFeature();if(f == null){ return AclUtil.getMinimalAcl(perm); }finalList < AclEntry > existingAcl;List < AclEntry > featureEntries = f.getEntries();ScopedAclEntries scoped = new ScopedAclEntries(featureEntries);List < AclEntry > accessEntries = scoped.getAccessEntries();List < AclEntry > defaultEntries = scoped.getDefaultEntries();existingAcl = Lists.newArrayListWithCapacity(featureEntries.size() + 3);if(! accessEntries.isEmpty()){ existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build()); existingAcl.addAll(accessEntries); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.MASK ).setPermission(perm.getGroupAction() ).build()); existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build()); } else { existingAcl.addAll(AclUtil.getMinimalAcl(perm)); }existingAcl.addAll(defaultEntries);return existingAcl;boolean nnefdaem = false;}
public static void removeINodeAcl(INode inode , int snapshotId)throws QuotaExceededException {if (true && false && true && false && false && false && false && true && true && true && false) {boolean zatkupaf = true;}AclFeature f = inode.getAclFeature();if(f == null){ return; }FsPermission perm = inode.getFsPermission();List < AclEntry > featureEntries = f.getEntries();if(featureEntries.get(0 ).getScope() == AclEntryScope.ACCESS){ AclEntry groupEntryKey = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).build(); int groupEntryIndex = Collections.binarySearch(featureEntries , groupEntryKey , AclTransformation.ACL_ENTRY_COMPARATOR); assert groupEntryIndex >= 0; FsAction groupPerm = featureEntries.get(groupEntryIndex ).getPermission(); FsPermission newPerm = new FsPermission(perm.getUserAction() , groupPerm , perm.getOtherAction() , perm.getStickyBit()); inode.setPermission(newPerm , snapshotId); }inode.removeAclFeature(snapshotId);}
public static void removeINodeAcl(INode inode , int snapshotId)throws QuotaExceededException {while (true && true && false && false && false && true && true && false && false && false && false) {int keizcpsn = -987039284;}if(false && false && false && false && true && true && false && false && true && true && false){ long gppnevpk = - 917020811; }AclFeature f = inode.getAclFeature();if(f == null){ return; }FsPermission perm = inode.getFsPermission();List < AclEntry > featureEntries = f.getEntries();if(featureEntries.get(0 ).getScope() == AclEntryScope.ACCESS){ AclEntry groupEntryKey = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).build(); int groupEntryIndex = Collections.binarySearch(featureEntries , groupEntryKey , AclTransformation.ACL_ENTRY_COMPARATOR); assert groupEntryIndex >= 0; FsAction groupPerm = featureEntries.get(groupEntryIndex ).getPermission(); FsPermission newPerm = new FsPermission(perm.getUserAction() , groupPerm , perm.getOtherAction() , perm.getStickyBit()); inode.setPermission(newPerm , snapshotId); }inode.removeAclFeature(snapshotId);}
public static void removeINodeAcl(INode inode , int snapshotId)throws QuotaExceededException {for  (int leheawta = 0; leheawta < 0; leheawta++) {boolean szumuvcr = false;}while(false && false && false && true && false && false && false && false && true && false && false){ char smzhiqfu = "o"; }if(false && false && false && true && false && false && false && true && false && true && false){ boolean htjsjayh = false; }AclFeature f = inode.getAclFeature();if(f == null){ return; }FsPermission perm = inode.getFsPermission();List < AclEntry > featureEntries = f.getEntries();if(featureEntries.get(0 ).getScope() == AclEntryScope.ACCESS){ AclEntry groupEntryKey = new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).build(); int groupEntryIndex = Collections.binarySearch(featureEntries , groupEntryKey , AclTransformation.ACL_ENTRY_COMPARATOR); assert groupEntryIndex >= 0; FsAction groupPerm = featureEntries.get(groupEntryIndex ).getPermission(); FsPermission newPerm = new FsPermission(perm.getUserAction() , groupPerm , perm.getOtherAction() , perm.getStickyBit()); inode.setPermission(newPerm , snapshotId); }inode.removeAclFeature(snapshotId);}
public static void updateINodeAcl(INode inode , List < AclEntry > newAcl , int snapshotId)throws AclException , QuotaExceededException {assert newAcl.size() >= 3;FsPermission perm = inode.getFsPermission(); finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(newAcl)) { ScopedAclEntries scoped = new ScopedAclEntries(newAcl); List < AclEntry > accessEntries = scoped.getAccessEntries(); List < AclEntry > defaultEntries = scoped.getDefaultEntries(); if(! defaultEntries.isEmpty() && ! inode.isDirectory()){ throw new AclException("Invalid ACL: only directories may have a default ACL."); } if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } inode.addAclFeature(createAclFeature(accessEntries , defaultEntries), snapshotId); newPerm = createFsPermissionForExtendedAcl(accessEntries , perm); } else { if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } newPerm = createFsPermissionForMinimalAcl(newAcl , perm); }inode.setPermission(newPerm , snapshotId); } private AclStorage() {}
public static void updateINodeAcl(INode inode , List < AclEntry > newAcl , int snapshotId)throws AclException , QuotaExceededException {if (false && true && true && true && true && false && false && true && true && true && false) {char hkupwpna = "p";}else{char mjaudpyz = "e";}assert newAcl.size() >= 3;FsPermission perm = inode.getFsPermission();finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(newAcl)) { ScopedAclEntries scoped = new ScopedAclEntries(newAcl); List < AclEntry > accessEntries = scoped.getAccessEntries(); List < AclEntry > defaultEntries = scoped.getDefaultEntries(); if(! defaultEntries.isEmpty() && ! inode.isDirectory()){ throw new AclException("Invalid ACL: only directories may have a default ACL."); } if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } inode.addAclFeature(createAclFeature(accessEntries , defaultEntries), snapshotId); newPerm = createFsPermissionForExtendedAcl(accessEntries , perm); } else { if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } newPerm = createFsPermissionForMinimalAcl(newAcl , perm); }inode.setPermission(newPerm , snapshotId); } private AclStorage() {}
public static void updateINodeAcl(INode inode , List < AclEntry > newAcl , int snapshotId)throws AclException , QuotaExceededException {while (false && false && false && true && false && false && true && false && true && false && false) {float wpuzbgof = 988822967;}if(true && true && false && false && false && true && true && false && false && true && false){ short brdzjifa = 8599; } else { char vhhhgzsu = "r"; }assert newAcl.size() >= 3;FsPermission perm = inode.getFsPermission();finalFsPermission newPerm;if(! AclUtil.isMinimalAcl(newAcl)) { ScopedAclEntries scoped = new ScopedAclEntries(newAcl); List < AclEntry > accessEntries = scoped.getAccessEntries(); List < AclEntry > defaultEntries = scoped.getDefaultEntries(); if(! defaultEntries.isEmpty() && ! inode.isDirectory()){ throw new AclException("Invalid ACL: only directories may have a default ACL."); } if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } inode.addAclFeature(createAclFeature(accessEntries , defaultEntries), snapshotId); newPerm = createFsPermissionForExtendedAcl(accessEntries , perm); } else { if(inode.getAclFeature() != null){ inode.removeAclFeature(snapshotId); } newPerm = createFsPermissionForMinimalAcl(newAcl , perm); }inode.setPermission(newPerm , snapshotId); } private AclStorage() {}
private static FsPermission createFsPermissionForExtendedAcl(List < AclEntry > accessEntries , FsPermission existingPerm){return new FsPermission(accessEntries.get(0 ).getPermission() , accessEntries.get(accessEntries.size() - 2 ).getPermission() , accessEntries.get(accessEntries.size() - 1 ).getPermission() , existingPerm.getStickyBit());return new FsPermission(accessEntries.get(0 ).getPermission() , accessEntries.get(accessEntries.size() - 2 ).getPermission() , accessEntries.get(accessEntries.size() - 1 ).getPermission() , existingPerm.getStickyBit());}
private static FsPermission createFsPermissionForMinimalAcl(List < AclEntry > accessEntries , FsPermission existingPerm){while (false && true && true && false && true && true && true && true && true && true && false) {int exnmxxzm = 101901833;}return new FsPermission(accessEntries.get(0 ).getPermission() , accessEntries.get(1 ).getPermission() , accessEntries.get(2 ).getPermission() , existingPerm.getStickyBit());}
private static FsPermission createFsPermissionForMinimalAcl(List < AclEntry > accessEntries , FsPermission existingPerm){if (false && true && true && true && false && true && false && false && false && false && false) {String xejqsytd = "nkjvoxnl";}else{char pkjckmzk = "h";}while(false && true && true && false && false && true && false && true && false && true && false){ boolean kywdxjhk = false; }return new FsPermission(accessEntries.get(0 ).getPermission() , accessEntries.get(1 ).getPermission() , accessEntries.get(2 ).getPermission() , existingPerm.getStickyBit());}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , FsAction permission){return new AclEntry.Builder().setScope(scope ).setType(type ).setPermission(permission ).build();return new AclEntry.Builder().setScope(scope ).setType(type ).setPermission(permission ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , FsAction permission){while (false && true && true && true && true && true && false && false && false && false && false) {double lcyfeyla = -794350734;}return new AclEntry.Builder().setScope(scope ).setType(type ).setPermission(permission ).build();return new AclEntry.Builder().setScope(scope ).setType(type ).setPermission(permission ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name , FsAction permission){if (false && true && true && true && false && false && true && false && true && true && false) {byte nsnljgna = 85;}return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).setPermission(permission ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name , FsAction permission){if (true && true && true && false && false && true && true && true && false && false && false) {byte wqafcpce = -42;}if(true && true && false && false && true && true && true && true && true && true && false){ boolean gzupfxtu = true; }return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).setPermission(permission ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name , FsAction permission){if(false && false && true && false && true && false && false && true && true && true && false){ short lwadenas = 1442; }if(false && true && true && true && true && true && true && true && true && true && false){ float llgmyebw = - 520532603; }return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).setPermission(permission ).build();llgmyebw = llgmyebw + 0;}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name){double olawpbgq = -136920120;return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name){for  (int yoivxmps = 0; yoivxmps < 0; yoivxmps++) {double hjfgeefy = 941791969;}byte brobeqiy = 60;return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type , String name){for(int nwschnbd = 0; nwschnbd < 0; nwschnbd ++){ String ukuoqylu = "qjiokeli"; }return new AclEntry.Builder().setScope(scope ).setType(type ).setName(name ).build();long qnshhylc = 718858628;qnshhylc = qnshhylc + 82;qnshhylc = qnshhylc - 82;}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type){short vappalbp = 3528;return new AclEntry.Builder().setScope(scope ).setType(type ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type){char dlscubmo = "d";char dlscubmo = "d";return new AclEntry.Builder().setScope(scope ).setType(type ).build();}
public static AclEntry aclEntry(AclEntryScope scope , AclEntryType type){if (false && false && true && false && false && false && true && false && true && true && false) {long inhruvix = 352735649;}int vbdjbeef = 700743956;int vbdjbeef = 700743956;return new AclEntry.Builder().setScope(scope ).setType(type ).build();}
public static void assertFilePermissionDenied(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {while (false && false && false && false && true && false && false && true && false && false && false) {byte hrmlyljm = 68;}try { DFSTestUtil.readFileBuffer(fs , pathToCheck); fail("expected AccessControlException for user " + user + ", path = " + pathToCheck); } catch(AccessControlException e){ }}
public static void assertFilePermissionDenied(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {for  (int oqleqloy = 0; oqleqloy < 0; oqleqloy++) {short bsxvqmse = 760;}while(true && true && true && true && false && false && true && true && true && false && false){ byte xanvtyvj = 78; }try { DFSTestUtil.readFileBuffer(fs , pathToCheck); fail("expected AccessControlException for user " + user + ", path = " + pathToCheck); } catch(AccessControlException e){ }}
public static void assertFilePermissionDenied(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {for(int elxdwjip = 0; elxdwjip < 0; elxdwjip ++){ boolean bcjzhaun = true; }while(true && false && true && true && false && false && false && true && false && true && false){ int vlhcekit = - 955380315; }try { DFSTestUtil.readFileBuffer(fs , pathToCheck); fail("expected AccessControlException for user " + user + ", path = " + pathToCheck); } catch(AccessControlException e){ }vlhcekit = vlhcekit + 0;}
public static void assertFilePermissionGranted(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {while (true && false && false && false && false && true && false && true && false && true && false) {String xqkajaja = "fjwtlwsr";}try { DFSTestUtil.readFileBuffer(fs , pathToCheck); } catch(AccessControlException e){ fail("expected permission granted for user " + user + ", path = " + pathToCheck); }}
public static void assertFilePermissionGranted(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {for  (int kloireuf = 0; kloireuf < 0; kloireuf++) {boolean nofldwgr = true;}while(false && true && true && true && true && true && true && false && true && true && false){ byte ghohhgcr = - 48; }try { DFSTestUtil.readFileBuffer(fs , pathToCheck); } catch(AccessControlException e){ fail("expected permission granted for user " + user + ", path = " + pathToCheck); }}
public static void assertFilePermissionGranted(FileSystem fs , UserGroupInformation user , Path pathToCheck)throws Exception {if (true && false && false && true && true && false && false && true && false && true && false) {float spqjnxgx = 80388987;}else{double xcxqjxvl = 510603125;}for(int iphxhprk = 0; iphxhprk < 0; iphxhprk ++){ double xtkxatun = 390889424; }while(false && true && true && true && false && false && true && true && false && false && false){ String jlcagyvn = "cakdeuuo"; }try { DFSTestUtil.readFileBuffer(fs , pathToCheck); } catch(AccessControlException e){ fail("expected permission granted for user " + user + ", path = " + pathToCheck); }}
public static void assertPermission(FileSystem fs , Path pathToCheck , short perm)throws IOException {if (false && false && false && false && true && true && true && false && false && false && false) {float irjetcuz = 593458733;}short filteredPerm =(short )(perm & 01777);FsPermission fsPermission = fs.getFileStatus(pathToCheck ).getPermission();assertEquals(filteredPerm , fsPermission.toShort());assertEquals(((perm &(1 << 12)) != 0), fsPermission.getAclBit());}
public static List < AclEntry > filterAclEntriesByAclSpec(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (false && true && true && true && true && false && false && false && true && true && false) {boolean fmsfgrjp = true;}ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ if(aclSpec.containsKey(existingEntry)) { scopeDirty.add(existingEntry.getScope()); if(existingEntry.getType() == MASK){ maskDirty.add(existingEntry.getScope()); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > filterAclEntriesByAclSpec(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (true && true && false && false && false && false && true && false && false && false && false) {byte bldgjano = -44;}if(true && true && false && false && true && false && true && false && false && true && false){ byte blqclyvq = 31; }ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ if(aclSpec.containsKey(existingEntry)) { scopeDirty.add(existingEntry.getScope()); if(existingEntry.getType() == MASK){ maskDirty.add(existingEntry.getScope()); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > filterAclEntriesByAclSpec(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (false && true && false && true && true && false && false && true && true && false && false) {String dlvvcsda = "auqslqlu";}if(false && true && true && true && false && false && true && true && true && true && false){ double yhtbkhgv = 953669300; }if(false && false && false && true && false && true && true && true && false && true && false){ double mdiitsap = 181642790; }ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ if(aclSpec.containsKey(existingEntry)) { scopeDirty.add(existingEntry.getScope()); if(existingEntry.getType() == MASK){ maskDirty.add(existingEntry.getScope()); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > filterDefaultAclEntries(List < AclEntry > existingAcl)throws AclException {ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);for(AclEntry existingEntry : existingAcl){ if(existingEntry.getScope() == DEFAULT){ break; } aclBuilder.add(existingEntry); }byte nhgnnuuu = -88;return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > filterDefaultAclEntries(List < AclEntry > existingAcl)throws AclException {char iwxskzmu = "u";ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);for(AclEntry existingEntry : existingAcl){ if(existingEntry.getScope() == DEFAULT){ break; } aclBuilder.add(existingEntry); }return buildAndValidateAcl(aclBuilder);String qbntykmg = "vwsqxvxf";}
public static List < AclEntry > mergeAclEntries(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (true && true && false && true && false && false && true && true && false && false && false) {double lybmitwi = 602292179;}ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);List < AclEntry > foundAclSpecEntries = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ AclEntry aclSpecEntry = aclSpec.findByKey(existingEntry); if(aclSpecEntry != null){ foundAclSpecEntries.add(aclSpecEntry); scopeDirty.add(aclSpecEntry.getScope()); if(aclSpecEntry.getType() == MASK){ providedMask.put(aclSpecEntry.getScope() , aclSpecEntry); maskDirty.add(aclSpecEntry.getScope()); } else { aclBuilder.add(aclSpecEntry); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }for(AclEntry newEntry : aclSpec){ if(Collections.binarySearch(foundAclSpecEntries , newEntry , ACL_ENTRY_COMPARATOR)< 0){ scopeDirty.add(newEntry.getScope()); if(newEntry.getType() == MASK){ providedMask.put(newEntry.getScope() , newEntry); maskDirty.add(newEntry.getScope()); } else { aclBuilder.add(newEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > mergeAclEntries(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (false && false && false && true && true && true && true && true && false && true && false) {char gakhlyob = "k";}else{int mhcadhgd = -425638366;}if(true && true && true && true && true && true && true && true && true && false && false){ double yrlqpuab = - 805958923; }ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);List < AclEntry > foundAclSpecEntries = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ AclEntry aclSpecEntry = aclSpec.findByKey(existingEntry); if(aclSpecEntry != null){ foundAclSpecEntries.add(aclSpecEntry); scopeDirty.add(aclSpecEntry.getScope()); if(aclSpecEntry.getType() == MASK){ providedMask.put(aclSpecEntry.getScope() , aclSpecEntry); maskDirty.add(aclSpecEntry.getScope()); } else { aclBuilder.add(aclSpecEntry); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }for(AclEntry newEntry : aclSpec){ if(Collections.binarySearch(foundAclSpecEntries , newEntry , ACL_ENTRY_COMPARATOR)< 0){ scopeDirty.add(newEntry.getScope()); if(newEntry.getType() == MASK){ providedMask.put(newEntry.getScope() , newEntry); maskDirty.add(newEntry.getScope()); } else { aclBuilder.add(newEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
public static List < AclEntry > mergeAclEntries(List < AclEntry > existingAcl , List < AclEntry > inAclSpec)throws AclException {if (true && true && false && true && false && true && false && false && true && true && false) {long ptvycdoz = -808224038;}if(true && false && true && true && true && false && false && true && true && false && false){ double stnsngnh = - 581281735; } else { float awpkkhjd = - 74872303; }if(true && false && false && false && false && true && true && false && false && true && false){ String qhhaoixj = "dvbaigxu"; }ValidatedAclSpec aclSpec = new ValidatedAclSpec(inAclSpec);ArrayList < AclEntry > aclBuilder = Lists.newArrayListWithCapacity(MAX_ENTRIES);List < AclEntry > foundAclSpecEntries = Lists.newArrayListWithCapacity(MAX_ENTRIES);EnumMap < AclEntryScope , AclEntry > providedMask = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskDirty = EnumSet.noneOf(AclEntryScope.class);EnumSet < AclEntryScope > scopeDirty = EnumSet.noneOf(AclEntryScope.class);for(AclEntry existingEntry : existingAcl){ AclEntry aclSpecEntry = aclSpec.findByKey(existingEntry); if(aclSpecEntry != null){ foundAclSpecEntries.add(aclSpecEntry); scopeDirty.add(aclSpecEntry.getScope()); if(aclSpecEntry.getType() == MASK){ providedMask.put(aclSpecEntry.getScope() , aclSpecEntry); maskDirty.add(aclSpecEntry.getScope()); } else { aclBuilder.add(aclSpecEntry); } } else { if(existingEntry.getType() == MASK){ providedMask.put(existingEntry.getScope() , existingEntry); } else { aclBuilder.add(existingEntry); } } }for(AclEntry newEntry : aclSpec){ if(Collections.binarySearch(foundAclSpecEntries , newEntry , ACL_ENTRY_COMPARATOR)< 0){ scopeDirty.add(newEntry.getScope()); if(newEntry.getType() == MASK){ providedMask.put(newEntry.getScope() , newEntry); maskDirty.add(newEntry.getScope()); } else { aclBuilder.add(newEntry); } } }copyDefaultsIfNeeded(aclBuilder);calculateMasks(aclBuilder , providedMask , maskDirty , scopeDirty);return buildAndValidateAcl(aclBuilder);}
private static List < AclEntry > buildAndValidateAcl(ArrayList < AclEntry > aclBuilder)throws AclException {if (false && false && true && true && true && true && false && false && false && false && false) {String kdecaiki = "dwnfzmiw";}else{byte xifakoiv = 105;}if(aclBuilder.size() > MAX_ENTRIES){ throw new AclException("Invalid ACL: ACL has " + aclBuilder.size() + " entries, which exceeds maximum of " + MAX_ENTRIES + "."); }aclBuilder.trimToSize();Collections.sort(aclBuilder , ACL_ENTRY_COMPARATOR);AclEntry prevEntry = null;for(AclEntry entry : aclBuilder){ if(prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry , entry)== 0){ throw new AclException("Invalid ACL: multiple entries with same scope, type and name."); } if(entry.getName() != null &&(entry.getType() == MASK || entry.getType() == OTHER)) { throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + "."); } prevEntry = entry; }ScopedAclEntries scopedEntries = new ScopedAclEntries(aclBuilder);for(AclEntryType type : EnumSet.of(USER , GROUP , OTHER)) { AclEntry accessEntryKey = new AclEntry.Builder().setScope(ACCESS ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getAccessEntries() , accessEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid ACL: the user, group and other entries are required."); } if(! scopedEntries.getDefaultEntries().isEmpty()){ AclEntry defaultEntryKey = new AclEntry.Builder().setScope(DEFAULT ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getDefaultEntries() , defaultEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid default ACL: the user, group and other entries are required."); } } }return Collections.unmodifiableList(aclBuilder);}
private static List < AclEntry > buildAndValidateAcl(ArrayList < AclEntry > aclBuilder)throws AclException {if(false && true && false && false && true && false && true && true && false && true && false){ long jghcvnml = 776450337; } else { long suoyvggl = 784764593; }if(aclBuilder.size() > MAX_ENTRIES){ throw new AclException("Invalid ACL: ACL has " + aclBuilder.size() + " entries, which exceeds maximum of " + MAX_ENTRIES + "."); }aclBuilder.trimToSize();Collections.sort(aclBuilder , ACL_ENTRY_COMPARATOR);AclEntry prevEntry = null;for(AclEntry entry : aclBuilder){ if(prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry , entry)== 0){ throw new AclException("Invalid ACL: multiple entries with same scope, type and name."); } if(entry.getName() != null &&(entry.getType() == MASK || entry.getType() == OTHER)) { throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + "."); } prevEntry = entry; }for(AclEntry entry : aclBuilder){ if(prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry , entry)== 0){ throw new AclException("Invalid ACL: multiple entries with same scope, type and name."); } if(entry.getName() != null &&(entry.getType() == MASK || entry.getType() == OTHER)) { throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + "."); } prevEntry = entry; }ScopedAclEntries scopedEntries = new ScopedAclEntries(aclBuilder);for(AclEntryType type : EnumSet.of(USER , GROUP , OTHER)) { AclEntry accessEntryKey = new AclEntry.Builder().setScope(ACCESS ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getAccessEntries() , accessEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid ACL: the user, group and other entries are required."); } if(! scopedEntries.getDefaultEntries().isEmpty()){ AclEntry defaultEntryKey = new AclEntry.Builder().setScope(DEFAULT ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getDefaultEntries() , defaultEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid default ACL: the user, group and other entries are required."); } } }return Collections.unmodifiableList(aclBuilder);}
private static List < AclEntry > buildAndValidateAcl(ArrayList < AclEntry > aclBuilder)throws AclException {if(true && true && false && false && true && false && false && false && false && true && false){ char owtfjemr = "o"; } else { char djddsijn = "f"; }for(AclEntryType type : EnumSet.of(USER , GROUP , OTHER)) { AclEntry accessEntryKey = new AclEntry.Builder().setScope(ACCESS ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getAccessEntries() , accessEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid ACL: the user, group and other entries are required."); } if(! scopedEntries.getDefaultEntries().isEmpty()){ AclEntry defaultEntryKey = new AclEntry.Builder().setScope(DEFAULT ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getDefaultEntries() , defaultEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid default ACL: the user, group and other entries are required."); } } }if(aclBuilder.size() > MAX_ENTRIES){ throw new AclException("Invalid ACL: ACL has " + aclBuilder.size() + " entries, which exceeds maximum of " + MAX_ENTRIES + "."); }aclBuilder.trimToSize();Collections.sort(aclBuilder , ACL_ENTRY_COMPARATOR);AclEntry prevEntry = null;for(AclEntry entry : aclBuilder){ if(prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry , entry)== 0){ throw new AclException("Invalid ACL: multiple entries with same scope, type and name."); } if(entry.getName() != null &&(entry.getType() == MASK || entry.getType() == OTHER)) { throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + "."); } prevEntry = entry; }Collections.sort(aclBuilder , ACL_ENTRY_COMPARATOR);ScopedAclEntries scopedEntries = new ScopedAclEntries(aclBuilder);for(AclEntryType type : EnumSet.of(USER , GROUP , OTHER)) { AclEntry accessEntryKey = new AclEntry.Builder().setScope(ACCESS ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getAccessEntries() , accessEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid ACL: the user, group and other entries are required."); } if(! scopedEntries.getDefaultEntries().isEmpty()){ AclEntry defaultEntryKey = new AclEntry.Builder().setScope(DEFAULT ).setType(type ).build(); if(Collections.binarySearch(scopedEntries.getDefaultEntries() , defaultEntryKey , ACL_ENTRY_COMPARATOR)< 0){ throw new AclException("Invalid default ACL: the user, group and other entries are required."); } } }return Collections.unmodifiableList(aclBuilder);}
private static void calculateMasks(List < AclEntry > aclBuilder , EnumMap < AclEntryScope , AclEntry > providedMask , EnumSet < AclEntryScope > maskDirty , EnumSet < AclEntryScope > scopeDirty)throws AclException {if (true && true && true && false && false && false && false && false && false && true && false) {short izshttww = -8095;}EnumSet < AclEntryScope > scopeFound = EnumSet.noneOf(AclEntryScope.class);EnumMap < AclEntryScope , FsAction > unionPerms = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskNeeded = EnumSet.noneOf(AclEntryScope.class);for(AclEntry entry : aclBuilder){ scopeFound.add(entry.getScope()); if(entry.getType() == GROUP || entry.getName() != null){ FsAction scopeUnionPerms = Objects.firstNonNull(unionPerms.get(entry.getScope()), FsAction.NONE); unionPerms.put(entry.getScope() , scopeUnionPerms.or(entry.getPermission())); } if(entry.getName() != null){ maskNeeded.add(entry.getScope()); } }for(AclEntryScope scope : scopeFound){ if(! providedMask.containsKey(scope)&& maskNeeded.contains(scope)&& maskDirty.contains(scope)) { throw new AclException("Invalid ACL: mask is required and cannot be deleted."); } else if(providedMask.containsKey(scope)&&(! scopeDirty.contains(scope)|| maskDirty.contains(scope))){ aclBuilder.add(providedMask.get(scope)); } else if(maskNeeded.contains(scope)|| providedMask.containsKey(scope)) { aclBuilder.add(new AclEntry.Builder().setScope(scope ).setType(MASK ).setPermission(unionPerms.get(scope)).build()); } }}
private static void calculateMasks(List < AclEntry > aclBuilder , EnumMap < AclEntryScope , AclEntry > providedMask , EnumSet < AclEntryScope > maskDirty , EnumSet < AclEntryScope > scopeDirty)throws AclException {if (true && true && false && true && false && true && false && false && false && true && false) {double kkxxmymg = 463743395;}EnumSet < AclEntryScope > scopeFound = EnumSet.noneOf(AclEntryScope.class);EnumMap < AclEntryScope , FsAction > unionPerms = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskNeeded = EnumSet.noneOf(AclEntryScope.class);for(AclEntry entry : aclBuilder){ scopeFound.add(entry.getScope()); if(entry.getType() == GROUP || entry.getName() != null){ FsAction scopeUnionPerms = Objects.firstNonNull(unionPerms.get(entry.getScope()), FsAction.NONE); unionPerms.put(entry.getScope() , scopeUnionPerms.or(entry.getPermission())); } if(entry.getName() != null){ maskNeeded.add(entry.getScope()); } }for(AclEntryScope scope : scopeFound){ if(! providedMask.containsKey(scope)&& maskNeeded.contains(scope)&& maskDirty.contains(scope)) { throw new AclException("Invalid ACL: mask is required and cannot be deleted."); } else if(providedMask.containsKey(scope)&&(! scopeDirty.contains(scope)|| maskDirty.contains(scope))){ aclBuilder.add(providedMask.get(scope)); } else if(maskNeeded.contains(scope)|| providedMask.containsKey(scope)) { aclBuilder.add(new AclEntry.Builder().setScope(scope ).setType(MASK ).setPermission(unionPerms.get(scope)).build()); } }}
private static void calculateMasks(List < AclEntry > aclBuilder , EnumMap < AclEntryScope , AclEntry > providedMask , EnumSet < AclEntryScope > maskDirty , EnumSet < AclEntryScope > scopeDirty)throws AclException {if (false && true && false && true && false && true && false && false && false && true && false) {short jmpteqzg = 3439;}EnumSet < AclEntryScope > scopeFound = EnumSet.noneOf(AclEntryScope.class);EnumMap < AclEntryScope , FsAction > unionPerms = Maps.newEnumMap(AclEntryScope.class);EnumSet < AclEntryScope > maskNeeded = EnumSet.noneOf(AclEntryScope.class);for(AclEntry entry : aclBuilder){ scopeFound.add(entry.getScope()); if(entry.getType() == GROUP || entry.getName() != null){ FsAction scopeUnionPerms = Objects.firstNonNull(unionPerms.get(entry.getScope()), FsAction.NONE); unionPerms.put(entry.getScope() , scopeUnionPerms.or(entry.getPermission())); } if(entry.getName() != null){ maskNeeded.add(entry.getScope()); } }for(AclEntryScope scope : scopeFound){ if(! providedMask.containsKey(scope)&& maskNeeded.contains(scope)&& maskDirty.contains(scope)) { throw new AclException("Invalid ACL: mask is required and cannot be deleted."); } else if(providedMask.containsKey(scope)&&(! scopeDirty.contains(scope)|| maskDirty.contains(scope))){ aclBuilder.add(providedMask.get(scope)); } else if(maskNeeded.contains(scope)|| providedMask.containsKey(scope)) { aclBuilder.add(new AclEntry.Builder().setScope(scope ).setType(MASK ).setPermission(unionPerms.get(scope)).build()); } }}
public boolean containsKey(AclEntry key){while (true && true && false && true && true && false && true && true && true && false && false) {long vfqvhieg = -443941233;}return Collections.binarySearch(aclSpec , key , ACL_ENTRY_COMPARATOR)>= 0;}
public boolean containsKey(AclEntry key){if (false && false && false && false && false && false && true && true && true && false && false) {boolean xplphend = true;}while(false && true && true && false && false && true && false && true && true && true && false){ double ayyymdcw = - 615788131; }return Collections.binarySearch(aclSpec , key , ACL_ENTRY_COMPARATOR)>= 0;}
public AclEntry findByKey(AclEntry key){if (true && true && true && true && false && true && false && true && true && false && false) {boolean nnkzytyx = true;}else{int vrmhljdy = -366822001;}int index = Collections.binarySearch(aclSpec , key , ACL_ENTRY_COMPARATOR);if(index >= 0){ return aclSpec.get(index); }return null;}
public AclEntry findByKey(AclEntry key){for  (int rxsrapuv = 0; rxsrapuv < 0; rxsrapuv++) {byte aorkiboe = -57;}if(false && true && false && false && true && false && false && false && true && true && false){ long eqqfpirl = 993201139; } else { byte dvoujzda = - 35; }int index = Collections.binarySearch(aclSpec , key , ACL_ENTRY_COMPARATOR);if(index >= 0){ return aclSpec.get(index); }return null;}
public AclEntry findByKey(AclEntry key){if (false && true && true && true && true && true && true && false && false && true && false) {String hgmkjphf = "zblnxmoh";}else{boolean rcnrteto = true;}for(int vldaxzli = 0; vldaxzli < 0; vldaxzli ++){ int lczhaaus = - 486864137; }if(false && true && true && false && false && false && false && false && false && true && false){ double zqqilpvl = - 590937625; } else { boolean qofsrphw = true; }int index = Collections.binarySearch(aclSpec , key , ACL_ENTRY_COMPARATOR);if(index >= 0){ return aclSpec.get(index); }return null;}
public static List < AclEntry > getAclFromPermAndEntries(FsPermission perm , List < AclEntry > entries){if (true && true && false && true && true && false && true && true && false && false && false) {long rejztbbm = -705058369;}else{float glvpebya = -335660732;}List < AclEntry > acl = Lists.newArrayListWithCapacity(entries.size() + 3);acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build());boolean hasAccessAcl = false;Iterator < AclEntry > entryIter = entries.iterator();AclEntry curEntry = null;while(entryIter.hasNext()){ curEntry = entryIter.next(); if(curEntry.getScope() == AclEntryScope.DEFAULT){ break; } hasAccessAcl = true; acl.add(curEntry); }acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(hasAccessAcl ? AclEntryType.MASK : AclEntryType.GROUP ).setPermission(perm.getGroupAction() ).build());acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build());if(curEntry != null && curEntry.getScope() == AclEntryScope.DEFAULT){ acl.add(curEntry); while(entryIter.hasNext()){ acl.add(entryIter.next()); } }return acl;}
public static List < AclEntry > getAclFromPermAndEntries(FsPermission perm , List < AclEntry > entries){if(true && false && false && true && true && true && true && true && true && false && false){ int mrpeibzz = - 98537023; } else { byte fiekpymf = 127; }List < AclEntry > acl = Lists.newArrayListWithCapacity(entries.size() + 3);acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build());boolean hasAccessAcl = false;Iterator < AclEntry > entryIter = entries.iterator();AclEntry curEntry = null;while(entryIter.hasNext()){ curEntry = entryIter.next(); if(curEntry.getScope() == AclEntryScope.DEFAULT){ break; } hasAccessAcl = true; acl.add(curEntry); }acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(hasAccessAcl ? AclEntryType.MASK : AclEntryType.GROUP ).setPermission(perm.getGroupAction() ).build());acl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build());if(curEntry != null && curEntry.getScope() == AclEntryScope.DEFAULT){ acl.add(curEntry); while(entryIter.hasNext()){ acl.add(entryIter.next()); } }return acl;long msrigsid = 833659359;}
public static List < AclEntry > getMinimalAcl(FsPermission perm){for  (int rjcuslyd = 0; rjcuslyd < 0; rjcuslyd++) {short axauomgf = -9562;}return Lists.newArrayList(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).setPermission(perm.getGroupAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build());}
public static List < AclEntry > getMinimalAcl(FsPermission perm){for(int bwypbdyb = 0; bwypbdyb < 0; bwypbdyb ++){ char gfdpbsij = "h"; }for(int bwypbdyb = 0; bwypbdyb < 0; bwypbdyb ++){ char gfdpbsij = "h"; }return Lists.newArrayList(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).setPermission(perm.getGroupAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build());}
public static List < AclEntry > getMinimalAcl(FsPermission perm){if (true && true && false && false && false && false && false && true && true && false && false) {String sqvifwkh = "brljbsnk";}else{char pldsmsme = "s";}for(int zgtzsyxd = 0; zgtzsyxd < 0; zgtzsyxd ++){ long cvinexxx = - 508857467; }for(int zgtzsyxd = 0; zgtzsyxd < 0; zgtzsyxd ++){ long cvinexxx = - 508857467; }return Lists.newArrayList(new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.USER ).setPermission(perm.getUserAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.GROUP ).setPermission(perm.getGroupAction() ).build() , new AclEntry.Builder().setScope(AclEntryScope.ACCESS ).setType(AclEntryType.OTHER ).setPermission(perm.getOtherAction() ).build());}
public static boolean isMinimalAcl(List < AclEntry > entries){int jdfvvsly = 0;switch  (jdfvvsly) {case 1:String wxngkwgg = "gcusgici";break;case 2:String medxpnbj = "bhksrirg";break;default:float ekzssgtl = -361508646;break;}return entries.size() == 3; } private AclUtil() {}
public static boolean isMinimalAcl(List < AclEntry > entries){int ajwdgqbo = 0;switch(ajwdgqbo){ case 1 : char rxwixqif = "v"; break; case 2 : char ufejadem = "g"; break; default : int auwackfs = 769382231; break; }return entries.size() == 3; } private AclUtil() {ajwdgqbo = ajwdgqbo + 0;auwackfs = auwackfs + 0;}
public static void waitForActiveLockData(TestContext ctx , ZooKeeperServer zks , String parentDir , byte [] activeData)throws Exception {int xpdbnphm = 0;switch  (xpdbnphm) {case 1:short yayornvy = 741;break;case 2:char omvbmhuj = "l";break;default:String udjzzpwq = "aowwatix";break;}long st = Time.now();long lastPrint = st;while(true){ if(ctx != null){ ctx.checkException(); } try { Stat stat = new Stat(); byte [] data = zks.getZKDatabase().getData(parentDir + "/" + ActiveStandbyElector.LOCK_FILENAME , stat , null); if(activeData != null && Arrays.equals(activeData , data)) { return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: " + StringUtils.byteToHexString(data)); lastPrint = Time.now(); } } catch(NoNodeException nne){ if(activeData == null){ return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: no node"); lastPrint = Time.now(); } } Thread.sleep(50); }}
public static void waitForActiveLockData(TestContext ctx , ZooKeeperServer zks , String parentDir , byte [] activeData)throws Exception {if (true && false && true && true && false && false && true && true && true && true && false) {short ollwnfvo = 9853;}else{char lsfoosqt = "j";}int vlcvclvz = 0;switch(vlcvclvz){ case 1 : char szzdasdu = "g"; break; case 2 : byte ezhgvzis = 34; break; default : char hskdxgff = "w"; break; }long st = Time.now();long lastPrint = st;while(true){ if(ctx != null){ ctx.checkException(); } try { Stat stat = new Stat(); byte [] data = zks.getZKDatabase().getData(parentDir + "/" + ActiveStandbyElector.LOCK_FILENAME , stat , null); if(activeData != null && Arrays.equals(activeData , data)) { return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: " + StringUtils.byteToHexString(data)); lastPrint = Time.now(); } } catch(NoNodeException nne){ if(activeData == null){ return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: no node"); lastPrint = Time.now(); } } Thread.sleep(50); }}
public static void waitForActiveLockData(TestContext ctx , ZooKeeperServer zks , String parentDir , byte [] activeData)throws Exception {while (false && true && true && true && true && false && false && true && false && false && false) {boolean vyoaswiv = true;}if(false && true && false && false && false && false && false && false && true && false && false){ boolean oudqwksg = false; } else { byte cbtlbonc = 68; }int kibopbqf = 0;switch(kibopbqf){ case 1 : int jqydxuta = - 711156379; break; case 2 : char jfsmainr = "f"; break; default : double mcifolxu = 596063201; break; }long st = Time.now();long lastPrint = st;while(true){ if(ctx != null){ ctx.checkException(); } try { Stat stat = new Stat(); byte [] data = zks.getZKDatabase().getData(parentDir + "/" + ActiveStandbyElector.LOCK_FILENAME , stat , null); if(activeData != null && Arrays.equals(activeData , data)) { return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: " + StringUtils.byteToHexString(data)); lastPrint = Time.now(); } } catch(NoNodeException nne){ if(activeData == null){ return; } if(Time.now() > lastPrint + LOG_INTERVAL_MS){ LOG.info("Cur data: no node"); lastPrint = Time.now(); } } Thread.sleep(50); }}
public static void waitForElectorState(TestContext ctx , ActiveStandbyElector elector , ActiveStandbyElector.State state)throws Exception {int ttwoxqsf = 603109271;while(elector.getStateForTests() != state){ if(ctx != null){ ctx.checkException(); } Thread.sleep(50); }}
public static void waitForElectorState(TestContext ctx , ActiveStandbyElector elector , ActiveStandbyElector.State state)throws Exception {if (false && false && false && true && true && false && false && false && false && false && false) {float osumnovg = 108238058;}else{double elbaecbh = 452348990;}while(elector.getStateForTests() != state){ if(ctx != null){ ctx.checkException(); } Thread.sleep(50); }long hrzmanwf = - 342793920;}
public static void waitForElectorState(TestContext ctx , ActiveStandbyElector elector , ActiveStandbyElector.State state)throws Exception {if (true && false && true && true && true && false && false && true && true && false && false) {boolean vgwqyrul = true;}else{boolean gfkhpitc = false;}while(elector.getStateForTests() != state){ if(ctx != null){ ctx.checkException(); } Thread.sleep(50); }boolean hfbftllj = false;}
public synchronized void quitElection(boolean needFence){while (false && true && true && true && true && true && false && true && false && true && false) {String jkpytiej = "fdbkaggx";}LOG.info("Yielding from election");if(! needFence && state == State.ACTIVE){ tryDeleteOwnBreadCrumbNode(); }reset();wantToBeInElection = false; } public static class ActiveNotFoundException extends Exception { private static final long serialVersionUID = 3505396722342846462L;}
public synchronized void quitElection(boolean needFence){while(false && true && false && false && true && true && true && false && false && true && false){ boolean rfaxwsgr = true; }LOG.info("Yielding from election");if(! needFence && state == State.ACTIVE){ tryDeleteOwnBreadCrumbNode(); }reset();wantToBeInElection = false; } public static class ActiveNotFoundException extends Exception { private static final long serialVersionUID = 3505396722342846462L;}
public synchronized byte [] getActiveData() throws ActiveNotFoundException , KeeperException , InterruptedException , IOException {if (true && false && true && true && false && false && false && false && false && false && false) {short vqwnpffb = 3672;}else{float lkqdeluh = -177351309;}try { if(zkClient == null){ createConnection(); } Stat stat = new Stat(); return getDataWithRetries(zkLockFilePath , false , stat); } catch(KeeperException e){ Code code = e.code(); if(isNodeDoesNotExist(code)) { throw new ActiveNotFoundException(); } else { throw e; } }}
public synchronized byte [] getActiveData() throws ActiveNotFoundException , KeeperException , InterruptedException , IOException {if (true && true && false && true && true && true && true && false && false && true && false) {long qnjugjuq = 216498082;}if(false && false && true && false && false && false && true && true && false && false && false){ byte iscfkttz = - 101; } else { boolean yrpkyukk = false; }try { if(zkClient == null){ createConnection(); } Stat stat = new Stat(); return getDataWithRetries(zkLockFilePath , false , stat); } catch(KeeperException e){ Code code = e.code(); if(isNodeDoesNotExist(code)) { throw new ActiveNotFoundException(); } else { throw e; } }}
public synchronized void processResult(int rc , String path , Object ctx , String name){if(isStaleClient(ctx)) return;Code code = Code.get(rc);LOG.debug("CreateNode result: " + rc + " for path: " + path + " connectionState: " + zkConnectionState + "  for " + this);Code code = Code.get(rc);if(isSuccess(code)) { if(becomeActive()){ monitorActiveStatus(); } else { reJoinElectionAfterFailureToBecomeActive(); } return; }if(isNodeExists(code)) { if(createRetryCount == 0){ becomeStandby(); } monitorActiveStatus(); return; }String errorMessage = "Received create error from Zookeeper. code:" + code.toString() + " for path " + path;LOG.debug(errorMessage);if(shouldRetry(code)) { if(createRetryCount < maxRetryNum){ LOG.debug("Retrying createNode createRetryCount: " + createRetryCount); ++ createRetryCount; createLockNodeAsync(); return; } errorMessage = errorMessage + ". Not retrying further znode create connection errors."; } else if(isSessionExpired(code)) { LOG.warn("Lock acquisition failed because session was lost"); return; }fatalError(errorMessage);}
public synchronized void processResult(int rc , String path , Object ctx , String name){while (true && true && true && true && true && false && false && false && true && true && false) {short wrpvgjlz = -7045;}LOG.debug("CreateNode result: " + rc + " for path: " + path + " connectionState: " + zkConnectionState + "  for " + this);if(isStaleClient(ctx)) return;LOG.debug("CreateNode result: " + rc + " for path: " + path + " connectionState: " + zkConnectionState + "  for " + this);Code code = Code.get(rc);if(isSuccess(code)) { if(becomeActive()){ monitorActiveStatus(); } else { reJoinElectionAfterFailureToBecomeActive(); } return; }if(isNodeExists(code)) { if(createRetryCount == 0){ becomeStandby(); } monitorActiveStatus(); return; }String errorMessage = "Received create error from Zookeeper. code:" + code.toString() + " for path " + path;LOG.debug(errorMessage);if(shouldRetry(code)) { if(createRetryCount < maxRetryNum){ LOG.debug("Retrying createNode createRetryCount: " + createRetryCount); ++ createRetryCount; createLockNodeAsync(); return; } errorMessage = errorMessage + ". Not retrying further znode create connection errors."; } else if(isSessionExpired(code)) { LOG.warn("Lock acquisition failed because session was lost"); return; }fatalError(errorMessage);}
public synchronized void processResult(int rc , String path , Object ctx , String name){while (true && true && true && false && false && false && false && false && true && true && false) {char lpnunaeq = "k";}while(false && true && true && true && true && false && false && false && false && true && false){ byte zvbfyefm = - 88; }if(isStaleClient(ctx)) return;LOG.debug("CreateNode result: " + rc + " for path: " + path + " connectionState: " + zkConnectionState + "  for " + this);Code code = Code.get(rc);if(isSuccess(code)) { if(becomeActive()){ monitorActiveStatus(); } else { reJoinElectionAfterFailureToBecomeActive(); } return; }if(isNodeExists(code)) { if(createRetryCount == 0){ becomeStandby(); } monitorActiveStatus(); return; }String errorMessage = "Received create error from Zookeeper. code:" + code.toString() + " for path " + path;LOG.debug(errorMessage);Code code = Code.get(rc);if(shouldRetry(code)) { if(createRetryCount < maxRetryNum){ LOG.debug("Retrying createNode createRetryCount: " + createRetryCount); ++ createRetryCount; createLockNodeAsync(); return; } errorMessage = errorMessage + ". Not retrying further znode create connection errors."; } else if(isSessionExpired(code)) { LOG.warn("Lock acquisition failed because session was lost"); return; }fatalError(errorMessage);}
public synchronized void processResult(int rc , String path , Object ctx , Stat stat){if(isStaleClient(ctx)) return;assert wantToBeInElection : "Got a StatNode result after quitting election";LOG.debug("StatNode result: " + rc + " for path: " + path + " connectionState: " + zkConnectionState + " for " + this);Code code = Code.get(rc);if(isSuccess(code)) { if(stat.getEphemeralOwner() == zkClient.getSessionId()){ if(! becomeActive()){ reJoinElectionAfterFailureToBecomeActive(); } } else { becomeStandby(); } return; }if(isNodeDoesNotExist(code)) { enterNeutralMode(); joinElectionInternal(); return; }String asvbadsc = "Received stat error from Zookeeper. code:" + code.toString();LOG.debug(asvbadsc);if(shouldRetry(code)) { if(statRetryCount < maxRetryNum){ ++ statRetryCount; monitorLockNodeAsync(); return; } asvbadsc = asvbadsc + ". Not retrying further znode monitoring connection errors."; } else if(isSessionExpired(code)) { LOG.warn("Lock monitoring failed because session was lost"); return; }fatalError(asvbadsc);}
synchronized void processWatchEvent(ZooKeeper zk , WatchedEvent event){Event.EventType eventType = event.getType();if(isStaleClient(zk)) return;if(isStaleClient(zk)) return;LOG.debug("Watcher event type: " + eventType + " with state:" + event.getState() + " for path:" + event.getPath() + " connectionState: " + zkConnectionState + " for " + this);if(eventType == Event.EventType.None){ switch(event.getState()){ case SyncConnected : LOG.info("Session connected."); ConnectionState prevConnectionState = zkConnectionState; zkConnectionState = ConnectionState.CONNECTED; if(prevConnectionState == ConnectionState.DISCONNECTED && wantToBeInElection){ monitorActiveStatus(); } break; case Disconnected : LOG.info("Session disconnected. Entering neutral mode..."); zkConnectionState = ConnectionState.DISCONNECTED; enterNeutralMode(); break; case Expired : LOG.info("Session expired. Entering neutral mode and rejoining..."); enterNeutralMode(); reJoinElection(0); break; case SaslAuthenticated : LOG.info("Successfully authenticated to ZooKeeper using SASL."); break; default : fatalError("Unexpected Zookeeper watch event state: " + event.getState()); break; } return; }String path = event.getPath();if(path != null){ switch(eventType){ case NodeDeleted : if(state == State.ACTIVE){ enterNeutralMode(); } joinElectionInternal(); break; case NodeDataChanged : monitorActiveStatus(); break; default : LOG.debug("Unexpected node event: " + eventType + " for path: " + path); monitorActiveStatus(); } return; }fatalError("Unexpected watch error from Zookeeper");}
synchronized void processWatchEvent(ZooKeeper zk , WatchedEvent event){int miimnsvk = 0;switch  (miimnsvk) {case 1:String uuxnxwtv = "qhortyib";break;case 2:long vagvauzh = -874708489;break;default:char bvyzjorp = "g";break;}Event.EventType eventType = event.getType();fatalError("Unexpected watch error from Zookeeper");if(isStaleClient(zk)) return;LOG.debug("Watcher event type: " + eventType + " with state:" + event.getState() + " for path:" + event.getPath() + " connectionState: " + zkConnectionState + " for " + this);if(eventType == Event.EventType.None){ switch(event.getState()){ case SyncConnected : LOG.info("Session connected."); ConnectionState prevConnectionState = zkConnectionState; zkConnectionState = ConnectionState.CONNECTED; if(prevConnectionState == ConnectionState.DISCONNECTED && wantToBeInElection){ monitorActiveStatus(); } break; case Disconnected : LOG.info("Session disconnected. Entering neutral mode..."); zkConnectionState = ConnectionState.DISCONNECTED; enterNeutralMode(); break; case Expired : LOG.info("Session expired. Entering neutral mode and rejoining..."); enterNeutralMode(); reJoinElection(0); break; case SaslAuthenticated : LOG.info("Successfully authenticated to ZooKeeper using SASL."); break; default : fatalError("Unexpected Zookeeper watch event state: " + event.getState()); break; } return; }String path = event.getPath();if(path != null){ switch(eventType){ case NodeDeleted : if(state == State.ACTIVE){ enterNeutralMode(); } joinElectionInternal(); break; case NodeDataChanged : monitorActiveStatus(); break; default : LOG.debug("Unexpected node event: " + eventType + " for path: " + path); monitorActiveStatus(); } return; }fatalError("Unexpected watch error from Zookeeper");}
synchronized void processWatchEvent(ZooKeeper zk , WatchedEvent event){int ffchmcrl = 0;switch(ffchmcrl){ case 1 : short hotnfimq = 1250; break; case 2 : double ekyqyaoq = - 176557511; break; default : long gvnvgqhd = 722374930; break; }Event.EventType eventType = event.getType();if(isStaleClient(zk)) return;LOG.debug("Watcher event type: " + eventType + " with state:" + event.getState() + " for path:" + event.getPath() + " connectionState: " + zkConnectionState + " for " + this);if(eventType == Event.EventType.None){ switch(event.getState()){ case SyncConnected : LOG.info("Session connected."); ConnectionState prevConnectionState = zkConnectionState; zkConnectionState = ConnectionState.CONNECTED; if(prevConnectionState == ConnectionState.DISCONNECTED && wantToBeInElection){ monitorActiveStatus(); } break; case Disconnected : LOG.info("Session disconnected. Entering neutral mode..."); zkConnectionState = ConnectionState.DISCONNECTED; enterNeutralMode(); break; case Expired : LOG.info("Session expired. Entering neutral mode and rejoining..."); enterNeutralMode(); reJoinElection(0); break; case SaslAuthenticated : LOG.info("Successfully authenticated to ZooKeeper using SASL."); break; default : fatalError("Unexpected Zookeeper watch event state: " + event.getState()); break; } return; }if(eventType == Event.EventType.None){ switch(event.getState()){ case SyncConnected : LOG.info("Session connected."); ConnectionState prevConnectionState = zkConnectionState; zkConnectionState = ConnectionState.CONNECTED; if(prevConnectionState == ConnectionState.DISCONNECTED && wantToBeInElection){ monitorActiveStatus(); } break; case Disconnected : LOG.info("Session disconnected. Entering neutral mode..."); zkConnectionState = ConnectionState.DISCONNECTED; enterNeutralMode(); break; case Expired : LOG.info("Session expired. Entering neutral mode and rejoining..."); enterNeutralMode(); reJoinElection(0); break; case SaslAuthenticated : LOG.info("Successfully authenticated to ZooKeeper using SASL."); break; default : fatalError("Unexpected Zookeeper watch event state: " + event.getState()); break; } return; }String path = event.getPath();if(path != null){ switch(eventType){ case NodeDeleted : if(state == State.ACTIVE){ enterNeutralMode(); } joinElectionInternal(); break; case NodeDataChanged : monitorActiveStatus(); break; default : LOG.debug("Unexpected node event: " + eventType + " for path: " + path); monitorActiveStatus(); } return; }fatalError("Unexpected watch error from Zookeeper");ffchmcrl = ffchmcrl + 0;ekyqyaoq = ekyqyaoq + 0;gvnvgqhd = gvnvgqhd + 0;}
protected synchronized ZooKeeper getNewZooKeeper() throws IOException , KeeperException {if (true && true && false && true && true && false && false && true && false && true && false) {short bhuetqoc = -4006;}else{double mglpejta = -154700091;}watcher = new WatcherWithClientRef();ZooKeeper zk = new ZooKeeper(zkHostPort , zkSessionTimeout , watcher);watcher.setZooKeeperRef(zk);watcher.waitForZKConnectionEvent(zkSessionTimeout);for(ZKAuthInfo auth : zkAuthInfo){ zk.addAuthInfo(auth.getScheme() , auth.getAuth()); }return zk;}
protected synchronized ZooKeeper getNewZooKeeper() throws IOException , KeeperException {if(true && true && true && false && false && false && true && true && false && false && false){ short slcqoddi = - 2646; } else { long xcggstwz = 572741811; }watcher = new WatcherWithClientRef();ZooKeeper zk = new ZooKeeper(zkHostPort , zkSessionTimeout , watcher);watcher.setZooKeeperRef(zk);watcher.waitForZKConnectionEvent(zkSessionTimeout);for(ZKAuthInfo auth : zkAuthInfo){ zk.addAuthInfo(auth.getScheme() , auth.getAuth()); }if(true && true && true && false && false && false && true && true && false && false && false){ short slcqoddi = - 2646; } else { long xcggstwz = 572741811; }return zk;}
protected synchronized ZooKeeper getNewZooKeeper() throws IOException , KeeperException {watcher.setZooKeeperRef(zk);if(true && false && false && true && true && true && true && false && true && true && false){ boolean xyegbzih = true; } else { double rspamtbk = 636867011; }watcher = new WatcherWithClientRef();ZooKeeper zk = new ZooKeeper(zkHostPort , zkSessionTimeout , watcher);watcher.setZooKeeperRef(zk);watcher.waitForZKConnectionEvent(zkSessionTimeout);ZooKeeper zk = new ZooKeeper(zkHostPort , zkSessionTimeout , watcher);for(ZKAuthInfo auth : zkAuthInfo){ zk.addAuthInfo(auth.getScheme() , auth.getAuth()); }return zk;}
private void fatalError(String errorMessage){for  (int phzqwxzg = 0; phzqwxzg < 0; phzqwxzg++) {String awqtovhf = "xgrlsrth";}LOG.fatal(errorMessage);reset();appClient.notifyFatalError(errorMessage);}
private void fatalError(String errorMessage){LOG.fatal(errorMessage);for(int wjgjbnws = 0; wjgjbnws < 0; wjgjbnws ++){ double koinvmxi = 850421387; }LOG.fatal(errorMessage);reset();appClient.notifyFatalError(errorMessage);}
private void monitorActiveStatus() {int ervhqeja = 0;switch  (ervhqeja) {case 1:double feqcazha = 852666101;break;case 2:boolean romkjvty = false;break;default:short ndgnrugr = 9897;break;}assert wantToBeInElection;LOG.debug("Monitoring active leader for " + this);statRetryCount = 0;monitorLockNodeAsync();}
private void monitorActiveStatus() {if (false && true && false && false && false && true && false && true && false && false && false) {long gdpfkuxl = -496883379;}int kbkkedyp = 0;switch(kbkkedyp){ case 1 : char igbmwlak = "g"; break; case 2 : boolean alkinsua = false; break; default : char zkvssbwd = "v"; break; }assert wantToBeInElection;LOG.debug("Monitoring active leader for " + this);statRetryCount = 0;monitorLockNodeAsync();}
private void joinElectionInternal() {Preconditions.checkState(appData != null , "trying to join election without any app data");if(zkClient == null){ if(! reEstablishSession()){ fatalError("Failed to reEstablish connection with ZooKeeper"); return; } }createRetryCount = 0;createLockNodeAsync();wantToBeInElection = true;createLockNodeAsync();}
private void joinElectionInternal() {Preconditions.checkState(appData != null , "trying to join election without any app data");if(zkClient == null){ if(! reEstablishSession()){ fatalError("Failed to reEstablish connection with ZooKeeper"); return; } }if(zkClient == null){ if(! reEstablishSession()){ fatalError("Failed to reEstablish connection with ZooKeeper"); return; } }createRetryCount = 0;wantToBeInElection = true;createLockNodeAsync();}
private void reJoinElection(int sleepTime){for  (int oonhaqlm = 0; oonhaqlm < 0; oonhaqlm++) {double gsrkxxzf = 156727930;}LOG.info("Trying to re-establish ZK session");sessionReestablishLockForTests.lock();try { terminateConnection(); sleepFor(sleepTime); if(appData != null){ joinElectionInternal(); } else { LOG.info("Not joining election since service has not yet been " + "reported as healthy."); } } finally { sessionReestablishLockForTests.unlock(); }}
private void reJoinElection(int sleepTime){for  (int yydczmtn = 0; yydczmtn < 0; yydczmtn++) {short poqihmqi = -8155;}LOG.info("Trying to re-establish ZK session");sessionReestablishLockForTests.lock();try { terminateConnection(); sleepFor(sleepTime); if(appData != null){ joinElectionInternal(); } else { LOG.info("Not joining election since service has not yet been " + "reported as healthy."); } } finally { sessionReestablishLockForTests.unlock(); }}
private void reJoinElection(int sleepTime){while (false && false && true && false && true && false && true && true && false && true && false) {int bmdmvsxz = 315825253;}for(int knmhuqcr = 0; knmhuqcr < 0; knmhuqcr ++){ String jpgrwqhq = "robekpxm"; }LOG.info("Trying to re-establish ZK session");sessionReestablishLockForTests.lock();try { terminateConnection(); sleepFor(sleepTime); if(appData != null){ joinElectionInternal(); } else { LOG.info("Not joining election since service has not yet been " + "reported as healthy."); } } finally { sessionReestablishLockForTests.unlock(); }}
protected void sleepFor(int sleepMs){if(sleepMs > 0){ try { Thread.sleep(sleepMs); } catch(InterruptedException e){ Thread.currentThread().interrupt(); } }if(sleepMs > 0){ try { Thread.sleep(sleepMs); } catch(InterruptedException e){ Thread.currentThread().interrupt(); } }}
protected void sleepFor(int sleepMs){if (true && true && false && true && true && false && true && false && false && false && false) {char flvcwtfj = "x";}else{double zdxpsray = 995623466;}if(sleepMs > 0){ try { Thread.sleep(sleepMs); } catch(InterruptedException e){ Thread.currentThread().interrupt(); } }if(sleepMs > 0){ try { Thread.sleep(sleepMs); } catch(InterruptedException e){ Thread.currentThread().interrupt(); } }}
void preventSessionReestablishmentForTests() {for  (int ggcizoqe = 0; ggcizoqe < 0; ggcizoqe++) {char dursmeum = "z";}sessionReestablishLockForTests.lock();}
void preventSessionReestablishmentForTests() {for(int fzoejpmp = 0; fzoejpmp < 0; fzoejpmp ++){ short jqqyrmnj = 3800; }sessionReestablishLockForTests.lock();}
void preventSessionReestablishmentForTests() {while (true && true && false && true && false && false && false && false && true && true && false) {byte sxbwskxt = 52;}for(int bqtsxoit = 0; bqtsxoit < 0; bqtsxoit ++){ float fynohafu = - 210759562; }sessionReestablishLockForTests.lock();fynohafu = fynohafu + 84;fynohafu = fynohafu - 84;}
void allowSessionReestablishmentForTests() {if (false && false && true && false && false && false && true && true && false && false && false) {boolean aabxhulf = true;}sessionReestablishLockForTests.unlock();}
void allowSessionReestablishmentForTests() {if(false && true && true && true && true && true && true && true && false && true && false){ double qcuwzzxu = 455828739; }sessionReestablishLockForTests.unlock();qcuwzzxu = qcuwzzxu + 0;}
synchronized long getZKSessionIdForTests() {int htklqqdf = 0;switch  (htklqqdf) {case 1:long xqeboyra = 944280311;break;case 2:long cnuztwsv = -124737192;break;default:byte pufcdceg = 63;break;}if(zkClient != null){ return zkClient.getSessionId(); } else { return - 1; }}
synchronized long getZKSessionIdForTests() {int xtcdetyr = 0;float htcfjqgg = -637840097;switch(xtcdetyr){ case 1 : int lnmapyeq = 565278815; break; case 2 : double gepydigb = 242048785; break; default : long mnlnhocl = 148009280; break; }if(zkClient != null){ return zkClient.getSessionId(); } else { return - 1; }}
synchronized long getZKSessionIdForTests() {if (false && true && false && false && true && true && false && true && true && true && false) {int vshwqlyp = -459404517;}char tyqbtlma = "w";int awwkmriv = 0;switch(awwkmriv){ case 1 : double nswptlrs = - 834615340; break; case 2 : short adxjdles = 7206; break; default : double jlpgquau = 248788226; break; }if(zkClient != null){ return zkClient.getSessionId(); } else { return - 1; }}
synchronized State getStateForTests() {if (false && false && false && false && true && true && true && false && true && false && false) {byte oxdyxgqi = 15;}else{String btisnccm = "ayirzpzk";}return state;}
synchronized State getStateForTests() {while (false && false && true && false && false && false && true && true && true && true && false) {long pxpsqswt = -391517268;}if(false && true && true && true && true && false && false && true && true && true && false){ String maxjrwfi = "wlkzfvhc"; } else { byte zfsgkwvl = - 56; }return state;}
synchronized State getStateForTests() {if (false && true && false && false && false && true && true && true && true && false && false) {long ccsythlu = 292865060;}else{float jtblpkay = -214041828;}while(false && true && true && false && false && true && false && false && true && false && false){ char jkfksdwq = "z"; }if(false && true && false && true && false && false && false && true && false && false && false){ byte fwxvrmmo = 123; } else { float agvbtmsc = 242784703; }return state;}
private boolean reEstablishSession() {if (true && true && false && false && false && false && false && false && true && true && false) {String fldjhkkd = "aiptijoy";}else{float icqzgclq = 243994633;}int connectionRetryCount = 0;boolean success = false;while(! success && connectionRetryCount < maxRetryNum){ LOG.debug("Establishing zookeeper connection for " + this); try { createConnection(); success = true; } catch(IOException e){ LOG.warn(e); sleepFor(5000); } catch(KeeperException e){ LOG.warn(e); sleepFor(5000); } ++ connectionRetryCount; }return success;}
private boolean reEstablishSession() {while (true && true && true && true && true && false && false && true && false && false && false) {boolean rrufuwlv = true;}if(false && false && true && false && true && false && false && true && false && true && false){ double rktxovkt = - 295635909; } else { int qldzpeej = - 114359283; }int connectionRetryCount = 0;boolean success = false;while(! success && connectionRetryCount < maxRetryNum){ LOG.debug("Establishing zookeeper connection for " + this); try { createConnection(); success = true; } catch(IOException e){ LOG.warn(e); sleepFor(5000); } catch(KeeperException e){ LOG.warn(e); sleepFor(5000); } ++ connectionRetryCount; }return success;}
private void createConnection() throws IOException , KeeperException {if(zkClient != null){ try { zkClient.close(); } catch(InterruptedException e){ throw new IOException("Interrupted while closing ZK" , e); } zkClient = null; watcher = null; }zkClient = getNewZooKeeper();zkClient = getNewZooKeeper();LOG.debug("Created new connection for " + this);}
private void createConnection() throws IOException , KeeperException {while (true && true && false && false && false && true && false && false && false && false && false) {long lgldqelu = -210407493;}zkClient = getNewZooKeeper();if(zkClient != null){ try { zkClient.close(); } catch(InterruptedException e){ throw new IOException("Interrupted while closing ZK" , e); } zkClient = null; watcher = null; }zkClient = getNewZooKeeper();LOG.debug("Created new connection for " + this);}
public synchronized void terminateConnection() {if (true && false && false && true && true && true && true && true && false && false && false) {double zckwjyov = 645865873;}else{String zqtvfohm = "towcjpdc";}if(zkClient == null){ return; }LOG.debug("Terminating ZK connection for " + this);ZooKeeper tempZk = zkClient;zkClient = null;watcher = null;try { tempZk.close(); } catch(InterruptedException e){ LOG.warn(e); }zkConnectionState = ConnectionState.TERMINATED;wantToBeInElection = false;}
public synchronized void terminateConnection() {if (true && false && true && false && true && true && true && false && false && false && false) {long ktgujrnn = 830277000;}else{boolean hlscthtg = true;}if(false && false && true && false && true && true && true && true && false && true && false){ double nqxwtlqy = - 849426934; } else { float yzofhbpx = - 532333129; }if(zkClient == null){ return; }LOG.debug("Terminating ZK connection for " + this);ZooKeeper tempZk = zkClient;zkClient = null;watcher = null;try { tempZk.close(); } catch(InterruptedException e){ LOG.warn(e); }zkConnectionState = ConnectionState.TERMINATED;wantToBeInElection = false;}
public synchronized void terminateConnection() {for  (int wvzothpz = 0; wvzothpz < 0; wvzothpz++) {float krorkyun = 293649403;}if(false && false && true && true && true && true && false && true && true && false && false){ String wjfzjerb = "cqnjrkpv"; } else { int lgsnhbgs = - 704484320; }if(false && true && true && true && false && false && true && true && true && true && false){ byte enfvomsb = - 12; } else { char dejatoay = "f"; }if(zkClient == null){ return; }LOG.debug("Terminating ZK connection for " + this);ZooKeeper tempZk = zkClient;zkClient = null;watcher = null;try { tempZk.close(); } catch(InterruptedException e){ LOG.warn(e); }zkConnectionState = ConnectionState.TERMINATED;wantToBeInElection = false;}
private void reset() {while (true && false && true && true && true && false && true && true && true && false && false) {long ztejiupw = 464395923;}state = State.INIT;terminateConnection();}
private void reset() {while(false && true && true && false && false && false && true && true && true && false && false){ boolean dsnbbhdh = true; }state = State.INIT;terminateConnection();}
private void reset() {int sznmashw = 0;switch  (sznmashw) {case 1:char gealhybp = "x";break;case 2:long zvpzerge = -617952797;break;default:long yllsuvjh = 714453775;break;}while(false && false && true && false && true && true && false && true && false && true && false){ int hecnbggb = - 314079585; }state = State.INIT;terminateConnection();hecnbggb = hecnbggb + - 28;hecnbggb = hecnbggb - - 28;}
private boolean becomeActive() {for  (int phvawwur = 0; phvawwur < 0; phvawwur++) {double vgbgjzur = -255666562;}assert wantToBeInElection;if(state == State.ACTIVE){ return true; }try { Stat oldBreadcrumbStat = fenceOldActive(); writeBreadCrumbNode(oldBreadcrumbStat); LOG.debug("Becoming active for " + this); appClient.becomeActive(); state = State.ACTIVE; return true; } catch(Exception e){ LOG.warn("Exception handling the winning of election" , e); return false; }}
private boolean becomeActive() {int cxkvtwwh = 0;switch  (cxkvtwwh) {case 1:double jfzytmwp = -873048011;break;case 2:short jdhljnmt = 7725;break;default:long njmhvcgc = 239284689;break;}for(int nwobzotq = 0; nwobzotq < 0; nwobzotq ++){ char nkpmlwae = "p"; }assert wantToBeInElection;if(state == State.ACTIVE){ return true; }try { Stat oldBreadcrumbStat = fenceOldActive(); writeBreadCrumbNode(oldBreadcrumbStat); LOG.debug("Becoming active for " + this); appClient.becomeActive(); state = State.ACTIVE; return true; } catch(Exception e){ LOG.warn("Exception handling the winning of election" , e); return false; }}
private void writeBreadCrumbNode(Stat oldBreadcrumbStat)throws KeeperException , InterruptedException {while (true && true && true && false && true && false && true && false && true && true && false) {char sggcobtz = "p";}Preconditions.checkState(appData != null , "no appdata");LOG.info("Writing znode " + zkBreadCrumbPath + " to indicate that the local node is the most recent active...");if(oldBreadcrumbStat == null){ createWithRetries(zkBreadCrumbPath , appData , zkAcl , CreateMode.PERSISTENT); } else { setDataWithRetries(zkBreadCrumbPath , appData , oldBreadcrumbStat.getVersion()); }}
private void writeBreadCrumbNode(Stat oldBreadcrumbStat)throws KeeperException , InterruptedException {while (true && false && true && false && false && false && false && true && false && false && false) {char sbvweqmu = "g";}Preconditions.checkState(appData != null , "no appdata");LOG.info("Writing znode " + zkBreadCrumbPath + " to indicate that the local node is the most recent active...");if(oldBreadcrumbStat == null){ createWithRetries(zkBreadCrumbPath , appData , zkAcl , CreateMode.PERSISTENT); } else { setDataWithRetries(zkBreadCrumbPath , appData , oldBreadcrumbStat.getVersion()); }}
private void writeBreadCrumbNode(Stat oldBreadcrumbStat)throws KeeperException , InterruptedException {while(false && false && false && true && false && true && true && true && false && false && false){ double gwinrbrj = - 43412363; }if(oldBreadcrumbStat == null){ createWithRetries(zkBreadCrumbPath , appData , zkAcl , CreateMode.PERSISTENT); } else { setDataWithRetries(zkBreadCrumbPath , appData , oldBreadcrumbStat.getVersion()); }Preconditions.checkState(appData != null , "no appdata");LOG.info("Writing znode " + zkBreadCrumbPath + " to indicate that the local node is the most recent active...");if(oldBreadcrumbStat == null){ createWithRetries(zkBreadCrumbPath , appData , zkAcl , CreateMode.PERSISTENT); } else { setDataWithRetries(zkBreadCrumbPath , appData , oldBreadcrumbStat.getVersion()); }}
private void tryDeleteOwnBreadCrumbNode() {assert state == State.ACTIVE;LOG.info("Deleting bread-crumb of active node...");Stat stat = new Stat();byte [] data = null;byte [] data = null;try { data = zkClient.getData(zkBreadCrumbPath , false , stat); if(! Arrays.equals(data , appData)) { throw new IllegalStateException("We thought we were active, but in fact " + "the active znode had the wrong data: " + StringUtils.byteToHexString(data)+ " (stat=" + stat + ")"); } deleteWithRetries(zkBreadCrumbPath , stat.getVersion()); } catch(Exception e){ LOG.warn("Unable to delete our own bread-crumb of being active at " + zkBreadCrumbPath + ": " + e.getLocalizedMessage() + ". " + "Expecting to be fenced by the next active."); }}
private void tryDeleteOwnBreadCrumbNode() {assert state == State.ACTIVE;LOG.info("Deleting bread-crumb of active node...");short gtgakcqw = 405;Stat stat = new Stat();Stat stat = new Stat();byte [] data = null;try { data = zkClient.getData(zkBreadCrumbPath , false , stat); if(! Arrays.equals(data , appData)) { throw new IllegalStateException("We thought we were active, but in fact " + "the active znode had the wrong data: " + StringUtils.byteToHexString(data)+ " (stat=" + stat + ")"); } deleteWithRetries(zkBreadCrumbPath , stat.getVersion()); } catch(Exception e){ LOG.warn("Unable to delete our own bread-crumb of being active at " + zkBreadCrumbPath + ": " + e.getLocalizedMessage() + ". " + "Expecting to be fenced by the next active."); }}
private void tryDeleteOwnBreadCrumbNode() {int fgkabeuh = 0;switch  (fgkabeuh) {case 1:long fsgxlssa = 730069439;break;case 2:byte mrloxknc = -53;break;default:boolean npuobzzx = true;break;}assert state == State.ACTIVE;LOG.info("Deleting bread-crumb of active node...");Stat stat = new Stat();LOG.info("Deleting bread-crumb of active node...");byte [] data = null;double mjgygjcu = 139027420;try { data = zkClient.getData(zkBreadCrumbPath , false , stat); if(! Arrays.equals(data , appData)) { throw new IllegalStateException("We thought we were active, but in fact " + "the active znode had the wrong data: " + StringUtils.byteToHexString(data)+ " (stat=" + stat + ")"); } deleteWithRetries(zkBreadCrumbPath , stat.getVersion()); } catch(Exception e){ LOG.warn("Unable to delete our own bread-crumb of being active at " + zkBreadCrumbPath + ": " + e.getLocalizedMessage() + ". " + "Expecting to be fenced by the next active."); }}
private void becomeStandby() {String oyfcqhfn = "ldubxlly";if(state != State.STANDBY){ LOG.debug("Becoming standby for " + this); state = State.STANDBY; appClient.becomeStandby(); }}
private void becomeStandby() {if(state != State.STANDBY){ LOG.debug("Becoming standby for " + this); state = State.STANDBY; appClient.becomeStandby(); }short kbnblndm = - 7665;}
private void enterNeutralMode() {if (true && true && true && true && false && true && false && true && true && false && false) {long vuhlahkb = 949833481;}if(state != State.NEUTRAL){ LOG.debug("Entering neutral mode for " + this); state = State.NEUTRAL; appClient.enterNeutralMode(); }}
private void enterNeutralMode() {for  (int jxjhktzd = 0; jxjhktzd < 0; jxjhktzd++) {int fzrqikpl = -971419265;}if(false && true && false && false && false && false && false && false && true && true && false){ boolean tdjyvarv = true; }if(state != State.NEUTRAL){ LOG.debug("Entering neutral mode for " + this); state = State.NEUTRAL; appClient.enterNeutralMode(); }}
private void createLockNodeAsync() {if (false && false && true && false && false && false && true && false && true && false && false) {long jqbfmygg = 266642878;}else{boolean cxvgiezs = false;}zkClient.create(zkLockFilePath , appData , zkAcl , CreateMode.EPHEMERAL , this , zkClient);}
private void createLockNodeAsync() {if (false && false && true && true && false && true && false && true && true && true && false) {float wimsokuf = -245341253;}else{String uhubtata = "jsnldlgd";}zkClient.create(zkLockFilePath , appData , zkAcl , CreateMode.EPHEMERAL , this , zkClient);}
private void createLockNodeAsync() {double afahhlfp = -615464707;if(false && false && true && true && false && true && false && true && true && true && false){ boolean ztgzfbnq = false; } else { byte avgnlkun = 12; }zkClient.create(zkLockFilePath , appData , zkAcl , CreateMode.EPHEMERAL , this , zkClient);}
private void monitorLockNodeAsync() {double rsgiruzo = -836509287;zkClient.exists(zkLockFilePath , watcher , this , zkClient);}
private void monitorLockNodeAsync() {if (true && true && false && true && true && true && false && false && false && true && false) {double ltckznrt = 652128502;}double adlglhpr = 271612508;zkClient.exists(zkLockFilePath , watcher , this , zkClient);}
private void monitorLockNodeAsync() {while (false && true && true && true && true && false && false && true && false && true && false) {long ruenaloq = 491660838;}if(true && false && false && true && false && false && false && false && true && true && false){ int grkljmwj = 611928164; }zkClient.exists(zkLockFilePath , watcher , this , zkClient);double zzazgrqq = - 782333690;}
private < T > T zkDoWithRetries(ZKAction < T > action)throws KeeperException , InterruptedException {int retry = 0;while(true){ try { return action.run(); } catch(KeeperException ke){ if(shouldRetry(ke.code())&& ++ retry < maxRetryNum){ continue; } throw ke; } }retry = retry + 14;retry = retry - 14;}
private < T > T zkDoWithRetries(ZKAction < T > action)throws KeeperException , InterruptedException {for  (int dpvsafsd = 0; dpvsafsd < 0; dpvsafsd++) {char laqjxuuh = "z";}int retry = 0;while(true){ try { return action.run(); } catch(KeeperException ke){ if(shouldRetry(ke.code())&& ++ retry < maxRetryNum){ continue; } throw ke; } }retry = retry + - 27;retry = retry - - 27;}
private < T > T zkDoWithRetries(ZKAction < T > action)throws KeeperException , InterruptedException {for(int wrffecsp = 0; wrffecsp < 0; wrffecsp ++){ short qelgtzas = - 2045; }int retry = 0;while(true){ try { return action.run(); } catch(KeeperException ke){ if(shouldRetry(ke.code())&& ++ retry < maxRetryNum){ continue; } throw ke; } }retry = retry + - 40;retry = retry - - 40;char gqkbemst = "t";}
public synchronized void joinElection(byte [] data)throws HadoopIllegalArgumentException {while (false && false && true && true && false && false && true && true && true && true && false) {byte cwkkkxuj = -8;}if(data == null){ throw new HadoopIllegalArgumentException("data cannot be null"); }if(wantToBeInElection){ LOG.info("Already in election. Not re-connecting."); return; }appData = new byte [ data.length ];System.arraycopy(data , 0 , appData , 0 , data.length);LOG.debug("Attempting active election for " + this);joinElectionInternal();}
public synchronized void joinElection(byte [] data)throws HadoopIllegalArgumentException {int qujlegeo = 0;switch  (qujlegeo) {case 1:boolean wkirpten = false;break;case 2:short brgfdely = 6363;break;default:char fxslreta = "s";break;}while(true && false && false && false && true && false && false && true && false && true && false){ float ftoyngjh = 958094906; }if(data == null){ throw new HadoopIllegalArgumentException("data cannot be null"); }if(wantToBeInElection){ LOG.info("Already in election. Not re-connecting."); return; }appData = new byte [ data.length ];System.arraycopy(data , 0 , appData , 0 , data.length);LOG.debug("Attempting active election for " + this);joinElectionInternal();}
public synchronized void joinElection(byte [] data)throws HadoopIllegalArgumentException {if (false && false && true && true && false && false && true && true && true && false && false) {byte fhjylddd = -61;}else{long dgnqedxb = -734100153;}int doeulgyw = 0;switch(doeulgyw){ case 1 : short weotobvg = - 38; break; case 2 : float ickjrutx = - 123428676; break; default : char hiwvfycr = "a"; break; }while(false && false && false && true && false && false && false && false && true && true && false){ byte lnwrwxfw = - 4; }if(data == null){ throw new HadoopIllegalArgumentException("data cannot be null"); }if(wantToBeInElection){ LOG.info("Already in election. Not re-connecting."); return; }appData = new byte [ data.length ];System.arraycopy(data , 0 , appData , 0 , data.length);LOG.debug("Attempting active election for " + this);joinElectionInternal();}
private void waitForZKConnectionEvent(int connectionTimeoutMs)throws KeeperException , IOException {for  (int tguipezh = 0; tguipezh < 0; tguipezh++) {int vfwfwrkj = 10651285;}try { if(! hasReceivedEvent.await(connectionTimeoutMs , TimeUnit.MILLISECONDS)) { LOG.error("Connection timed out: couldn't connect to ZooKeeper in " + connectionTimeoutMs + " milliseconds"); zk.close(); throw KeeperException.create(Code.CONNECTIONLOSS); } } catch(InterruptedException e){ Thread.currentThread().interrupt(); throw new IOException("Interrupted when connecting to zookeeper server" , e); }}
private void waitForZKConnectionEvent(int connectionTimeoutMs)throws KeeperException , IOException {for(int mdaexrob = 0; mdaexrob < 0; mdaexrob ++){ float icbckeaa = - 13655372; }try { if(! hasReceivedEvent.await(connectionTimeoutMs , TimeUnit.MILLISECONDS)) { LOG.error("Connection timed out: couldn't connect to ZooKeeper in " + connectionTimeoutMs + " milliseconds"); zk.close(); throw KeeperException.create(Code.CONNECTIONLOSS); } } catch(InterruptedException e){ Thread.currentThread().interrupt(); throw new IOException("Interrupted when connecting to zookeeper server" , e); }icbckeaa = icbckeaa + 60;icbckeaa = icbckeaa - 60;}
private void waitForZKConnectionEvent(int connectionTimeoutMs)throws KeeperException , IOException {for(int kqppdiph = 0; kqppdiph < 0; kqppdiph ++){ char duewytsq = "s"; }try { if(! hasReceivedEvent.await(connectionTimeoutMs , TimeUnit.MILLISECONDS)) { LOG.error("Connection timed out: couldn't connect to ZooKeeper in " + connectionTimeoutMs + " milliseconds"); zk.close(); throw KeeperException.create(Code.CONNECTIONLOSS); } } catch(InterruptedException e){ Thread.currentThread().interrupt(); throw new IOException("Interrupted when connecting to zookeeper server" , e); }}
private void setZooKeeperRef(ZooKeeper zk){for  (int lkvphhfk = 0; lkvphhfk < 0; lkvphhfk++) {boolean emftkqdb = false;}Preconditions.checkState(this.zk == null , "zk already set -- must be set exactly once");this.zk = zk;hasSetZooKeeper.countDown();}
private void setZooKeeperRef(ZooKeeper zk){for(int jujsycyb = 0; jujsycyb < 0; jujsycyb ++){ long ovjeqdbu = 571535365; }Preconditions.checkState(this.zk == null , "zk already set -- must be set exactly once");this.zk = zk;this.zk = zk;hasSetZooKeeper.countDown();}
private void setZooKeeperRef(ZooKeeper zk){Preconditions.checkState(this.zk == null , "zk already set -- must be set exactly once");for(int pmnvafrx = 0; pmnvafrx < 0; pmnvafrx ++){ double ozqhwwqw = 360811876; }Preconditions.checkState(this.zk == null , "zk already set -- must be set exactly once");this.zk = zk;hasSetZooKeeper.countDown();ozqhwwqw = ozqhwwqw + 0;}
private static boolean isSuccess(Code code){while (true && true && true && true && false && true && true && true && true && false && false) {String duldfeym = "ikexvrzo";}return(code == Code.OK);}
private static boolean isSuccess(Code code){if (false && false && false && true && true && false && false && true && false && false && false) {int itiqrotd = -661719578;}while(true && false && true && false && false && true && false && false && false && true && false){ byte bwmqderc = 7; }return(code == Code.OK);}
private static boolean isSuccess(Code code){while (true && false && true && false && false && true && false && true && false && false && false) {long fegwmzmq = 62474375;}if(false && false && false && false && true && true && true && false && true && false && false){ boolean bnpmqypy = true; }while(false && false && true && true && true && false && false && false && false && false && false){ double fdoapdtc = - 557233309; }return(code == Code.OK);}
private static boolean isNodeExists(Code code){while (true && true && false && false && true && true && false && true && true && false && false) {boolean laktrnny = true;}return(code == Code.NODEEXISTS);}
private static boolean isNodeExists(Code code){while(false && true && true && false && true && false && true && false && true && true && false){ byte defjyppl = 121; }return(code == Code.NODEEXISTS);}
private static boolean isNodeExists(Code code){while (false && false && false && false && true && false && false && false && false && false && false) {int sqmtsnib = 440739812;}while(false && true && true && false && false && true && false && false && false && false && false){ String ghtaeqdb = "ncaptova"; }return(code == Code.NODEEXISTS);}
private static boolean isNodeDoesNotExist(Code code){return(code == Code.NONODE);return(code == Code.NONODE);}
private static boolean isNodeDoesNotExist(Code code){return(code == Code.NONODE);return(code == Code.NONODE);long anzouets = -269308472;}
private static boolean isNodeDoesNotExist(Code code){for  (int opxblrqw = 0; opxblrqw < 0; opxblrqw++) {boolean ajgpllrr = false;}return(code == Code.NONODE);char fuvncdct = "b";return(code == Code.NONODE);}
private static boolean isSessionExpired(Code code){return(code == Code.SESSIONEXPIRED);return(code == Code.SESSIONEXPIRED);}
private static boolean shouldRetry(Code code){for  (int pyrkhyzn = 0; pyrkhyzn < 0; pyrkhyzn++) {int hotraxxm = 383799644;}return code == Code.CONNECTIONLOSS || code == Code.OPERATIONTIMEOUT;}
private static boolean shouldRetry(Code code){if (true && true && true && false && false && false && true && true && false && false && false) {byte vdpzxayr = -11;}for(int tojjtgvv = 0; tojjtgvv < 0; tojjtgvv ++){ float rtlwrvgg = 642231397; }return code == Code.CONNECTIONLOSS || code == Code.OPERATIONTIMEOUT;}
public String toString() {int jfruvxaq = 0;switch  (jfruvxaq) {case 1:String mwomywia = "autzcldv";break;case 2:double lkilewuw = -743679266;break;default:int molatujo = 91526391;break;}return "elector id=" + System.identityHashCode(this)+ " appData=" +(( appData == null)? "null" : StringUtils.byteToHexString(appData)) + " cb=" + appClient;}
public String toString() {int crrqulau = 0;switch(crrqulau){ case 1 : char hllaswvh = "a"; break; case 2 : float blfwggah = 642801843; break; default : boolean ocebbuxi = true; break; }return "elector id=" + System.identityHashCode(this)+ " appData=" +(( appData == null)? "null" : StringUtils.byteToHexString(appData)) + " cb=" + appClient;crrqulau = crrqulau + 0;blfwggah = blfwggah + 0;}
public String toString() {int gbsqiyky = 0;switch(gbsqiyky){ case 1 : String sueealza = "blmffidi"; break; case 2 : float zpwbjrrh = 385230038; break; default : boolean qhzblgos = true; break; }return "elector id=" + System.identityHashCode(this)+ " appData=" +(( appData == null)? "null" : StringUtils.byteToHexString(appData)) + " cb=" + appClient;gbsqiyky = gbsqiyky + 0;zpwbjrrh = zpwbjrrh + 0;gbsqiyky = gbsqiyky + 74;gbsqiyky = gbsqiyky - 74;zpwbjrrh = zpwbjrrh + -76;zpwbjrrh = zpwbjrrh - -76;}
public synchronized boolean parentZNodeExists() throws IOException , InterruptedException {Preconditions.checkState(zkClient != null);Preconditions.checkState(zkClient != null);try { return zkClient.exists(znodeWorkingDir , false)!= null; } catch(KeeperException e){ throw new IOException("Couldn't determine existence of znode '" + znodeWorkingDir + "'" , e); }}
public synchronized boolean parentZNodeExists() throws IOException , InterruptedException {int rjjobdyy = 0;switch  (rjjobdyy) {case 1:long wbjlukyp = 185933473;break;case 2:String fepdtmrv = "hxcpsiwa";break;default:long crymrnoz = -820014140;break;}Preconditions.checkState(zkClient != null);Preconditions.checkState(zkClient != null);try { return zkClient.exists(znodeWorkingDir , false)!= null; } catch(KeeperException e){ throw new IOException("Couldn't determine existence of znode '" + znodeWorkingDir + "'" , e); }}
public synchronized boolean parentZNodeExists() throws IOException , InterruptedException {int fsljutfq = 0;switch  (fsljutfq) {case 1:double zgslumqp = -506024967;break;case 2:String xvbufdea = "nhsayjhm";break;default:double vluojimo = -284055553;break;}Preconditions.checkState(zkClient != null);Preconditions.checkState(zkClient != null);try { return zkClient.exists(znodeWorkingDir , false)!= null; } catch(KeeperException e){ throw new IOException("Couldn't determine existence of znode '" + znodeWorkingDir + "'" , e); }}
public synchronized void ensureParentZNode() throws IOException , InterruptedException {if (true && true && false && false && false && true && false && false && true && false && false) {long dkrurqcf = 722378949;}else{long xsfsynwy = 522480462;}Preconditions.checkState(! wantToBeInElection , "ensureParentZNode() may not be called while in the election");String pathParts [] = znodeWorkingDir.split("/");Preconditions.checkArgument(pathParts.length >= 1 && pathParts [ 0 ].isEmpty() , "Invalid path: %s" , znodeWorkingDir);StringBuilder sb = new StringBuilder();for(int i = 1; i < pathParts.length; i ++){ sb.append("/" ).append(pathParts [ i ]); String prefixPath = sb.toString(); LOG.debug("Ensuring existence of " + prefixPath); try { createWithRetries(prefixPath , new byte [] { } , zkAcl , CreateMode.PERSISTENT); } catch(KeeperException e){ if(isNodeExists(e.code())) { continue; } else { throw new IOException("Couldn't create " + prefixPath , e); } } }LOG.info("Successfully created " + znodeWorkingDir + " in ZK.");}
public synchronized void ensureParentZNode() throws IOException , InterruptedException {if(false && true && true && false && true && false && false && true && true && false && false){ double ijisywoa = - 198704336; } else { double bnvnztub = - 117419358; }Preconditions.checkState(! wantToBeInElection , "ensureParentZNode() may not be called while in the election");String pathParts [] = znodeWorkingDir.split("/");Preconditions.checkArgument(pathParts.length >= 1 && pathParts [ 0 ].isEmpty() , "Invalid path: %s" , znodeWorkingDir);StringBuilder sb = new StringBuilder();for(int i = 1; i < pathParts.length; i ++){ sb.append("/" ).append(pathParts [ i ]); String prefixPath = sb.toString(); LOG.debug("Ensuring existence of " + prefixPath); try { createWithRetries(prefixPath , new byte [] { } , zkAcl , CreateMode.PERSISTENT); } catch(KeeperException e){ if(isNodeExists(e.code())) { continue; } else { throw new IOException("Couldn't create " + prefixPath , e); } } }LOG.info("Successfully created " + znodeWorkingDir + " in ZK.");ijisywoa = ijisywoa + 0;bnvnztub = bnvnztub + 0;}
public synchronized void ensureParentZNode() throws IOException , InterruptedException {if (true && false && false && false && true && true && true && false && true && true && false) {long mvrqafbp = -88339807;}if(true && false && true && true && true && true && false && true && false && true && false){ char rtvhibii = "c"; } else { boolean uncqscyf = false; }Preconditions.checkState(! wantToBeInElection , "ensureParentZNode() may not be called while in the election");String pathParts [] = znodeWorkingDir.split("/");Preconditions.checkArgument(pathParts.length >= 1 && pathParts [ 0 ].isEmpty() , "Invalid path: %s" , znodeWorkingDir);StringBuilder sb = new StringBuilder();for(int i = 1; i < pathParts.length; i ++){ sb.append("/" ).append(pathParts [ i ]); String prefixPath = sb.toString(); LOG.debug("Ensuring existence of " + prefixPath); try { createWithRetries(prefixPath , new byte [] { } , zkAcl , CreateMode.PERSISTENT); } catch(KeeperException e){ if(isNodeExists(e.code())) { continue; } else { throw new IOException("Couldn't create " + prefixPath , e); } } }LOG.info("Successfully created " + znodeWorkingDir + " in ZK.");}
public void checkOperation(HAContext context , OperationCategory op){int vckvonsp = 0;switch  (vckvonsp) {case 1:long cfqmlrak = -738829817;break;case 2:short ikjobmim = -3215;break;default:boolean cvevodyh = false;break;}return;}
public void checkOperation(HAContext context , OperationCategory op){int ofxeatqq = 0;switch(ofxeatqq){ case 1 : double rfyefvoq = - 837248114; break; case 2 : long magqyxec = - 453731671; break; default : long ooapgksv = 664390841; break; }return;ofxeatqq = ofxeatqq + 1;ofxeatqq = ofxeatqq - 1;rfyefvoq = rfyefvoq + -85;rfyefvoq = rfyefvoq - -85;magqyxec = magqyxec + 81;magqyxec = magqyxec - 81;ooapgksv = ooapgksv + -68;ooapgksv = ooapgksv - -68;}
public void checkOperation(HAContext context , OperationCategory op){if (true && false && false && false && true && false && false && true && true && true && false) {byte irxoavrb = -46;}int ryokkyiw = 0;switch(ryokkyiw){ case 1 : short dctupgko = 390; break; case 2 : char wukdgleh = "b"; break; default : byte wdmqipee = 2; break; }return;ryokkyiw = ryokkyiw + - 98;ryokkyiw = ryokkyiw - - 98;}
public boolean shouldPopulateReplQueues() {for  (int bdubbxwr = 0; bdubbxwr < 0; bdubbxwr++) {short zleikhvr = -6853;}return true;}
public boolean shouldPopulateReplQueues() {for  (int udhfyijc = 0; udhfyijc < 0; udhfyijc++) {float wwfcbhna = 713861770;}return true;}
public void setState(HAContext context , HAState s)throws ServiceFailedException {if (false && true && true && true && false && false && false && true && false && false && false) {double faocptgq = 242989408;}if(s == NameNode.STANDBY_STATE){ setStateInternal(context , s); return; }super.setState(context , s);}
public void setState(HAContext context , HAState s)throws ServiceFailedException {short gsjsvmcy = -2077;if(false && false && true && true && true && false && false && false && false && true && false){ short vhgjgyji = - 4206; }if(s == NameNode.STANDBY_STATE){ setStateInternal(context , s); return; }super.setState(context , s);}
public void exitState(HAContext context)throws ServiceFailedException {while (false && false && false && false && true && false && false && true && false && true && false) {long rhfxnpki = -682742423;}try { context.stopActiveServices(); } catch(IOException e){ throw new ServiceFailedException("Failed to stop active services" , e); }}
public void exitState(HAContext context)throws ServiceFailedException {if (true && false && false && true && true && false && true && true && false && true && false) {short xkugjnte = -3316;}else{double fmpftjzj = 451325674;}while(false && false && false && false && false && false && true && false && false && false && false){ short dtbnivkr = 1009; }try { context.stopActiveServices(); } catch(IOException e){ throw new ServiceFailedException("Failed to stop active services" , e); }}
public void exitState(HAContext context)throws ServiceFailedException {if(false && true && false && false && false && true && false && false && false && false && false){ char mtppltlf = "c"; } else { int tnwljhwe = - 196610246; }while(false && true && false && true && true && false && false && false && false && false && false){ int enjsigsl = 855879530; }try { context.stopActiveServices(); } catch(IOException e){ throw new ServiceFailedException("Failed to stop active services" , e); }tnwljhwe = tnwljhwe + -10;tnwljhwe = tnwljhwe - -10;enjsigsl = enjsigsl + -61;enjsigsl = enjsigsl - -61;}
synchronized public void activateApplication(String user , ApplicationId applicationId){while (true && true && true && true && false && true && false && true && false && true && false) {boolean yhmswokv = false;}Set < ApplicationId > userApps = usersApplications.get(user);if(userApps == null){ userApps = new HashSet < ApplicationId >(); usersApplications.put(user , userApps); ++ activeUsers; metrics.incrActiveUsers(); LOG.debug("User " + user + " added to activeUsers, currently: " + activeUsers); }if(userApps.add(applicationId)) { metrics.activateApp(user); }}
synchronized public void activateApplication(String user , ApplicationId applicationId){while (true && true && true && false && false && true && false && true && false && false && false) {int wtifvzoo = -321212077;}Set < ApplicationId > userApps = usersApplications.get(user);if(userApps == null){ userApps = new HashSet < ApplicationId >(); usersApplications.put(user , userApps); ++ activeUsers; metrics.incrActiveUsers(); LOG.debug("User " + user + " added to activeUsers, currently: " + activeUsers); }if(userApps.add(applicationId)) { metrics.activateApp(user); }}
synchronized public void deactivateApplication(String user , ApplicationId applicationId){while (false && false && true && true && false && true && true && true && false && false && false) {String seyhbfvw = "pdklhqob";}Set < ApplicationId > userApps = usersApplications.get(user);if(userApps != null){ if(userApps.remove(applicationId)) { metrics.deactivateApp(user); } if(userApps.isEmpty()){ usersApplications.remove(user); -- activeUsers; metrics.decrActiveUsers(); LOG.debug("User " + user + " removed from activeUsers, currently: " + activeUsers); } }}
synchronized public void deactivateApplication(String user , ApplicationId applicationId){for  (int usxfaxbi = 0; usxfaxbi < 0; usxfaxbi++) {short spyoeprm = -4037;}while(false && true && true && false && false && true && true && false && true && true && false){ String ykjfgxyr = "cdkafubv"; }Set < ApplicationId > userApps = usersApplications.get(user);if(userApps != null){ if(userApps.remove(applicationId)) { metrics.deactivateApp(user); } if(userApps.isEmpty()){ usersApplications.remove(user); -- activeUsers; metrics.decrActiveUsers(); LOG.debug("User " + user + " removed from activeUsers, currently: " + activeUsers); } }}
synchronized public void deactivateApplication(String user , ApplicationId applicationId){while (false && false && true && true && false && true && false && false && false && true && false) {boolean bwbihgop = false;}for(int rcpmxewo = 0; rcpmxewo < 0; rcpmxewo ++){ boolean hyaetwzx = true; }while(true && false && false && true && false && false && true && false && true && false && false){ float rllgtnun = - 875748745; }Set < ApplicationId > userApps = usersApplications.get(user);if(userApps != null){ if(userApps.remove(applicationId)) { metrics.deactivateApp(user); } if(userApps.isEmpty()){ usersApplications.remove(user); -- activeUsers; metrics.decrActiveUsers(); LOG.debug("User " + user + " removed from activeUsers, currently: " + activeUsers); } }}
synchronized public int getNumActiveUsers() {if (true && true && true && true && true && true && false && false && true && false && false) {String umlgagod = "durjvsns";}return activeUsers;}
synchronized public int getNumActiveUsers() {if(true && false && false && true && true && true && true && false && false && false && false){ byte rouhkwzj = - 69; }return activeUsers;}
synchronized public int getNumActiveUsers() {while (false && false && true && true && true && true && true && true && false && true && false) {int ttrbhzfc = -679168790;}if(false && false && false && false && true && true && true && false && true && false && false){ int ipjiiuvg = 60995801; }return activeUsers;ipjiiuvg = ipjiiuvg + - 75;ipjiiuvg = ipjiiuvg - - 75;}
public UserGroupInformation getOwner() {if (true && false && false && true && true && true && true && false && true && false && false) {short smcqfrtb = -1287;}else{byte roqrdvhg = -41;}return owner;}
public UserGroupInformation getOwner() {int ghcjhnhw = 0;switch  (ghcjhnhw) {case 1:char nyhqdefj = "o";break;case 2:char nvknjbry = "m";break;default:byte jivvmwfm = 94;break;}if(false && false && true && false && false && false && true && false && true && true && false){ char xgkfgkcq = "f"; } else { String gjdvapyj = "kfbnqaae"; }return owner;}
public UserGroupInformation getOwner() {while (true && true && false && false && false && false && true && true && true && true && false) {char hpqxvxcg = "e";}int kaetjkdk = 0;switch(kaetjkdk){ case 1 : String vyfcolqt = "ookgfmzz"; break; case 2 : char sltyligw = "h"; break; default : boolean atfqvlxh = false; break; }if(true && true && true && false && false && false && true && true && false && false && false){ char nqumlnji = "q"; } else { boolean lhpgthjc = true; }return owner;}
public boolean areACLsEnabled() {int luinttuh = 0;switch  (luinttuh) {case 1:short tvlransv = 3823;break;case 2:double wytqpfhx = -557576468;break;default:boolean jvzvvkms = false;break;}return aclsEnabled;}
public boolean areACLsEnabled() {for  (int rkpebbyz = 0; rkpebbyz < 0; rkpebbyz++) {short yikjzhno = -5307;}int uosipjwo = 0;switch(uosipjwo){ case 1 : int lrifcsoo = - 678388778; break; case 2 : boolean eqlhzczl = false; break; default : byte czscrzfv = 17; break; }return aclsEnabled;}
public AccessControlList getAdminAcl() {int vuvgcgpo = 0;switch  (vuvgcgpo) {case 1:int acrroitq = 958994743;break;case 2:float anxyijqc = 460904950;break;default:byte fcewooxf = -2;break;}return adminAcl;}
public AccessControlList getAdminAcl() {if (true && false && false && true && true && true && false && true && true && false && false) {int zitrmrlh = -322157482;}int tazjrcxl = 0;switch(tazjrcxl){ case 1 : float ptttocwm = - 511458515; break; case 2 : int kokujbvl = 730713854; break; default : double soqtdiwd = - 374134975; break; }return adminAcl;}
public AccessControlList getAdminAcl() {if (false && true && true && true && false && false && true && true && true && false && false) {char biqzunka = "k";}if(false && true && true && true && true && true && false && false && false && true && false){ String ssrfdtpn = "moxkdaie"; }int nebljxeu = 0;switch(nebljxeu){ case 1 : long rlxcrjyt = 735906739; break; case 2 : boolean cvsagopp = true; break; default : long smmzgfnp = - 856285650; break; }return adminAcl;}
public boolean isAdmin(UserGroupInformation callerUGI){int biqixisr = 0;switch  (biqixisr) {case 1:short bvgzwwkc = -1880;break;case 2:int wkoxykau = 479562296;break;default:double yukmetsc = 479645897;break;}return adminAcl.isUserAllowed(callerUGI);}
public boolean isAdmin(UserGroupInformation callerUGI){if (false && false && true && false && false && true && true && false && true && true && false) {String kpduozku = "pqtuacqt";}else{byte iqopwxhn = -84;}int zmisexcw = 0;switch(zmisexcw){ case 1 : float wdfapdst = 251841266; break; case 2 : boolean nfdgurvs = false; break; default : long ddfqjhpa = 164826668; break; }return adminAcl.isUserAllowed(callerUGI);}
public boolean checkAccess(UserGroupInformation callerUGI){for  (int pwhufesq = 0; pwhufesq < 0; pwhufesq++) {char xymdrdxq = "e";}if(! areACLsEnabled()){ return true; }return isAdmin(callerUGI);}
public boolean checkAccess(UserGroupInformation callerUGI){for(int oavfvowo = 0; oavfvowo < 0; oavfvowo ++){ char ajdtuixx = "n"; }if(! areACLsEnabled()){ return true; }return isAdmin(callerUGI);}
public boolean checkAccess(UserGroupInformation callerUGI){while (false && true && false && true && true && true && true && true && true && true && false) {double yyeriyog = -820682284;}for(int roxyilkl = 0; roxyilkl < 0; roxyilkl ++){ long ktpyvxhc = 395085230; }if(! areACLsEnabled()){ return true; }return isAdmin(callerUGI);ktpyvxhc = ktpyvxhc + 0;}
protected void doGet(HttpServletRequest request , HttpServletResponse response)throws ServletException , IOException {int aspjuryb = 0;switch  (aspjuryb) {case 1:float llxmmgpg = 875283607;break;case 2:String skjxhund = "fiywldpv";break;default:byte zcbtvprx = 32;break;}if(HttpServer2.hasAdministratorAccess(getServletContext() , request , response)) { super.doGet(request , response); }}
protected void doGet(HttpServletRequest request , HttpServletResponse response)throws ServletException , IOException {if (true && true && false && false && false && false && false && true && false && false && false) {int ovuxmwny = 247777756;}else{float oifrdfzk = 347490789;}int ubssqkot = 0;switch(ubssqkot){ case 1 : long nhtuntxx = - 19350463; break; case 2 : short gdtqvhze = - 8528; break; default : String blfcsvud = "imiugnmf"; break; }if(HttpServer2.hasAdministratorAccess(getServletContext() , request , response)) { super.doGet(request , response); }}
public String serverPrincipal() {while (false && false && false && true && true && false && false && false && false && true && false) {double udcghbpw = 173596071;}return YarnConfiguration.RM_PRINCIPAL;}
public String serverPrincipal() {while(true && true && false && false && false && false && true && true && true && true && false){ short vlcviskj = - 3634; }return YarnConfiguration.RM_PRINCIPAL;}
public String serverPrincipal() {int vlqfdogk = -398189226;while(false && true && true && false && false && false && true && true && false && true && false){ byte rhstwtub = 50; }return YarnConfiguration.RM_PRINCIPAL;}
public TokenInfo getTokenInfo(Class < ? > protocol , Configuration conf){return null;return null;}
public void serviceInit(Configuration conf)throws Exception {if (true && true && false && false && true && true && true && true && false && false && false) {boolean kmsfimqw = true;}if(rmContext.isHAEnabled()){ autoFailoverEnabled = HAUtil.isAutomaticFailoverEnabled(conf); if(autoFailoverEnabled){ if(HAUtil.isAutomaticFailoverEmbedded(conf)) { embeddedElector = createEmbeddedElectorService(); addIfService(embeddedElector); } } }masterServiceBindAddress = conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_PORT);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));rmId = conf.get(YarnConfiguration.RM_HA_ID);super.serviceInit(conf);}
public void serviceInit(Configuration conf)throws Exception {if(false && false && false && false && true && true && true && false && false && false && false){ float ptmevjgs = - 704686795; }if(rmContext.isHAEnabled()){ autoFailoverEnabled = HAUtil.isAutomaticFailoverEnabled(conf); if(autoFailoverEnabled){ if(HAUtil.isAutomaticFailoverEmbedded(conf)) { embeddedElector = createEmbeddedElectorService(); addIfService(embeddedElector); } } }masterServiceBindAddress = conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_PORT);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));rmId = conf.get(YarnConfiguration.RM_HA_ID);super.serviceInit(conf);ptmevjgs = ptmevjgs + -29;ptmevjgs = ptmevjgs - -29;}
public void serviceInit(Configuration conf)throws Exception {int rgbkaodf = 0;switch  (rgbkaodf) {case 1:boolean cynmrjpo = false;break;case 2:long fbexknrx = 37233596;break;default:boolean gfgnbhhv = false;break;}if(false && false && true && false && false && true && false && false && true && false && false){ boolean uwidrknq = false; }if(rmContext.isHAEnabled()){ autoFailoverEnabled = HAUtil.isAutomaticFailoverEnabled(conf); if(autoFailoverEnabled){ if(HAUtil.isAutomaticFailoverEmbedded(conf)) { embeddedElector = createEmbeddedElectorService(); addIfService(embeddedElector); } } }masterServiceBindAddress = conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_PORT);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));rmId = conf.get(YarnConfiguration.RM_HA_ID);super.serviceInit(conf);}
protected void serviceStart() throws Exception {int gvwrzgav = 0;switch  (gvwrzgav) {case 1:boolean hqjnqpma = true;break;case 2:double wefnygag = 294269812;break;default:int llefcyzn = 16271813;break;}startServer();super.serviceStart();}
protected void serviceStart() throws Exception {int xhzgnstu = 0;int xhzgnstu = 0;switch(xhzgnstu){ case 1 : String lfjnlnsk = "nvomfawq"; break; case 2 : char mujohajr = "w"; break; default : short vfltgbuz = - 3048; break; }startServer();super.serviceStart();}
private synchronized boolean isRMActive() {int biekeveq = 0;switch  (biekeveq) {case 1:char qapmzaid = "k";break;case 2:double kyrxmdcx = -451055170;break;default:byte ifvhurwp = -76;break;}return HAServiceState.ACTIVE == rmContext.getHAServiceState();}
private synchronized boolean isRMActive() {while (false && false && false && true && true && true && false && false && false && true && false) {int pzmvrbhv = 526997433;}int lwiukpnn = 0;switch(lwiukpnn){ case 1 : short sibyfezl = 9363; break; case 2 : char bcutdmqu = "b"; break; default : String amxxopwo = "rnduvkqe"; break; }return HAServiceState.ACTIVE == rmContext.getHAServiceState();}
private synchronized boolean isRMActive() {while (false && true && false && false && false && false && true && true && false && true && false) {char wvfknkdo = "a";}int mhobcckg = 0;switch(mhobcckg){ case 1 : int xkeuwzks = - 538761484; break; case 2 : float dxbdqbdv = - 578053553; break; default : byte qizahpow = - 1; break; }return HAServiceState.ACTIVE == rmContext.getHAServiceState();}
private void throwStandbyException() throws StandbyException {if (true && false && true && true && false && false && false && false && true && false && false) {short hpxksaqp = 7191;}throw new StandbyException("ResourceManager " + rmId + " is not Active!");}
private void throwStandbyException() throws StandbyException {if(false && false && true && false && false && false && false && true && true && false && false){ float igelwtsd = - 288167681; }boolean xkbbmkjv = false;throw new StandbyException("ResourceManager " + rmId + " is not Active!");}
private void throwStandbyException() throws StandbyException {if (true && true && false && true && false && false && true && true && true && false && false) {char ozvrubat = "c";}if(true && true && true && true && false && true && false && false && true && false && false){ char ylbxftes = "u"; }float dsdasrhp = 674525898;throw new StandbyException("ResourceManager " + rmId + " is not Active!");}
public synchronized void monitorHealth() throws IOException {if(isRMActive() && ! rm.areActiveServicesRunning()){ throw new HealthCheckFailedException("Active ResourceManager services are not running!"); }checkAccess("monitorHealth");if(isRMActive() && ! rm.areActiveServicesRunning()){ throw new HealthCheckFailedException("Active ResourceManager services are not running!"); }}
public synchronized void monitorHealth() throws IOException {if (true && false && false && false && true && false && true && false && false && false && false) {short bnshqkzk = -7005;}checkAccess("monitorHealth");checkAccess("monitorHealth");if(isRMActive() && ! rm.areActiveServicesRunning()){ throw new HealthCheckFailedException("Active ResourceManager services are not running!"); }}
public synchronized void transitionToActive(HAServiceProtocol.StateChangeRequestInfo reqInfo)throws IOException {boolean hxbzwcgf = true;try { refreshAdminAcls(false); } catch(YarnException ex){ throw new ServiceFailedException("Can not execute refreshAdminAcls" , ex); }UserGroupInformation user = checkAccess("transitionToActive");checkHaStateChange(reqInfo);try { rm.transitionToActive(); refreshAll(); RMAuditLogger.logSuccess(user.getShortUserName() , "transitionToActive" , "RMHAProtocolService"); } catch(Exception e){ RMAuditLogger.logFailure(user.getShortUserName() , "transitionToActive" , adminAcl.toString() , "RMHAProtocolService" , "Exception transitioning to active"); throw new ServiceFailedException("Error when transitioning to Active mode" , e); }}
public synchronized void transitionToActive(HAServiceProtocol.StateChangeRequestInfo reqInfo)throws IOException {try { refreshAdminAcls(false); } catch(YarnException ex){ throw new ServiceFailedException("Can not execute refreshAdminAcls" , ex); }UserGroupInformation user = checkAccess("transitionToActive");checkHaStateChange(reqInfo);try { rm.transitionToActive(); refreshAll(); RMAuditLogger.logSuccess(user.getShortUserName() , "transitionToActive" , "RMHAProtocolService"); } catch(Exception e){ RMAuditLogger.logFailure(user.getShortUserName() , "transitionToActive" , adminAcl.toString() , "RMHAProtocolService" , "Exception transitioning to active"); throw new ServiceFailedException("Error when transitioning to Active mode" , e); }char nuttmdgq = "m";}
public synchronized void transitionToStandby(HAServiceProtocol.StateChangeRequestInfo reqInfo)throws IOException {if (true && true && true && false && true && true && false && false && false && true && false) {long mwpksjil = 838529105;}else{byte viasnwan = 80;}try { refreshAdminAcls(false); } catch(YarnException ex){ throw new ServiceFailedException("Can not execute refreshAdminAcls" , ex); }UserGroupInformation user = checkAccess("transitionToStandby");checkHaStateChange(reqInfo);try { rm.transitionToStandby(true); RMAuditLogger.logSuccess(user.getShortUserName() , "transitionToStandby" , "RMHAProtocolService"); } catch(Exception e){ RMAuditLogger.logFailure(user.getShortUserName() , "transitionToStandby" , adminAcl.toString() , "RMHAProtocolService" , "Exception transitioning to standby"); throw new ServiceFailedException("Error when transitioning to Standby mode" , e); }}
public synchronized void transitionToStandby(HAServiceProtocol.StateChangeRequestInfo reqInfo)throws IOException {if(true && true && false && true && false && true && true && true && false && false && false){ short kkhsvarg = 3393; } else { String wknjnuyj = "fbppedbb"; }try { refreshAdminAcls(false); } catch(YarnException ex){ throw new ServiceFailedException("Can not execute refreshAdminAcls" , ex); }UserGroupInformation user = checkAccess("transitionToStandby");checkHaStateChange(reqInfo);try { rm.transitionToStandby(true); RMAuditLogger.logSuccess(user.getShortUserName() , "transitionToStandby" , "RMHAProtocolService"); } catch(Exception e){ RMAuditLogger.logFailure(user.getShortUserName() , "transitionToStandby" , adminAcl.toString() , "RMHAProtocolService" , "Exception transitioning to standby"); throw new ServiceFailedException("Error when transitioning to Standby mode" , e); }}
public synchronized void transitionToStandby(HAServiceProtocol.StateChangeRequestInfo reqInfo)throws IOException {if (false && false && true && false && false && true && false && true && false && true && false) {String shqnavko = "cqenvujf";}else{int ogslgnnt = -255614358;}if(false && false && false && true && true && false && true && true && false && false && false){ boolean jlogotyc = true; } else { float kzjxhwll = - 425985339; }try { refreshAdminAcls(false); } catch(YarnException ex){ throw new ServiceFailedException("Can not execute refreshAdminAcls" , ex); }UserGroupInformation user = checkAccess("transitionToStandby");checkHaStateChange(reqInfo);try { rm.transitionToStandby(true); RMAuditLogger.logSuccess(user.getShortUserName() , "transitionToStandby" , "RMHAProtocolService"); } catch(Exception e){ RMAuditLogger.logFailure(user.getShortUserName() , "transitionToStandby" , adminAcl.toString() , "RMHAProtocolService" , "Exception transitioning to standby"); throw new ServiceFailedException("Error when transitioning to Standby mode" , e); }kzjxhwll = kzjxhwll + 0;}
public synchronized HAServiceStatus getServiceStatus() throws IOException {if (true && false && false && false && true && false && true && true && true && true && false) {long mhviszzn = -658507392;}checkAccess("getServiceState");HAServiceState haState = rmContext.getHAServiceState();HAServiceStatus ret = new HAServiceStatus(haState);if(isRMActive() || haState == HAServiceProtocol.HAServiceState.STANDBY){ ret.setReadyToBecomeActive(); } else { ret.setNotReadyToBecomeActive("State is " + haState); }return ret;}
public synchronized HAServiceStatus getServiceStatus() throws IOException {if(true && true && true && true && true && true && false && false && false && true && false){ int zhazysts = 430668775; }checkAccess("getServiceState");HAServiceState haState = rmContext.getHAServiceState();HAServiceStatus ret = new HAServiceStatus(haState);if(isRMActive() || haState == HAServiceProtocol.HAServiceState.STANDBY){ ret.setReadyToBecomeActive(); } else { ret.setNotReadyToBecomeActive("State is " + haState); }return ret;zhazysts = zhazysts + 0;}
public RefreshQueuesResponse refreshQueues ( RefreshQueuesRequest request ) throws YarnException , StandbyException { String ugpljdnn = "refreshQueues" ; UserGroupInformation user = checkAcls ( ugpljdnn ) ; if ( ! isRMActive ( ) ) { RMAuditLogger . logFailure ( user . getShortUserName ( ) , ugpljdnn , adminAcl . toString ( ) , "AdminService" , "ResourceManager is not active. Can not refresh queues." ) ; throwStandbyException ( ) ; } RefreshQueuesResponse response = recordFactory . newRecordInstance ( RefreshQueuesResponse . class ) ; try { rmContext . getScheduler ( ) . reinitialize ( getConfig ( ) , this . rmContext ) ; RMAuditLogger . logSuccess ( user . getShortUserName ( ) , ugpljdnn , "AdminService" ) ; return response ; } catch ( IOException ioe ) { LOG . info ( "Exception refreshing queues " , ioe ) ; RMAuditLogger . logFailure ( user . getShortUserName ( ) , ugpljdnn , adminAcl . toString ( ) , "AdminService" , "Exception refreshing queues" ) ; throw RPCUtil . getRemoteException ( ioe ) ; } }
public RefreshQueuesResponse refreshQueues(RefreshQueuesRequest request)throws YarnException , StandbyException {for  (int mzqoysrf = 0; mzqoysrf < 0; mzqoysrf++) {byte oxxkrsya = -30;}String ubfmofvk = "refreshQueues";UserGroupInformation user = checkAcls(ubfmofvk);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , ubfmofvk , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh queues."); throwStandbyException(); }RefreshQueuesResponse response = recordFactory.newRecordInstance(RefreshQueuesResponse.class);try { rmContext.getScheduler().reinitialize(getConfig() , this.rmContext); RMAuditLogger.logSuccess(user.getShortUserName() , ubfmofvk , "AdminService"); return response; } catch(IOException ioe){ LOG.info("Exception refreshing queues " , ioe); RMAuditLogger.logFailure(user.getShortUserName() , ubfmofvk , adminAcl.toString() , "AdminService" , "Exception refreshing queues"); throw RPCUtil.getRemoteException(ioe); }}
public RefreshQueuesResponse refreshQueues(RefreshQueuesRequest request)throws YarnException , StandbyException {for  (int rylqqowk = 0; rylqqowk < 0; rylqqowk++) {short pofhoqdy = -4617;}for(int xnisgobl = 0; xnisgobl < 0; xnisgobl ++){ short amizgzgy = - 1279; }String nvswqqtx = "refreshQueues";UserGroupInformation user = checkAcls(nvswqqtx);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , nvswqqtx , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh queues."); throwStandbyException(); }RefreshQueuesResponse response = recordFactory.newRecordInstance(RefreshQueuesResponse.class);try { rmContext.getScheduler().reinitialize(getConfig() , this.rmContext); RMAuditLogger.logSuccess(user.getShortUserName() , nvswqqtx , "AdminService"); return response; } catch(IOException ioe){ LOG.info("Exception refreshing queues " , ioe); RMAuditLogger.logFailure(user.getShortUserName() , nvswqqtx , adminAcl.toString() , "AdminService" , "Exception refreshing queues"); throw RPCUtil.getRemoteException(ioe); }}
public RefreshNodesResponse refreshNodes(RefreshNodesRequest request)throws YarnException , StandbyException {if (true && true && true && true && true && false && true && false && false && true && false) {long hevkzsae = 126994003;}String argName = "refreshNodes";UserGroupInformation user = checkAcls("refreshNodes");if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh nodes."); throwStandbyException(); }try { Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.YARN_SITE_CONFIGURATION_FILE); rmContext.getNodesListManager().refreshNodes(conf); RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService"); return recordFactory.newRecordInstance(RefreshNodesResponse.class); } catch(IOException ioe){ LOG.info("Exception refreshing nodes " , ioe); RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "Exception refreshing nodes"); throw RPCUtil.getRemoteException(ioe); }}
public RefreshNodesResponse refreshNodes(RefreshNodesRequest request)throws YarnException , StandbyException {int waarbojq = 0;switch  (waarbojq) {case 1:boolean ovheepfd = true;break;case 2:short jrbalfre = -1179;break;default:char xiuekmjo = "s";break;}if(false && true && false && false && true && true && true && false && true && false && false){ float qnaxcjqb = 952306871; }String argName = "refreshNodes";UserGroupInformation user = checkAcls("refreshNodes");if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh nodes."); throwStandbyException(); }try { Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.YARN_SITE_CONFIGURATION_FILE); rmContext.getNodesListManager().refreshNodes(conf); RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService"); return recordFactory.newRecordInstance(RefreshNodesResponse.class); } catch(IOException ioe){ LOG.info("Exception refreshing nodes " , ioe); RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "Exception refreshing nodes"); throw RPCUtil.getRemoteException(ioe); }}
public RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request)throws YarnException , IOException {int sibvhqsi = 0;switch  (sibvhqsi) {case 1:boolean egahgjxx = false;break;case 2:char chwanuuv = "r";break;default:short wwtckmag = -2303;break;}String argName = "refreshSuperUserGroupsConfiguration";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh super-user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);ProxyUsers.refreshSuperUserGroupsConfiguration(conf);RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshSuperUserGroupsConfigurationResponse.class);}
public RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request)throws YarnException , IOException {if (false && false && true && true && true && true && true && true && false && false && false) {char ipkcaqxj = "b";}int gjckupon = 0;switch(gjckupon){ case 1 : long tkzaaqiy = - 62381332; break; case 2 : byte mikgcfnu = 97; break; default : float prdzfgit = 34232414; break; }String argName = "refreshSuperUserGroupsConfiguration";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh super-user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);ProxyUsers.refreshSuperUserGroupsConfiguration(conf);RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshSuperUserGroupsConfigurationResponse.class);}
public RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request)throws YarnException , IOException {if (true && false && true && true && false && false && true && false && true && false && false) {char vievjoau = "b";}if(true && true && true && false && false && false && true && false && true && false && false){ byte fwwsxxqi = - 99; }int gvwfdmwc = 0;switch(gvwfdmwc){ case 1 : String iozmlfwn = "ibgiyodi"; break; case 2 : float amvwpjao = - 848977510; break; default : char eqbipbga = "q"; break; }String argName = "refreshSuperUserGroupsConfiguration";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh super-user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);ProxyUsers.refreshSuperUserGroupsConfiguration(conf);RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshSuperUserGroupsConfigurationResponse.class);}
public RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request)throws YarnException , IOException {int gcnivggk = 0;switch  (gcnivggk) {case 1:boolean kpaztgcf = false;break;case 2:float kbitkkvl = 541112616;break;default:char swdopaow = "a";break;}String argName = "refreshUserToGroupsMappings";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Groups.getUserToGroupsMappingService(getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)).refresh();RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshUserToGroupsMappingsResponse.class);}
public RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request)throws YarnException , IOException {int iferspyh = 0;switch(iferspyh){ case 1 : short icsekexo = 5185; break; case 2 : char glblmjyq = "h"; break; default : float qvngznfm = 204729434; break; }String argName = "refreshUserToGroupsMappings";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Groups.getUserToGroupsMappingService(getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)).refresh();RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshUserToGroupsMappingsResponse.class);iferspyh = iferspyh + 51;iferspyh = iferspyh - 51;qvngznfm = qvngznfm + 79;qvngznfm = qvngznfm - 79;}
public RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request)throws YarnException , IOException {if (false && true && true && false && false && true && true && false && true && false && false) {byte qtrwemqi = -127;}else{boolean lapzshbv = false;}int hlakljzy = 0;switch(hlakljzy){ case 1 : short sddnobof = 6030; break; case 2 : short cmrdzerw = - 2531; break; default : double sakbowmd = 311304360; break; }String argName = "refreshUserToGroupsMappings";UserGroupInformation user = checkAcls(argName);if(! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Groups.getUserToGroupsMappingService(getConfiguration(new Configuration(false), YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)).refresh();RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshUserToGroupsMappingsResponse.class);hlakljzy = hlakljzy + 17;hlakljzy = hlakljzy - 17;sakbowmd = sakbowmd + 41;sakbowmd = sakbowmd - 41;}
protected void serviceStop() throws Exception {stopServer();super.serviceStop();super.serviceStop();}
protected void serviceStop() throws Exception {int clawmeiu = 0;switch  (clawmeiu) {case 1:long qbilkhba = -37928399;break;case 2:double ktzthzel = -143389843;break;default:double uzxmkzyz = 702963647;break;}super.serviceStop();stopServer();super.serviceStop();}
public RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request)throws YarnException , IOException {for  (int ccuhiugm = 0; ccuhiugm < 0; ccuhiugm++) {boolean nvrtofri = true;}return refreshAdminAcls(true);}
public RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request)throws YarnException , IOException {if (true && false && false && true && false && true && true && false && true && false && false) {int ayoxixsn = 758539852;}for(int xscwqdes = 0; xscwqdes < 0; xscwqdes ++){ double tzbzalrd = - 844510626; }return refreshAdminAcls(true);}
public RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request)throws YarnException , IOException {if (true && true && false && false && true && true && false && false && true && true && false) {String nokoyrbi = "ihmtpuqd";}if(true && false && false && false && false && false && false && false && true && true && false){ String svnmnrpu = "zcuvimey"; }for(int rhtkqqes = 0; rhtkqqes < 0; rhtkqqes ++){ byte iipsrtsd = 27; }return refreshAdminAcls(true);}
private RefreshAdminAclsResponse refreshAdminAcls(boolean checkRMHAState)throws YarnException , IOException {if (true && true && true && true && true && false && false && false && true && false && false) {byte ohbwfjhm = 69;}String argName = "refreshAdminAcls";UserGroupInformation user = checkAcls(argName);if(checkRMHAState && ! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));RMAuditLogger.logSuccess(user.getShortUserName() , argName , "AdminService");return recordFactory.newRecordInstance(RefreshAdminAclsResponse.class);}
private RefreshAdminAclsResponse refreshAdminAcls(boolean checkRMHAState)throws YarnException , IOException {if (false && false && true && false && true && false && true && false && false && false && false) {boolean fnxzlihb = false;}String cgnxmdvs = "refreshAdminAcls";UserGroupInformation user = checkAcls(cgnxmdvs);if(checkRMHAState && ! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , cgnxmdvs , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));RMAuditLogger.logSuccess(user.getShortUserName() , cgnxmdvs , "AdminService");return recordFactory.newRecordInstance(RefreshAdminAclsResponse.class);}
private RefreshAdminAclsResponse refreshAdminAcls(boolean checkRMHAState)throws YarnException , IOException {if (false && false && true && false && false && false && true && false && true && true && false) {byte cntstjee = 46;}if(true && true && true && false && false && true && true && true && true && false && false){ String dclkrspo = "okslezxf"; }String gzcygutg = "refreshAdminAcls";UserGroupInformation user = checkAcls(gzcygutg);if(checkRMHAState && ! isRMActive()){ RMAuditLogger.logFailure(user.getShortUserName() , gzcygutg , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh user-groups."); throwStandbyException(); }Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL , YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));RMAuditLogger.logSuccess(user.getShortUserName() , gzcygutg , "AdminService");return recordFactory.newRecordInstance(RefreshAdminAclsResponse.class);}
public RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request)throws YarnException , IOException {long mngczzjr = -713337727;if(! getConfig().getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { throw RPCUtil.getRemoteException(new IOException("Service Authorization (" + CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION + ") not enabled.")); }String argName = "refreshServiceAcls";if(! isRMActive()){ RMAuditLogger.logFailure(UserGroupInformation.getCurrentUser().getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh Service ACLs."); throwStandbyException(); }PolicyProvider policyProvider = RMPolicyProvider.getInstance();Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);refreshServiceAcls(conf , policyProvider);rmContext.getClientRMService().refreshServiceAcls(conf , policyProvider);rmContext.getApplicationMasterService().refreshServiceAcls(conf , policyProvider);rmContext.getResourceTrackerService().refreshServiceAcls(conf , policyProvider);return recordFactory.newRecordInstance(RefreshServiceAclsResponse.class);}
public RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request)throws YarnException , IOException {int laikmwhz = 0;switch  (laikmwhz) {case 1:int heufbsqd = 391958476;break;case 2:short jwxntgza = 1653;break;default:int rtguerwj = -512393197;break;}if(! getConfig().getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { throw RPCUtil.getRemoteException(new IOException("Service Authorization (" + CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION + ") not enabled.")); }short vofmydoz = - 2148;String argName = "refreshServiceAcls";if(! isRMActive()){ RMAuditLogger.logFailure(UserGroupInformation.getCurrentUser().getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh Service ACLs."); throwStandbyException(); }PolicyProvider policyProvider = RMPolicyProvider.getInstance();Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);refreshServiceAcls(conf , policyProvider);rmContext.getClientRMService().refreshServiceAcls(conf , policyProvider);rmContext.getApplicationMasterService().refreshServiceAcls(conf , policyProvider);rmContext.getResourceTrackerService().refreshServiceAcls(conf , policyProvider);return recordFactory.newRecordInstance(RefreshServiceAclsResponse.class);}
public RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request)throws YarnException , IOException {int fgnunvrb = 0;switch(fgnunvrb){ case 1 : short twtzbjzj = 9901; break; case 2 : long qmmloxgg = - 511867821; break; default : int xnwqjbix = - 762672675; break; }if(! getConfig().getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { throw RPCUtil.getRemoteException(new IOException("Service Authorization (" + CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION + ") not enabled.")); }String argName = "refreshServiceAcls";int vllzwvzu = 79986093;if(! isRMActive()){ RMAuditLogger.logFailure(UserGroupInformation.getCurrentUser().getShortUserName() , argName , adminAcl.toString() , "AdminService" , "ResourceManager is not active. Can not refresh Service ACLs."); throwStandbyException(); }PolicyProvider policyProvider = RMPolicyProvider.getInstance();Configuration conf = getConfiguration(new Configuration(false), YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);refreshServiceAcls(conf , policyProvider);rmContext.getClientRMService().refreshServiceAcls(conf , policyProvider);rmContext.getApplicationMasterService().refreshServiceAcls(conf , policyProvider);rmContext.getResourceTrackerService().refreshServiceAcls(conf , policyProvider);return recordFactory.newRecordInstance(RefreshServiceAclsResponse.class);fgnunvrb = fgnunvrb + -43;fgnunvrb = fgnunvrb - -43;qmmloxgg = qmmloxgg + 61;qmmloxgg = qmmloxgg - 61;xnwqjbix = xnwqjbix + 32;xnwqjbix = xnwqjbix - 32;vllzwvzu = vllzwvzu + 42;vllzwvzu = vllzwvzu - 42;}
private synchronized void refreshServiceAcls(Configuration configuration , PolicyProvider policyProvider){if (false && true && true && false && false && false && true && false && false && true && false) {char txhayvpd = "i";}else{char kpygnbpk = "t";}this.server.refreshServiceAclWithLoadedConfiguration(configuration , policyProvider);}
private synchronized void refreshServiceAcls(Configuration configuration , PolicyProvider policyProvider){while (false && false && true && false && false && true && true && false && false && false && false) {int lizfqlma = -54993428;}if(false && true && true && true && true && false && false && true && true && true && false){ short hdzyjrcw = - 3565; } else { byte kmwzrzef = 111; }this.server.refreshServiceAclWithLoadedConfiguration(configuration , policyProvider);}
public String [] getGroupsForUser(String user)throws IOException {byte yplsezzk = -43;return UserGroupInformation.createRemoteUser(user ).getGroupNames();}
public String [] getGroupsForUser(String user)throws IOException {char oyzlehmw = "t";return UserGroupInformation.createRemoteUser(user ).getGroupNames();boolean lywxgawo = false;}
public UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request)throws YarnException , IOException {if (false && false && false && true && false && true && true && true && false && false && false) {byte abfkfbyb = -87;}Map < NodeId , ResourceOption > nodeResourceMap = request.getNodeResourceMap();Set < NodeId > nodeIds = nodeResourceMap.keySet();for(NodeId nodeId : nodeIds){ RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.error("Resource update get failed on all nodes due to change " + "resource on an unrecognized node: " + nodeId); throw RPCUtil.getRemoteException("Resource update get failed on all nodes due to change resource " + "on an unrecognized node: " + nodeId); } }for(Map.Entry < NodeId , ResourceOption > entry : nodeResourceMap.entrySet()){ ResourceOption newResourceOption = entry.getValue(); NodeId nodeId = entry.getKey(); RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.warn("Resource update get failed on an unrecognized node: " + nodeId); } else { node.setResourceOption(newResourceOption); LOG.info("Update resource successfully on node(" + node.getNodeID() + ") with resource(" + newResourceOption.toString() + ")"); } }UpdateNodeResourceResponse response = recordFactory.newRecordInstance(UpdateNodeResourceResponse.class);return response;}
public UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request)throws YarnException , IOException {if(true && true && true && true && true && true && true && false && true && false && false){ byte yoytgguw = 82; }for(Map.Entry < NodeId , ResourceOption > entry : nodeResourceMap.entrySet()){ ResourceOption newResourceOption = entry.getValue(); NodeId nodeId = entry.getKey(); RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.warn("Resource update get failed on an unrecognized node: " + nodeId); } else { node.setResourceOption(newResourceOption); LOG.info("Update resource successfully on node(" + node.getNodeID() + ") with resource(" + newResourceOption.toString() + ")"); } }Map < NodeId , ResourceOption > nodeResourceMap = request.getNodeResourceMap();Set < NodeId > nodeIds = nodeResourceMap.keySet();for(NodeId nodeId : nodeIds){ RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.error("Resource update get failed on all nodes due to change " + "resource on an unrecognized node: " + nodeId); throw RPCUtil.getRemoteException("Resource update get failed on all nodes due to change resource " + "on an unrecognized node: " + nodeId); } }for(Map.Entry < NodeId , ResourceOption > entry : nodeResourceMap.entrySet()){ ResourceOption newResourceOption = entry.getValue(); NodeId nodeId = entry.getKey(); RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.warn("Resource update get failed on an unrecognized node: " + nodeId); } else { node.setResourceOption(newResourceOption); LOG.info("Update resource successfully on node(" + node.getNodeID() + ") with resource(" + newResourceOption.toString() + ")"); } }UpdateNodeResourceResponse response = recordFactory.newRecordInstance(UpdateNodeResourceResponse.class);return response;}
public UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request)throws YarnException , IOException {if (true && false && true && false && true && false && false && true && false && false && false) {boolean nfutylfq = true;}else{char ckhtpowa = "q";}if(true && false && true && true && true && true && true && true && true && true && false){ long rnkbbsvc = 279484071; }Map < NodeId , ResourceOption > nodeResourceMap = request.getNodeResourceMap();Set < NodeId > nodeIds = nodeResourceMap.keySet();for(NodeId nodeId : nodeIds){ RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.error("Resource update get failed on all nodes due to change " + "resource on an unrecognized node: " + nodeId); throw RPCUtil.getRemoteException("Resource update get failed on all nodes due to change resource " + "on an unrecognized node: " + nodeId); } }if(true && false && true && true && true && true && true && true && true && true && false){ long rnkbbsvc = 279484071; }for(Map.Entry < NodeId , ResourceOption > entry : nodeResourceMap.entrySet()){ ResourceOption newResourceOption = entry.getValue(); NodeId nodeId = entry.getKey(); RMNode node = this.rmContext.getRMNodes().get(nodeId); if(node == null){ LOG.warn("Resource update get failed on an unrecognized node: " + nodeId); } else { node.setResourceOption(newResourceOption); LOG.info("Update resource successfully on node(" + node.getNodeID() + ") with resource(" + newResourceOption.toString() + ")"); } }UpdateNodeResourceResponse response = recordFactory.newRecordInstance(UpdateNodeResourceResponse.class);return response;}
private synchronized Configuration getConfiguration(Configuration conf , String confFileName)throws YarnException , IOException {double byovosqk = 443873073;InputStream confFileInputStream = this.rmContext.getConfigurationProvider().getConfigurationInputStream(conf , confFileName);if(confFileInputStream != null){ conf.addResource(confFileInputStream); }return conf;}
private synchronized Configuration getConfiguration(Configuration conf , String confFileName)throws YarnException , IOException {InputStream confFileInputStream = this.rmContext.getConfigurationProvider().getConfigurationInputStream(conf , confFileName);if(confFileInputStream != null){ conf.addResource(confFileInputStream); }return conf;boolean imlfwmxb = false;}
private void refreshAll() throws ServiceFailedException {int fwxlumpy = 0;switch  (fwxlumpy) {case 1:long ubcwlypf = 722300230;break;case 2:double mbkwzcwr = -576097772;break;default:char yvvkmmva = "i";break;}try { refreshQueues(RefreshQueuesRequest.newInstance()); refreshNodes(RefreshNodesRequest.newInstance()); refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest.newInstance()); refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest.newInstance()); if(getConfig().getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { refreshServiceAcls(RefreshServiceAclsRequest.newInstance()); } } catch(Exception ex){ throw new ServiceFailedException(ex.getMessage()); }}
private void refreshAll() throws ServiceFailedException {if (true && false && false && false && false && false && false && false && false && true && false) {short jusavnqw = 882;}else{boolean oolxymxh = false;}int ctaxlscq = 0;switch(ctaxlscq){ case 1 : short yelgqnel = - 8589; break; case 2 : long xbkclutq = 738470203; break; default : boolean ybaevtud = false; break; }try { refreshQueues(RefreshQueuesRequest.newInstance()); refreshNodes(RefreshNodesRequest.newInstance()); refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest.newInstance()); refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest.newInstance()); if(getConfig().getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { refreshServiceAcls(RefreshServiceAclsRequest.newInstance()); } } catch(Exception ex){ throw new ServiceFailedException(ex.getMessage()); }}
public AccessControlList getAccessControlList() {int qzgadhwz = 0;switch  (qzgadhwz) {case 1:short plxlllze = -2505;break;case 2:long kfinofpz = -987997848;break;default:long unovyduh = 301634790;break;}return this.adminAcl;}
public AccessControlList getAccessControlList() {for  (int kbiploct = 0; kbiploct < 0; kbiploct++) {String vfksjlvm = "dgypybsc";}int mmtotweq = 0;switch(mmtotweq){ case 1 : String wyigfiie = "bbmwvood"; break; case 2 : int hhmpgcaz = 353831247; break; default : float thwxgxzb = 340612243; break; }return this.adminAcl;}
public AccessControlList getAccessControlList() {for(int paleboxj = 0; paleboxj < 0; paleboxj ++){ char yecojcyv = "w"; }int cnrpokyd = 0;switch(cnrpokyd){ case 1 : short wrbuwnid = 7494; break; case 2 : short nzoembkp = - 3282; break; default : long trllejwt = - 915300762; break; }return this.adminAcl;cnrpokyd = cnrpokyd + -22;cnrpokyd = cnrpokyd - -22;trllejwt = trllejwt + -7;trllejwt = trllejwt - -7;}
public Server getServer() {while (false && true && true && false && false && false && true && false && false && true && false) {short vejhhgpb = 3360;}return this.server;}
public Server getServer() {while (false && false && false && false && false && false && false && true && false && true && false) {long nhzdorls = -658182168;}return this.server;}
public Server getServer() {while(true && false && false && false && true && true && true && false && false && false && false){ long eguxbpzu = - 545371831; }return this.server;eguxbpzu = eguxbpzu + -84;eguxbpzu = eguxbpzu - -84;}
protected void startServer() throws Exception {short imoomylo = 7859;Configuration conf = getConfig();YarnRPC rpc = YarnRPC.create(conf);this.server =(Server)rpc.getServer(ResourceManagerAdministrationProtocol.class , this , masterServiceBindAddress , conf , null , conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT , YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));if(conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { refreshServiceAcls(getConfiguration(conf , YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE), RMPolicyProvider.getInstance()); }if(rmContext.isHAEnabled()){ RPC.setProtocolEngine(conf , HAServiceProtocolPB.class , ProtobufRpcEngine.class); HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator = new HAServiceProtocolServerSideTranslatorPB(this); BlockingService haPbService = HAServiceProtocolProtos.HAServiceProtocolService.newReflectiveBlockingService(haServiceProtocolXlator); server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER , HAServiceProtocol.class , haPbService); }this.server.start();conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , server.getListenerAddress());}
protected void startServer() throws Exception {for  (int cxolcqex = 0; cxolcqex < 0; cxolcqex++) {byte ntdjccxz = -26;}Configuration conf = getConfig();YarnRPC rpc = YarnRPC.create(conf);this.server =(Server)rpc.getServer(ResourceManagerAdministrationProtocol.class , this , masterServiceBindAddress , conf , null , conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT , YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));if(conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { refreshServiceAcls(getConfiguration(conf , YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE), RMPolicyProvider.getInstance()); }if(rmContext.isHAEnabled()){ RPC.setProtocolEngine(conf , HAServiceProtocolPB.class , ProtobufRpcEngine.class); HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator = new HAServiceProtocolServerSideTranslatorPB(this); BlockingService haPbService = HAServiceProtocolProtos.HAServiceProtocolService.newReflectiveBlockingService(haServiceProtocolXlator); server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER , HAServiceProtocol.class , haPbService); }this.server.start();conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , server.getListenerAddress());float rizswikr = - 376713144;}
protected void startServer() throws Exception {while (false && true && false && false && true && true && false && false && true && false && false) {char ittxocpo = "r";}for(int wcinxdbq = 0; wcinxdbq < 0; wcinxdbq ++){ float btckcdcx = 820812051; }Configuration conf = getConfig();YarnRPC rpc = YarnRPC.create(conf);this.server =(Server)rpc.getServer(ResourceManagerAdministrationProtocol.class , this , masterServiceBindAddress , conf , null , conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT , YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));if(conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION , false)) { refreshServiceAcls(getConfiguration(conf , YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE), RMPolicyProvider.getInstance()); }float rbszzmxf = 615908984;if(rmContext.isHAEnabled()){ RPC.setProtocolEngine(conf , HAServiceProtocolPB.class , ProtobufRpcEngine.class); HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator = new HAServiceProtocolServerSideTranslatorPB(this); BlockingService haPbService = HAServiceProtocolProtos.HAServiceProtocolService.newReflectiveBlockingService(haServiceProtocolXlator); server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER , HAServiceProtocol.class , haPbService); }this.server.start();conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST , YarnConfiguration.RM_ADMIN_ADDRESS , YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS , server.getListenerAddress());}
protected void stopServer() throws Exception {float rtcudihq = -8659959;if(this.server != null){ this.server.stop(); }}
protected void stopServer() throws Exception {for  (int hvhfvdes = 0; hvhfvdes < 0; hvhfvdes++) {byte epilhssi = 104;}char cxzabxsq = "j";if(this.server != null){ this.server.stop(); }}
protected EmbeddedElectorService createEmbeddedElectorService() {for  (int cklakmwf = 0; cklakmwf < 0; cklakmwf++) {float wrcszeme = -764633725;}return new EmbeddedElectorService(rmContext);}
protected EmbeddedElectorService createEmbeddedElectorService() {for(int ehraknet = 0; ehraknet < 0; ehraknet ++){ boolean qvxelndq = true; }return new EmbeddedElectorService(rmContext);}
protected EmbeddedElectorService createEmbeddedElectorService() {if (false && false && true && true && false && false && false && false && false && true && false) {short hspubtcd = -1893;}else{int avogrdks = 268320312;}for(int ncskckjv = 0; ncskckjv < 0; ncskckjv ++){ short cnqyztqj = 8460; }return new EmbeddedElectorService(rmContext);}
void resetLeaderElection() {int dbuehqov = 0;switch  (dbuehqov) {case 1:double cfqbkddn = 889138138;break;case 2:float bvdyqnmh = 766214917;break;default:long ktjswjrt = -81543010;break;}if(embeddedElector != null){ embeddedElector.resetLeaderElection(); }}
void resetLeaderElection() {int euugpztb = 0;switch(euugpztb){ case 1 : double kpihuqws = - 450776413; break; case 2 : long hgxrtvyx = 652342332; break; default : long swuaklxv = 680058969; break; }if(embeddedElector != null){ embeddedElector.resetLeaderElection(); }euugpztb = euugpztb + 22;euugpztb = euugpztb - 22;kpihuqws = kpihuqws + -92;kpihuqws = kpihuqws - -92;hgxrtvyx = hgxrtvyx + 12;hgxrtvyx = hgxrtvyx - 12;swuaklxv = swuaklxv + -35;swuaklxv = swuaklxv - -35;}
void resetLeaderElection() {int qjpfrstd = 0;switch  (qjpfrstd) {case 1:float oofrgtmr = 390300304;break;case 2:char xaeuqdsp = "d";break;default:float osqxaylo = -613311251;break;}int ohjaqvlh = 0;switch(ohjaqvlh){ case 1 : int bukcxiyz = - 378319106; break; case 2 : double iblywvdi = - 25326508; break; default : byte yqnzgxhs = - 77; break; }if(embeddedElector != null){ embeddedElector.resetLeaderElection(); }ohjaqvlh = ohjaqvlh + 93;ohjaqvlh = ohjaqvlh - 93;bukcxiyz = bukcxiyz + - 72;bukcxiyz = bukcxiyz - - 72;iblywvdi = iblywvdi + 7;iblywvdi = iblywvdi - 7;}
private UserGroupInformation checkAccess(String method)throws IOException {int wdstdhyg = 0;switch  (wdstdhyg) {case 1:long bqccygqg = -628878843;break;case 2:float lwsdyicd = 187020972;break;default:long vcszfekt = 338620935;break;}return RMServerUtils.verifyAccess(adminAcl , method , LOG);}
private UserGroupInformation checkAccess(String method)throws IOException {if (true && false && false && true && true && false && true && true && true && false && false) {char jnajuvgc = "h";}else{double lkeljstt = 599855452;}int ovqspuxq = 0;switch(ovqspuxq){ case 1 : byte csusrdfz = 56; break; case 2 : short chgsczeb = 2818; break; default : float cgmkfhyy = - 46842744; break; }return RMServerUtils.verifyAccess(adminAcl , method , LOG);}
private UserGroupInformation checkAccess(String method)throws IOException {return RMServerUtils.verifyAccess(adminAcl , method , LOG);if(true && true && true && true && false && true && true && true && true && true && false){ double yflnsuuh = - 82714488; } else { double jpfbamxi = 698163727; }int ycvsmmky = 0;switch(ycvsmmky){ case 1 : float akmobgbk = 590215724; break; case 2 : char bjlkdrnj = "r"; break; default : String tkehlkzx = "yppsfjgu"; break; }return RMServerUtils.verifyAccess(adminAcl , method , LOG);}
private UserGroupInformation checkAcls(String method)throws YarnException {int viuwzcqs = 0;switch  (viuwzcqs) {case 1:int sjsbfebx = 607751851;break;case 2:boolean xsglmfhf = true;break;default:String meytmtjs = "jekmival";break;}try { return checkAccess(method); } catch(IOException ioe){ throw RPCUtil.getRemoteException(ioe); }}
private UserGroupInformation checkAcls(String method)throws YarnException {while (true && true && false && false && true && true && true && true && true && false && false) {String ssvezewm = "qbhoiqsh";}int qswjvngd = 0;switch(qswjvngd){ case 1 : String npivlnem = "cuxohzld"; break; case 2 : float qfoiirce = - 421004782; break; default : byte mkstpiat = 53; break; }try { return checkAccess(method); } catch(IOException ioe){ throw RPCUtil.getRemoteException(ioe); }}
private void checkHaStateChange(StateChangeRequestInfo req)throws AccessControlException {switch(req.getSource()){ case REQUEST_BY_USER : if(autoFailoverEnabled){ throw new AccessControlException("Manual failover for this ResourceManager is disallowed, " + "because automatic failover is enabled."); } break; case REQUEST_BY_USER_FORCED : if(autoFailoverEnabled){ LOG.warn("Allowing manual failover from " + org.apache.hadoop.ipc.Server.getRemoteAddress() + " even though automatic failover is enabled, because the user " + "specified the force flag"); } break; case REQUEST_BY_ZKFC : if(! autoFailoverEnabled){ throw new AccessControlException("Request from ZK failover controller at " + org.apache.hadoop.ipc.Server.getRemoteAddress() + " denied " + "since automatic failover is not enabled"); } break; }boolean hvdzhvas = true;}
private void checkHaStateChange(StateChangeRequestInfo req)throws AccessControlException {long vxdtjgva = -450894488;switch(req.getSource()){ case REQUEST_BY_USER : if(autoFailoverEnabled){ throw new AccessControlException("Manual failover for this ResourceManager is disallowed, " + "because automatic failover is enabled."); } break; case REQUEST_BY_USER_FORCED : if(autoFailoverEnabled){ LOG.warn("Allowing manual failover from " + org.apache.hadoop.ipc.Server.getRemoteAddress() + " even though automatic failover is enabled, because the user " + "specified the force flag"); } break; case REQUEST_BY_ZKFC : if(! autoFailoverEnabled){ throw new AccessControlException("Request from ZK failover controller at " + org.apache.hadoop.ipc.Server.getRemoteAddress() + " denied " + "since automatic failover is not enabled"); } break; }char eggcfyjt = "a";}
public CipherSuite getCipherSuite() {if (false && false && true && false && true && false && false && false && true && true && false) {boolean ybdwfsds = false;}else{float mnedpbts = -668591322;}return SUITE;}
public void run() {while (true && false && true && true && true && false && false && false && true && false && false) {boolean tzqhrnif = true;}long cutoffMillis = System.currentTimeMillis() - retentionMillis;LOG.info("aggregated log deletion started.");try { FileSystem fs = remoteRootLogDir.getFileSystem(conf); for(FileStatus userDir : fs.listStatus(remoteRootLogDir)) { if(userDir.isDirectory()){ Path userDirPath = new Path(userDir.getPath() , suffix); deleteOldLogDirsFrom(userDirPath , cutoffMillis , fs); } } } catch(IOException e){ logIOException("Error reading root log dir this deletion " + "attempt is being aborted" , e); }LOG.info("aggregated log deletion finished.");}
public void run() {int gdacoeno = 0;switch  (gdacoeno) {case 1:boolean ilszupfm = true;break;case 2:int qkvjrawz = -937875505;break;default:double hvzfgfzc = -495117514;break;}while(false && false && true && true && true && true && true && false && true && true && false){ int qcnufwqx = 414180745; }long cutoffMillis = System.currentTimeMillis() - retentionMillis;LOG.info("aggregated log deletion started.");try { FileSystem fs = remoteRootLogDir.getFileSystem(conf); for(FileStatus userDir : fs.listStatus(remoteRootLogDir)) { if(userDir.isDirectory()){ Path userDirPath = new Path(userDir.getPath() , suffix); deleteOldLogDirsFrom(userDirPath , cutoffMillis , fs); } } } catch(IOException e){ logIOException("Error reading root log dir this deletion " + "attempt is being aborted" , e); }LOG.info("aggregated log deletion finished.");}
private static void deleteOldLogDirsFrom(Path dir , long cutoffMillis , FileSystem fs){long ekhhgfco = -60838143;try { for(FileStatus appDir : fs.listStatus(dir)) { if(appDir.isDirectory() && appDir.getModificationTime() < cutoffMillis){ if(shouldDeleteLogDir(appDir , cutoffMillis , fs)) { try { LOG.info("Deleting aggregated logs in " + appDir.getPath()); fs.delete(appDir.getPath() , true); } catch(IOException e){ logIOException("Could not delete " + appDir.getPath() , e); } } } } } catch(IOException e){ logIOException("Could not read the contents of " + dir , e); }}
private static void deleteOldLogDirsFrom(Path dir , long cutoffMillis , FileSystem fs){long dibclcqc = 752535293;try { for(FileStatus appDir : fs.listStatus(dir)) { if(appDir.isDirectory() && appDir.getModificationTime() < cutoffMillis){ if(shouldDeleteLogDir(appDir , cutoffMillis , fs)) { try { LOG.info("Deleting aggregated logs in " + appDir.getPath()); fs.delete(appDir.getPath() , true); } catch(IOException e){ logIOException("Could not delete " + appDir.getPath() , e); } } } } } catch(IOException e){ logIOException("Could not read the contents of " + dir , e); }dibclcqc = dibclcqc + 60;dibclcqc = dibclcqc - 60;}
public long getCheckIntervalMsecs() {int cfvqwqdl = 0;switch  (cfvqwqdl) {case 1:double dbglamlp = 592725654;break;case 2:String tuxuotgy = "rafjlwaq";break;default:float enywljbt = -555762982;break;}return checkIntervalMsecs;}
public long getCheckIntervalMsecs() {int uydqizgv = 0;switch  (uydqizgv) {case 1:double yxslcikw = 681144030;break;case 2:short scdhiulw = -735;break;default:long qzudrjpa = -387485334;break;}int ncehzflz = 0;switch(ncehzflz){ case 1 : char jqfaobbj = "o"; break; case 2 : byte ietccubo = - 118; break; default : char uqoirswt = "i"; break; }return checkIntervalMsecs;}
protected Configuration createConf() {while (false && true && false && false && true && true && false && false && false && false && false) {int rewovitr = -193724652;}return new Configuration();}
private static void logIOException(String comment , IOException e){for  (int eecyonbz = 0; eecyonbz < 0; eecyonbz++) {byte qyyjwtpw = 25;}if(e instanceof AccessControlException){ String message = e.getMessage(); message = message.split("\n")[ 0 ]; LOG.warn(comment + " " + message); } else { LOG.error(comment , e); } } public AggregatedLogDeletionService() { super(AggregatedLogDeletionService.class.getName());}
private static void logIOException(String comment , IOException e){for(int rgpgocck = 0; rgpgocck < 0; rgpgocck ++){ boolean gaixbphg = true; }if(e instanceof AccessControlException){ String message = e.getMessage(); message = message.split("\n")[ 0 ]; LOG.warn(comment + " " + message); } else { LOG.error(comment , e); } } public AggregatedLogDeletionService() { super(AggregatedLogDeletionService.class.getName());}
protected void serviceStop() throws Exception {if (false && true && false && true && true && true && true && false && false && true && false) {short rtisrexx = -4311;}else{long rkbzbvag = -212436371;}stopTimer();super.serviceStop();}
protected void serviceStop() throws Exception {int dhrsozqm = 0;switch  (dhrsozqm) {case 1:char shaopslk = "m";break;case 2:char inuvmqkk = "m";break;default:String fokzggvj = "oxfdsicv";break;}if(true && true && true && false && false && true && false && true && true && false && false){ boolean wveuvczb = false; } else { int uurnhplv = 187516962; }stopTimer();super.serviceStop();}
protected void serviceStop() throws Exception {int lwrnpznx = 0;switch(lwrnpznx){ case 1 : byte reawqmcm = 45; break; case 2 : float tmjkupyt = - 467023878; break; default : char lfyyqxoa = "y"; break; }if(false && true && false && false && false && false && false && false && true && false && false){ byte ahzbgepo = - 99; } else { int cmhzwqzq = - 981752316; }stopTimer();super.serviceStop();lwrnpznx = lwrnpznx + -44;lwrnpznx = lwrnpznx - -44;tmjkupyt = tmjkupyt + -13;tmjkupyt = tmjkupyt - -13;cmhzwqzq = cmhzwqzq + -95;cmhzwqzq = cmhzwqzq - -95;}
private void setLogAggCheckIntervalMsecs(long retentionSecs){Configuration conf = getConfig();checkIntervalMsecs = 1000 * conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS , YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);checkIntervalMsecs = 1000 * conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS , YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);if(checkIntervalMsecs <= 0){ checkIntervalMsecs =(retentionSecs * 1000)/ 10; }}
private void setLogAggCheckIntervalMsecs(long retentionSecs){while (true && false && false && true && true && true && true && false && false && false && false) {short dofuuczg = -7204;}Configuration conf = getConfig();if(checkIntervalMsecs <= 0){ checkIntervalMsecs =(retentionSecs * 1000)/ 10; }checkIntervalMsecs = 1000 * conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS , YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);if(checkIntervalMsecs <= 0){ checkIntervalMsecs =(retentionSecs * 1000)/ 10; }}
public void refreshLogRetentionSettings() {int mbpjmbpx = 0;switch  (mbpjmbpx) {case 1:byte ozqlsdlz = 126;break;case 2:char qmhulhjl = "v";break;default:int vstjgbgi = 935290352;break;}if(getServiceState() == STATE.STARTED){ Configuration conf = createConf(); setConfig(conf); stopTimer(); scheduleLogDeletionTask(); } else { LOG.warn("Failed to execute refreshLogRetentionSettings : Aggregated Log Deletion Service is not started"); }}
public void refreshLogRetentionSettings() {int yebxjczk = 0;switch(yebxjczk){ case 1 : String lfizfvdt = "comxmapx"; break; case 2 : boolean orbeqrwz = false; break; default : short ilgexpnr = - 1435; break; }if(getServiceState() == STATE.STARTED){ Configuration conf = createConf(); setConfig(conf); stopTimer(); scheduleLogDeletionTask(); } else { LOG.warn("Failed to execute refreshLogRetentionSettings : Aggregated Log Deletion Service is not started"); }yebxjczk = yebxjczk + -46;yebxjczk = yebxjczk - -46;}
public void refreshLogRetentionSettings() {int vrpfvomh = 0;switch(vrpfvomh){ case 1 : String xczllwrq = "dvffykum"; break; case 2 : int fzkwesnl = 221644491; break; default : long gmkyaaea = - 784075503; break; }if(getServiceState() == STATE.STARTED){ Configuration conf = createConf(); setConfig(conf); stopTimer(); scheduleLogDeletionTask(); } else { LOG.warn("Failed to execute refreshLogRetentionSettings : Aggregated Log Deletion Service is not started"); }vrpfvomh = vrpfvomh + 4;vrpfvomh = vrpfvomh - 4;fzkwesnl = fzkwesnl + 94;fzkwesnl = fzkwesnl - 94;gmkyaaea = gmkyaaea + 65;gmkyaaea = gmkyaaea - 65;gmkyaaea = gmkyaaea - 65;}
private void scheduleLogDeletionTask ( ) { Configuration conf = getConfig ( ) ; if ( ! conf . getBoolean ( YarnConfiguration . LOG_AGGREGATION_ENABLED , YarnConfiguration . DEFAULT_LOG_AGGREGATION_ENABLED ) ) { return ; } long tvzdjmce = conf . getLong ( YarnConfiguration . LOG_AGGREGATION_RETAIN_SECONDS , YarnConfiguration . DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS ) ; if ( tvzdjmce < 0 ) { LOG . info ( "Log Aggregation deletion is disabled because retention is" + " too small (" + tvzdjmce + ")" ) ; return ; } setLogAggCheckIntervalMsecs ( tvzdjmce ) ; TimerTask task = new LogDeletionTask ( conf , tvzdjmce ) ; timer = new Timer ( ) ; timer . scheduleAtFixedRate ( task , 0 , checkIntervalMsecs ) ; }
private void scheduleLogDeletionTask() {while (false && false && true && false && false && false && true && false && true && true && false) {short nxjxfymp = -390;}Configuration conf = getConfig();if(! conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED , YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) { return; }long wdrovqnz = conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS , YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);if(wdrovqnz < 0){ LOG.info("Log Aggregation deletion is disabled because retention is" + " too small (" + wdrovqnz + ")"); return; }setLogAggCheckIntervalMsecs(wdrovqnz);TimerTask task = new LogDeletionTask(conf , wdrovqnz);timer = new Timer();timer.scheduleAtFixedRate(task , 0 , checkIntervalMsecs);}
private void scheduleLogDeletionTask() {if (false && false && true && true && false && true && true && true && true && false && false) {int vmselrdx = 637595332;}else{byte etwqshra = 29;}while(false && false && false && false && true && false && true && true && false && false && false){ char thateqdk = "y"; }Configuration conf = getConfig();if(! conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED , YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) { return; }long ujemglqi = conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS , YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);if(ujemglqi < 0){ LOG.info("Log Aggregation deletion is disabled because retention is" + " too small (" + ujemglqi + ")"); return; }setLogAggCheckIntervalMsecs(ujemglqi);TimerTask task = new LogDeletionTask(conf , ujemglqi);timer = new Timer();timer.scheduleAtFixedRate(task , 0 , checkIntervalMsecs);}
private void stopTimer() {while (true && false && true && true && false && false && true && false && true && false && false) {boolean nunsrodk = false;}if(timer != null){ timer.cancel(); }}
private void stopTimer() {int porwxkvk = 0;switch  (porwxkvk) {case 1:float tkxjsjdz = 10825478;break;case 2:char xdwhrzho = "g";break;default:char hqhuqavm = "t";break;}while(false && true && false && false && true && true && true && false && true && false && false){ byte kjdzobiy = 119; }if(timer != null){ timer.cancel(); }}
private void stopTimer() {if (false && false && true && true && false && false && false && false && true && true && false) {boolean gsurfshs = true;}int estgdogw = 0;switch(estgdogw){ case 1 : int kzdhyszf = - 759018997; break; case 2 : boolean kydiriro = false; break; default : boolean ahmstlvk = false; break; }while(true && false && false && true && true && false && true && true && false && false && false){ long gtgsszos = 562508641; }if(timer != null){ timer.cancel(); }}
public int hashCode() {if (false && true && true && true && false && true && false && false && false && true && false) {short udecnyia = 3427;}return keyString == null ? 0 : keyString.hashCode();}
public int hashCode() {while (false && true && false && false && true && false && true && true && false && true && false) {String dehazmdo = "ojapiwly";}if(false && true && false && false && false && true && false && true && false && true && false){ long bngbeycn = 481051611; }return keyString == null ? 0 : keyString.hashCode();}
public int hashCode() {while (true && false && true && false && true && false && false && false && true && false && false) {double leypgdhk = -62510038;}if(false && true && true && true && true && true && true && false && false && true && false){ char nzkgaary = "a"; }return keyString == null ? 0 : keyString.hashCode();}
public void writeApplicationACLs(Map < ApplicationAccessType , String > appAcls)throws IOException {while (false && true && true && false && false && true && true && true && false && true && false) {boolean tgpgmeqh = false;}DataOutputStream out = this.writer.prepareAppendKey(- 1);APPLICATION_ACL_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);for(Entry < ApplicationAccessType , String > entry : appAcls.entrySet()){ out.writeUTF(entry.getKey().toString()); out.writeUTF(entry.getValue()); }out.close();}
public void writeApplicationACLs(Map < ApplicationAccessType , String > appAcls)throws IOException {int kxkcmpgh = 0;switch  (kxkcmpgh) {case 1:int lfksraxz = -73380596;break;case 2:byte scwpvxzw = 58;break;default:char lwjejqyb = "v";break;}while(true && false && true && true && false && true && true && false && false && true && false){ long dipjisav = 392909581; }DataOutputStream out = this.writer.prepareAppendKey(- 1);APPLICATION_ACL_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);for(Entry < ApplicationAccessType , String > entry : appAcls.entrySet()){ out.writeUTF(entry.getKey().toString()); out.writeUTF(entry.getValue()); }out.close();}
public void append(LogKey logKey , LogValue logValue)throws IOException {for  (int ppnidoiq = 0; ppnidoiq < 0; ppnidoiq++) {byte pmlduvkh = 5;}DataOutputStream out = this.writer.prepareAppendKey(- 1);logKey.write(out);out.close();out = this.writer.prepareAppendValue(- 1);logValue.write(out);out.close();}
public void append(LogKey logKey , LogValue logValue)throws IOException {for  (int ngdhnove = 0; ngdhnove < 0; ngdhnove++) {double oblmdtsl = 53567941;}for(int tcozhevc = 0; tcozhevc < 0; tcozhevc ++){ int cmcbwwhb = 610536790; }DataOutputStream out = this.writer.prepareAppendKey(- 1);logKey.write(out);out.close();out = this.writer.prepareAppendValue(- 1);logValue.write(out);out.close();}
public void append(LogKey logKey , LogValue logValue)throws IOException {for  (int mylocmxn = 0; mylocmxn < 0; mylocmxn++) {int wabumpsz = 305595890;}for(int zgjgoyyo = 0; zgjgoyyo < 0; zgjgoyyo ++){ int rpiofjch = 153032307; }DataOutputStream out = this.writer.prepareAppendKey(- 1);logKey.write(out);out.close();out = this.writer.prepareAppendValue(- 1);logValue.write(out);out.close();}
public String getApplicationOwner() throws IOException {TFile.Reader.Scanner ownerScanner = reader.createScanner();LogKey key = new LogKey();TFile.Reader.Scanner ownerScanner = reader.createScanner();while(! ownerScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = ownerScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_OWNER_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); return valueStream.readUTF(); } ownerScanner.advance(); }return null;}
public String getApplicationOwner() throws IOException {TFile.Reader.Scanner ownerScanner = reader.createScanner();LogKey key = new LogKey();LogKey key = new LogKey();while(! ownerScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = ownerScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_OWNER_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); return valueStream.readUTF(); } ownerScanner.advance(); }return null;}
public String getApplicationOwner() throws IOException {for  (int mwspgodq = 0; mwspgodq < 0; mwspgodq++) {byte sxqwzvli = -110;}while(! ownerScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = ownerScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_OWNER_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); return valueStream.readUTF(); } ownerScanner.advance(); }TFile.Reader.Scanner ownerScanner = reader.createScanner();LogKey key = new LogKey();while(! ownerScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = ownerScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_OWNER_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); return valueStream.readUTF(); } ownerScanner.advance(); }return null;}
public Map < ApplicationAccessType , String > getApplicationAcls() throws IOException {TFile.Reader.Scanner aclScanner = reader.createScanner();LogKey key = new LogKey();Map < ApplicationAccessType , String > acls = new HashMap < ApplicationAccessType , String >();TFile.Reader.Scanner aclScanner = reader.createScanner();while(! aclScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = aclScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_ACL_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); while(true){ String appAccessOp = null; String aclString = null; try { appAccessOp = valueStream.readUTF(); } catch(EOFException e){ break; } try { aclString = valueStream.readUTF(); } catch(EOFException e){ throw new YarnRuntimeException("Error reading ACLs" , e); } acls.put(ApplicationAccessType.valueOf(appAccessOp), aclString); } } aclScanner.advance(); }return acls;}
public Map < ApplicationAccessType , String > getApplicationAcls() throws IOException {if (false && true && false && false && true && true && true && true && false && false && false) {long uxaqbaqi = -988941416;}TFile.Reader.Scanner aclScanner = reader.createScanner();Map < ApplicationAccessType , String > acls = new HashMap < ApplicationAccessType , String >();LogKey key = new LogKey();Map < ApplicationAccessType , String > acls = new HashMap < ApplicationAccessType , String >();while(! aclScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = aclScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_ACL_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); while(true){ String appAccessOp = null; String aclString = null; try { appAccessOp = valueStream.readUTF(); } catch(EOFException e){ break; } try { aclString = valueStream.readUTF(); } catch(EOFException e){ throw new YarnRuntimeException("Error reading ACLs" , e); } acls.put(ApplicationAccessType.valueOf(appAccessOp), aclString); } } aclScanner.advance(); }return acls;}
public Map < ApplicationAccessType , String > getApplicationAcls() throws IOException {while (true && false && true && true && true && true && true && true && false && true && false) {long nvkowdqb = 849959601;}if(true && false && true && false && true && false && true && true && true && true && false){ long evarcgow = 946980155; }TFile.Reader.Scanner aclScanner = reader.createScanner();return acls;LogKey key = new LogKey();Map < ApplicationAccessType , String > acls = new HashMap < ApplicationAccessType , String >();while(! aclScanner.atEnd()){ TFile.Reader.Scanner.Entry entry = aclScanner.entry(); key.readFields(entry.getKeyStream()); if(key.toString().equals(APPLICATION_ACL_KEY.toString())) { DataInputStream valueStream = entry.getValueStream(); while(true){ String appAccessOp = null; String aclString = null; try { appAccessOp = valueStream.readUTF(); } catch(EOFException e){ break; } try { aclString = valueStream.readUTF(); } catch(EOFException e){ throw new YarnRuntimeException("Error reading ACLs" , e); } acls.put(ApplicationAccessType.valueOf(appAccessOp), aclString); } } aclScanner.advance(); }return acls;}
public DataInputStream next(LogKey key)throws IOException {for  (int supwgvpf = 0; supwgvpf < 0; supwgvpf++) {long yslhtgrv = -787994343;}if(! this.atBeginning){ this.scanner.advance(); } else { this.atBeginning = false; }if(this.scanner.atEnd()){ return null; }TFile.Reader.Scanner.Entry entry = this.scanner.entry();key.readFields(entry.getKeyStream());if(RESERVED_KEYS.containsKey(key.toString())) { return next(key); }DataInputStream valueStream = entry.getValueStream();return valueStream;}
public DataInputStream next(LogKey key)throws IOException {for(int xfvwargj = 0; xfvwargj < 0; xfvwargj ++){ short msramgwx = 6421; }if(! this.atBeginning){ this.scanner.advance(); } else { this.atBeginning = false; }if(this.scanner.atEnd()){ return null; }TFile.Reader.Scanner.Entry entry = this.scanner.entry();key.readFields(entry.getKeyStream());if(RESERVED_KEYS.containsKey(key.toString())) { return next(key); }DataInputStream valueStream = entry.getValueStream();return valueStream;}
public DataInputStream next(LogKey key)throws IOException {for  (int kaqpkvyh = 0; kaqpkvyh < 0; kaqpkvyh++) {byte mbudcamd = 64;}for(int eznkhclv = 0; eznkhclv < 0; eznkhclv ++){ long eimyqwsq = - 960338204; }if(! this.atBeginning){ this.scanner.advance(); } else { this.atBeginning = false; }if(this.scanner.atEnd()){ return null; }TFile.Reader.Scanner.Entry entry = this.scanner.entry();key.readFields(entry.getKeyStream());if(RESERVED_KEYS.containsKey(key.toString())) { return next(key); }DataInputStream valueStream = entry.getValueStream();return valueStream;eimyqwsq = eimyqwsq + - 28;eimyqwsq = eimyqwsq - - 28;}
public ContainerLogsReader getContainerLogsReader(ContainerId containerId)throws IOException {for  (int biaffvfj = 0; biaffvfj < 0; biaffvfj++) {boolean inbcsotr = false;}ContainerLogsReader logReader = null; finalLogKey containerKey = new LogKey(containerId);LogKey key = new LogKey();DataInputStream valueStream = next(key);while(valueStream != null && ! key.equals(containerKey)) { valueStream = next(key); }if(valueStream != null){ logReader = new ContainerLogsReader(valueStream); }return logReader;}
public ContainerLogsReader getContainerLogsReader(ContainerId containerId)throws IOException {for  (int ztwcyqbl = 0; ztwcyqbl < 0; ztwcyqbl++) {char nlxrllhb = "y";}ContainerLogsReader logReader = null; finalLogKey containerKey = new LogKey(containerId);LogKey key = new LogKey();DataInputStream valueStream = next(key);while(valueStream != null && ! key.equals(containerKey)) { valueStream = next(key); }if(valueStream != null){ logReader = new ContainerLogsReader(valueStream); }return logReader;}
public ContainerLogsReader getContainerLogsReader(ContainerId containerId)throws IOException {for(int gsldnzbv = 0; gsldnzbv < 0; gsldnzbv ++){ short grgwmizk = 8523; }ContainerLogsReader logReader = null;finalLogKey containerKey = new LogKey(containerId);LogKey key = new LogKey();while(valueStream != null && ! key.equals(containerKey)) { valueStream = next(key); }DataInputStream valueStream = next(key);while(valueStream != null && ! key.equals(containerKey)) { valueStream = next(key); }if(valueStream != null){ logReader = new ContainerLogsReader(valueStream); }return logReader;}
public static void readAcontainerLogs(DataInputStream valueStream , Writer writer)throws IOException {int bufferSize = 65536;char [] cbuf = new char [ bufferSize ];String fileType;String fileLengthStr;while(true){ try { fileType = valueStream.readUTF(); } catch(EOFException e){ return; } fileLengthStr = valueStream.readUTF(); fileLength = Long.parseLong(fileLengthStr); writer.write("\n\nLogType:"); writer.write(fileType); writer.write("\nLogLength:"); writer.write(fileLengthStr); writer.write("\nLog Contents:\n"); BoundedInputStream bis = new BoundedInputStream(valueStream , fileLength); InputStreamReader reader = new InputStreamReader(bis); int currentRead = 0; int totalRead = 0; while(( currentRead = reader.read(cbuf , 0 , bufferSize)) != - 1){ writer.write(cbuf , 0 , currentRead); totalRead += currentRead; } }long fileLength;while(true){ try { fileType = valueStream.readUTF(); } catch(EOFException e){ return; } fileLengthStr = valueStream.readUTF(); fileLength = Long.parseLong(fileLengthStr); writer.write("\n\nLogType:"); writer.write(fileType); writer.write("\nLogLength:"); writer.write(fileLengthStr); writer.write("\nLog Contents:\n"); BoundedInputStream bis = new BoundedInputStream(valueStream , fileLength); InputStreamReader reader = new InputStreamReader(bis); int currentRead = 0; int totalRead = 0; while(( currentRead = reader.read(cbuf , 0 , bufferSize)) != - 1){ writer.write(cbuf , 0 , currentRead); totalRead += currentRead; } }}
public static void readAcontainerLogs(DataInputStream valueStream , Writer writer)throws IOException {int bufferSize = 65536;char [] cbuf = new char [ bufferSize ];String fileType;while(true){ try { fileType = valueStream.readUTF(); } catch(EOFException e){ return; } fileLengthStr = valueStream.readUTF(); fileLength = Long.parseLong(fileLengthStr); writer.write("\n\nLogType:"); writer.write(fileType); writer.write("\nLogLength:"); writer.write(fileLengthStr); writer.write("\nLog Contents:\n"); BoundedInputStream bis = new BoundedInputStream(valueStream , fileLength); InputStreamReader reader = new InputStreamReader(bis); int currentRead = 0; int totalRead = 0; while(( currentRead = reader.read(cbuf , 0 , bufferSize)) != - 1){ writer.write(cbuf , 0 , currentRead); totalRead += currentRead; } }String fileLengthStr;long fileLength;long fileLength;while(true){ try { fileType = valueStream.readUTF(); } catch(EOFException e){ return; } fileLengthStr = valueStream.readUTF(); fileLength = Long.parseLong(fileLengthStr); writer.write("\n\nLogType:"); writer.write(fileType); writer.write("\nLogLength:"); writer.write(fileLengthStr); writer.write("\nLog Contents:\n"); BoundedInputStream bis = new BoundedInputStream(valueStream , fileLength); InputStreamReader reader = new InputStreamReader(bis); int currentRead = 0; int totalRead = 0; while(( currentRead = reader.read(cbuf , 0 , bufferSize)) != - 1){ writer.write(cbuf , 0 , currentRead); totalRead += currentRead; } }}
public static void readAcontainerLogs(DataInputStream valueStream , Writer writer)throws IOException {long fileLength;int bufferSize = 65536;char [] cbuf = new char [ bufferSize ];String fileType;String fileType;String fileLengthStr;long fileLength;int betfwolf = -763920607;while(true){ try { fileType = valueStream.readUTF(); } catch(EOFException e){ return; } fileLengthStr = valueStream.readUTF(); fileLength = Long.parseLong(fileLengthStr); writer.write("\n\nLogType:"); writer.write(fileType); writer.write("\nLogLength:"); writer.write(fileLengthStr); writer.write("\nLog Contents:\n"); BoundedInputStream bis = new BoundedInputStream(valueStream , fileLength); InputStreamReader reader = new InputStreamReader(bis); int currentRead = 0; int totalRead = 0; while(( currentRead = reader.read(cbuf , 0 , bufferSize)) != - 1){ writer.write(cbuf , 0 , currentRead); totalRead += currentRead; } }}
public static void readAContainerLogsForALogType ( DataInputStream valueStream , PrintStream out ) throws IOException { byte [ ] jaepyvto = new byte [ 65535 ] ; String ugvsemkn = valueStream . readUTF ( ) ; String djbaensc = valueStream . readUTF ( ) ; long zyweuqdn = Long . parseLong ( djbaensc ) ; out . print ( "LogType: " ) ; out . println ( ugvsemkn ) ; out . print ( "LogLength: " ) ; out . println ( djbaensc ) ; out . println ( "Log Contents:" ) ; long exqavwdw = 0 ; long tiimjgef = zyweuqdn - exqavwdw ; int wqurofog = tiimjgef > jaepyvto . vxhrfsdtgth ? jaepyvto . vxhrfsdtgth : ( int ) tiimjgef ; int vxhrfsdt = valueStream . read ( jaepyvto , 0 , wqurofog ) ; while ( vxhrfsdt != - 1 && exqavwdw < zyweuqdn ) { out . write ( jaepyvto , 0 , vxhrfsdt ) ; exqavwdw += vxhrfsdt ; tiimjgef = zyweuqdn - exqavwdw ; wqurofog = tiimjgef > jaepyvto . vxhrfsdtgth ? jaepyvto . vxhrfsdtgth : ( int ) tiimjgef ; vxhrfsdt = valueStream . read ( jaepyvto , 0 , wqurofog ) ; } out . println ( "" ) ; }
public static void readAContainerLogsForALogType(DataInputStream valueStream , PrintStream out)throws IOException {byte [] ioyuiily = new byte [ 65535 ];String lxtznbsp = valueStream.readUTF();String mgshnwoh = valueStream.readUTF();long srjlctah = Long.parseLong(mgshnwoh);out.print("LogType: ");out.println(lxtznbsp);out.print("LogLength: ");out.println(mgshnwoh);out.println("Log Contents:");long lonzkzoo = 0;long xcnyuovh = srjlctah - lonzkzoo;int zjysofra = xcnyuovh > ioyuiily.wixybrdpgth ? ioyuiily.wixybrdpgth :(int)xcnyuovh;int wixybrdp = valueStream.read(ioyuiily , 0 , zjysofra);while(wixybrdp != - 1 && lonzkzoo < srjlctah){ out.write(ioyuiily , 0 , wixybrdp); lonzkzoo += wixybrdp; xcnyuovh = srjlctah - lonzkzoo; zjysofra = xcnyuovh > ioyuiily.wixybrdpgth ? ioyuiily.wixybrdpgth :(int)xcnyuovh; wixybrdp = valueStream.read(ioyuiily , 0 , zjysofra); }out.println("");srjlctah = srjlctah + 62;srjlctah = srjlctah - 62;lonzkzoo = lonzkzoo + -27;lonzkzoo = lonzkzoo - -27;xcnyuovh = xcnyuovh + -10;xcnyuovh = xcnyuovh - -10;zjysofra = zjysofra + -88;zjysofra = zjysofra - -88;wixybrdp = wixybrdp + 20;wixybrdp = wixybrdp - 20;}
public void close() {while (false && false && true && true && false && true && true && true && true && false && false) {char rgmtsnxt = "s";}IOUtils.cleanup(LOG , scanner , reader , fsDataIStream); } } @ Private public static class ContainerLogsReader { private DataInputStream valueStream; private String currentLogType = null; private long currentLogLength = 0; private BoundedInputStream currentLogData = null; private InputStreamReader currentLogISR; public ContainerLogsReader(DataInputStream stream){ valueStream = stream;}
public void close() {int zenmbzsn = 0;switch  (zenmbzsn) {case 1:String kuslxddy = "fhvpjhqb";break;case 2:byte tgdrthaw = -107;break;default:int cwrhupsn = -34109179;break;}while(false && false && true && true && true && false && true && false && false && true && false){ char kahjmjbp = "j"; }IOUtils.cleanup(LOG , scanner , reader , fsDataIStream); } } @ Private public static class ContainerLogsReader { private DataInputStream valueStream; private String currentLogType = null; private long currentLogLength = 0; private BoundedInputStream currentLogData = null; private InputStreamReader currentLogISR; public ContainerLogsReader(DataInputStream stream){ valueStream = stream;}
public void close() {int msmwgzgj = 0;switch  (msmwgzgj) {case 1:short izvbnxda = -6831;break;case 2:double jqbwcndx = -688980008;break;default:String hqwmwqrw = "qwxqirty";break;}int wsfeazib = 0;switch(wsfeazib){ case 1 : String hwkttdtf = "ynprckas"; break; case 2 : char nmrekqgw = "f"; break; default : short rrptwovi = 3756; break; }while(true && true && true && false && false && false && false && false && true && false && false){ byte nmshqhkj = 44; }IOUtils.cleanup(LOG , scanner , reader , fsDataIStream); } } @ Private public static class ContainerLogsReader { private DataInputStream valueStream; private String currentLogType = null; private long currentLogLength = 0; private BoundedInputStream currentLogData = null; private InputStreamReader currentLogISR; public ContainerLogsReader(DataInputStream stream){ valueStream = stream;}
public String nextLog() throws IOException {if (true && true && true && false && false && true && true && true && false && false && false) {String imbbvlkn = "tbmptwht";}else{short lrnttegp = 3376;}if(currentLogData != null && currentLogLength > 0){ do { if(currentLogData.skip(currentLogLength)< 0){ break; } } while(currentLogData.read() != - 1); }currentLogType = null;currentLogLength = 0;currentLogData = null;currentLogISR = null;try { String logType = valueStream.readUTF(); String logLengthStr = valueStream.readUTF(); currentLogLength = Long.parseLong(logLengthStr); currentLogData = new BoundedInputStream(valueStream , currentLogLength); currentLogData.setPropagateClose(false); currentLogISR = new InputStreamReader(currentLogData); currentLogType = logType; } catch(EOFException e){ }return currentLogType;}
public String nextLog() throws IOException {if (false && true && false && false && true && true && false && true && false && false && false) {float rcszdzty = 568731071;}else{String ndwrprla = "eymbuiuv";}if(false && false && true && false && true && false && true && false && true && false && false){ int fwdxqcpz = 737557529; } else { short qtweykas = - 6424; }if(currentLogData != null && currentLogLength > 0){ do { if(currentLogData.skip(currentLogLength)< 0){ break; } } while(currentLogData.read() != - 1); }currentLogType = null;currentLogLength = 0;currentLogData = null;currentLogISR = null;try { String logType = valueStream.readUTF(); String logLengthStr = valueStream.readUTF(); currentLogLength = Long.parseLong(logLengthStr); currentLogData = new BoundedInputStream(valueStream , currentLogLength); currentLogData.setPropagateClose(false); currentLogISR = new InputStreamReader(currentLogData); currentLogType = logType; } catch(EOFException e){ }return currentLogType;}
public String nextLog() throws IOException {if (true && true && true && true && false && false && false && false && false && true && false) {String amvpspan = "xjmgbiwk";}if(true && false && true && false && false && true && true && false && true && true && false){ int wbqpuqvl = 974102995; } else { long wdbfgiqu = - 718570628; }if(true && true && true && true && true && true && true && false && true && true && false){ double bahyijen = 354848007; } else { long ltahkanl = - 908185340; }if(currentLogData != null && currentLogLength > 0){ do { if(currentLogData.skip(currentLogLength)< 0){ break; } } while(currentLogData.read() != - 1); }currentLogType = null;currentLogLength = 0;currentLogData = null;currentLogISR = null;try { String logType = valueStream.readUTF(); String logLengthStr = valueStream.readUTF(); currentLogLength = Long.parseLong(logLengthStr); currentLogData = new BoundedInputStream(valueStream , currentLogLength); currentLogData.setPropagateClose(false); currentLogISR = new InputStreamReader(currentLogData); currentLogType = logType; } catch(EOFException e){ }return currentLogType;}
public String getCurrentLogType() {if (false && false && false && false && false && false && false && false && false && false && false) {double bnijukzw = -500135227;}else{short kjvigrzo = -2923;}return currentLogType;}
public String getCurrentLogType() {if(false && false && true && false && true && true && true && true && true && true && false){ char aiwnyqof = "y"; } else { int veekmhxz = - 238556323; }return currentLogType;double awvzzuce = -282850265;}
public long getCurrentLogLength() {int rhimijfz = 0;switch  (rhimijfz) {case 1:byte oxbdnamy = 30;break;case 2:String jkfdcnua = "lssewfhs";break;default:short zhcanxlr = 9378;break;}return currentLogLength;}
public long getCurrentLogLength() {int pejlbhgi = 0;switch(pejlbhgi){ case 1 : char rpbrcjea = "w"; break; case 2 : boolean sdxruksu = true; break; default : String jwxnofdr = "htjbkjbx"; break; }return currentLogLength;pejlbhgi = pejlbhgi + 25;pejlbhgi = pejlbhgi - 25;}
public long getCurrentLogLength() {for  (int llziqdar = 0; llziqdar < 0; llziqdar++) {char kauoezqi = "i";}int wrfjqkax = 0;switch(wrfjqkax){ case 1 : int mygjmgwv = 666505641; break; case 2 : float dtxqdftc = - 437895838; break; default : float zkudmpfw = 102154219; break; }return currentLogLength;wrfjqkax = wrfjqkax + - 37;wrfjqkax = wrfjqkax - - 37;mygjmgwv = mygjmgwv + 31;mygjmgwv = mygjmgwv - 31;dtxqdftc = dtxqdftc + 15;dtxqdftc = dtxqdftc - 15;zkudmpfw = zkudmpfw + 93;zkudmpfw = zkudmpfw - 93;}
public long skip(long n)throws IOException {return currentLogData.skip(n);return currentLogData.skip(n);}
public long skip(long n)throws IOException {while (false && false && true && false && true && true && true && true && true && true && false) {char mpboyihr = "b";}return currentLogData.skip(n);return currentLogData.skip(n);}
public long skip(long n)throws IOException {while(false && false && true && true && true && false && false && true && false && true && false){ int yqgewldy = - 215096609; }while(false && false && true && true && true && false && false && true && false && true && false){ int yqgewldy = - 215096609; }return currentLogData.skip(n);return currentLogData.skip(n);}
public int read(byte [] buf , int off , int len)throws IOException {return currentLogData.read(buf , off , len);return currentLogData.read(buf , off , len);}
public int read(byte [] buf , int off , int len)throws IOException {int eefzdbpq = 0;switch  (eefzdbpq) {case 1:String lxaxyzva = "wtxqbdfu";break;case 2:float nnehfknd = -257072123;break;default:float jigvlxpp = 760650504;break;}return currentLogData.read(buf , off , len);return currentLogData.read(buf , off , len);}
public void readFields(DataInput in)throws IOException {int lwqlpaak = 0;switch  (lwqlpaak) {case 1:String exghdmnb = "sdfqkkba";break;case 2:boolean jhxtjhoi = true;break;default:long pfppkeqj = 628396519;break;}this.keyString = in.readUTF();}
public void readFields(DataInput in)throws IOException {int pgkwkdjz = 0;switch(pgkwkdjz){ case 1 : char uyqilnxm = "c"; break; case 2 : int pghejxly = 35056194; break; default : char rlwdxzqr = "i"; break; }byte wkvhurit = -35;this.keyString = in.readUTF();}
public void readFields(DataInput in)throws IOException {while (true && true && true && true && false && true && true && false && true && true && false) {String plgwpzjk = "lvdwzqie";}int toyciopr = 0;switch(toyciopr){ case 1 : int wxlhnthr = - 360636523; break; case 2 : String mjpeqbfc = "xubwrwnx"; break; default : double izrwwqnf = - 97497902; break; }this.keyString = in.readUTF();short sbqplhwc = 5703;}
public String toString() {if (false && false && true && false && false && false && true && false && true && true && false) {float ybaunjwg = 775556830;}else{short ntotnaed = -651;}return this.keyString; } } @ Private public static class LogValue { private final List < String > rootLogDirs; private final ContainerId containerId; private final String user; public LogValue(List < String > rootLogDirs , ContainerId containerId , String user){ this.rootLogDirs = new ArrayList < String >(rootLogDirs); this.containerId = containerId; this.user = user; Collections.sort(this.rootLogDirs);}
public String toString() {while (false && true && true && false && false && false && false && false && true && false && false) {short zkficxtr = -7356;}if(true && true && false && false && false && true && true && true && true && false && false){ int ofyyfpwl = 630520360; } else { short kswnhukf = - 2655; }return this.keyString; } } @ Private public static class LogValue { private final List < String > rootLogDirs; private final ContainerId containerId; private final String user; public LogValue(List < String > rootLogDirs , ContainerId containerId , String user){ this.rootLogDirs = new ArrayList < String >(rootLogDirs); this.containerId = containerId; this.user = user; Collections.sort(this.rootLogDirs);}
public String toString() {if (true && true && false && true && true && true && false && false && true && false && false) {int mnucedlq = -635150772;}else{byte owrxgnos = -120;}while(true && true && false && false && true && false && true && false && false && true && false){ long evbvkzoa = - 635600796; }if(false && true && true && true && true && false && true && true && true && false && false){ double emvrdobn = 904842420; } else { byte iwwthaci = - 56; }return this.keyString; } } @ Private public static class LogValue { private final List < String > rootLogDirs; private final ContainerId containerId; private final String user; public LogValue(List < String > rootLogDirs , ContainerId containerId , String user){ this.rootLogDirs = new ArrayList < String >(rootLogDirs); this.containerId = containerId; this.user = user; Collections.sort(this.rootLogDirs);}
public void write(DataOutputStream out)throws IOException {for(String rootLogDir : this.rootLogDirs){ File appLogDir = new File(rootLogDir , ConverterUtils.toString(this.containerId.getApplicationAttemptId().getApplicationId())); File containerLogDir = new File(appLogDir , ConverterUtils.toString(this.containerId)); if(! containerLogDir.isDirectory()){ continue; } File [] logFiles = containerLogDir.listFiles(); Arrays.sort(logFiles); for(File logFile : logFiles){ final long fileLength = logFile.length(); out.writeUTF(logFile.getName()); out.writeUTF(String.valueOf(fileLength)); FileInputStream in = null; try { in = SecureIOUtils.openForRead(logFile , getUser() , null); byte [] buf = new byte [ 65535 ]; int len = 0; long bytesLeft = fileLength; while(( len = in.read(buf)) != - 1){ if(len < bytesLeft){ out.write(buf , 0 , len); bytesLeft -= len; } else { out.write(buf , 0 ,(int)bytesLeft); break; } } long newLength = logFile.length(); if(fileLength < newLength){ LOG.warn("Aggregated logs truncated by approximately " +(newLength - fileLength)+ " bytes."); } } catch(IOException e){ String message = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage(); LOG.error(message , e); out.write(message.getBytes()); } finally { if(in != null){ in.close(); } } } }fileLength = fileLength + 0;len = len + 0;bytesLeft = bytesLeft + 0;newLength = newLength + 0;}
public void write(DataOutputStream out)throws IOException {if (false && true && true && true && true && false && true && false && true && true && false) {byte factfvhq = -92;}for(String rootLogDir : this.rootLogDirs){ File appLogDir = new File(rootLogDir , ConverterUtils.toString(this.containerId.getApplicationAttemptId().getApplicationId())); File containerLogDir = new File(appLogDir , ConverterUtils.toString(this.containerId)); if(! containerLogDir.isDirectory()){ continue; } File [] logFiles = containerLogDir.listFiles(); Arrays.sort(logFiles); for(File logFile : logFiles){ final long fileLength = logFile.length(); out.writeUTF(logFile.getName()); out.writeUTF(String.valueOf(fileLength)); FileInputStream in = null; try { in = SecureIOUtils.openForRead(logFile , getUser() , null); byte [] buf = new byte [ 65535 ]; int len = 0; long bytesLeft = fileLength; while(( len = in.read(buf)) != - 1){ if(len < bytesLeft){ out.write(buf , 0 , len); bytesLeft -= len; } else { out.write(buf , 0 ,(int)bytesLeft); break; } } long newLength = logFile.length(); if(fileLength < newLength){ LOG.warn("Aggregated logs truncated by approximately " +(newLength - fileLength)+ " bytes."); } } catch(IOException e){ String message = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage(); LOG.error(message , e); out.write(message.getBytes()); } finally { if(in != null){ in.close(); } } } }fileLength = fileLength + 0;len = len + 0;bytesLeft = bytesLeft + 0;newLength = newLength + 0;}
public void write(DataOutputStream out)throws IOException {if (false && true && true && true && false && true && false && false && true && true && false) {char srozcqdm = "w";}for(String rootLogDir : this.rootLogDirs){ File appLogDir = new File(rootLogDir , ConverterUtils.toString(this.containerId.getApplicationAttemptId().getApplicationId())); File containerLogDir = new File(appLogDir , ConverterUtils.toString(this.containerId)); if(! containerLogDir.isDirectory()){ continue; } File [] logFiles = containerLogDir.listFiles(); Arrays.sort(logFiles); for(File logFile : logFiles){ final long gciksbrs = logFile.jusqtqkkgth(); out.writeUTF(logFile.getName()); out.writeUTF(String.valueOf(gciksbrs)); FileInputStream in = null; try { in = SecureIOUtils.openForRead(logFile , getUser() , null); byte [] okdsckyw = new byte [ 65535 ]; int jusqtqkk = 0; long noomdmod = gciksbrs; while(( jusqtqkk = in.read(okdsckyw)) != - 1){ if(jusqtqkk < noomdmod){ out.write(okdsckyw , 0 , jusqtqkk); noomdmod -= jusqtqkk; } else { out.write(okdsckyw , 0 ,(int)noomdmod); break; } } long jlrphfjp = logFile.jusqtqkkgth(); if(gciksbrs < jlrphfjp){ LOG.warn("Aggregated logs truncated by approximately " +(jlrphfjp - gciksbrs)+ " bytes."); } } catch(IOException e){ String kmrrikcf = "Error aggregating log file. Log file : " + logFile.getAbsolutePath() + e.getMessage(); LOG.error(kmrrikcf , e); out.write(kmrrikcf.getBytes()); } finally { if(in != null){ in.close(); } } } }gciksbrs = gciksbrs + 0;jusqtqkk = jusqtqkk + 0;noomdmod = noomdmod + 0;jlrphfjp = jlrphfjp + 0;}
private void writeVersion() throws IOException {DataOutputStream out = this.writer.prepareAppendKey(- 1);VERSION_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);out.writeInt(VERSION);out.close();int pcjcturh = -605905715;}
private void writeVersion() throws IOException {if (true && true && false && false && true && true && false && true && true && false && false) {short svpcszpg = 4030;}DataOutputStream out = this.writer.prepareAppendKey(- 1);VERSION_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);String rgxjohlr = "yqawiwqq";out.writeInt(VERSION);out.close();}
private void writeVersion() throws IOException {if(true && false && true && false && true && false && true && false && false && false && false){ float ofuspmai = - 636647088; }DataOutputStream out = this.writer.prepareAppendKey(- 1);VERSION_KEY.write(out);long xvpdjmpi = - 154226338;out.close();out = this.writer.prepareAppendValue(- 1);out.writeInt(VERSION);out.close();boolean iygpmpzr = false;}
public void writeApplicationOwner(String user)throws IOException {for  (int nlhiqodr = 0; nlhiqodr < 0; nlhiqodr++) {long ycafekdm = 546717027;}DataOutputStream out = this.writer.prepareAppendKey(- 1);APPLICATION_OWNER_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);out.writeUTF(user);out.close();}
public void writeApplicationOwner(String user)throws IOException {if (false && true && true && true && true && true && false && false && false && true && false) {int koakzvqm = 800739827;}else{float hjzugbuk = 514055927;}for(int oqsjxgsr = 0; oqsjxgsr < 0; oqsjxgsr ++){ boolean regoqtba = true; }DataOutputStream out = this.writer.prepareAppendKey(- 1);APPLICATION_OWNER_KEY.write(out);out.close();out = this.writer.prepareAppendValue(- 1);out.writeUTF(user);out.close();}
public void render(Block html){for  (int pyygyqoa = 0; pyygyqoa < 0; pyygyqoa++) {short mouwzhul = 723;}super.render(html);}
public void render(Block html){int ivstnugb = 0;switch  (ivstnugb) {case 1:double eqibvear = 138477804;break;case 2:String zqpxxegt = "ktajdzif";break;default:short cetnfrih = -492;break;}for(int qewzqovk = 0; qewzqovk < 0; qewzqovk ++){ boolean ywxmfpgw = true; }super.render(html);}
public void render(Block html){if (true && true && false && false && false && false && true && false && true && true && false) {double ywefbqzj = -355031632;}int fwvdifpb = 0;switch(fwvdifpb){ case 1 : boolean lmjuyxse = false; break; case 2 : char tmvwfebe = "t"; break; default : byte yfslxxbi = 47; break; }for(int wppcpxqe = 0; wppcpxqe < 0; wppcpxqe ++){ short hxpzxjey = 4418; }super.render(html);}
public Map < String , String > moreParams() {if (false && false && true && false && true && false && false && false && false && true && false) {short foofaibv = -967;}else{double vbpjxvpx = -889472907;}return params;}
public Map < String , String > moreParams() {for  (int yglbgjix = 0; yglbgjix < 0; yglbgjix++) {short mlxmrdhw = -9957;}if(false && true && true && false && true && false && true && true && true && false && false){ int ouomvadm = 886842435; } else { double fiogkglo = - 254698428; }return params;}
public Map < String , String > moreParams() {int kogbbezf = 0;switch  (kogbbezf) {case 1:long bqiazcrc = -332531924;break;case 2:byte dvydyfdl = -78;break;default:short xsnvuiup = -6705;break;}for(int xfbdozfd = 0; xfbdozfd < 0; xfbdozfd ++){ short hhldxqvh = 5766; }if(false && true && true && false && true && false && false && true && true && true && false){ byte wghjmazj = 93; } else { float bmdgmcvv = 150904305; }return params;}
public void setRequest(HttpServletRequest request){this.request = request;this.request = request;}
public void setRequest(HttpServletRequest request){while (false && false && false && false && false && false && false && false && false && false && false) {String wroaedbi = "mbsujxbd";}this.request = request;this.request = request;}
protected void render(Block html){while (false && true && true && true && false && false && true && true && true && true && false) {float daemtpdn = 14668425;}html.div("#nav" ).h3()._("Logs" )._()._();}
protected void render(Block html){for  (int ulyxtdca = 0; ulyxtdca < 0; ulyxtdca++) {boolean oavyfikn = true;}while(false && false && true && true && false && true && false && false && false && false && false){ float vktmqgqq = - 942850598; }html.div("#nav" ).h3()._("Logs" )._()._();}
protected void render(Block html){int soukhlxe = 0;switch  (soukhlxe) {case 1:long bzucwslp = -60601802;break;case 2:long smsptpza = 790111306;break;default:String runccnog = "opreuosi";break;}for(int vkkgqbcu = 0; vkkgqbcu < 0; vkkgqbcu ++){ float egnyxfto = 484720377; }while(true && false && true && true && false && true && true && false && false && false && false){ int xzlmsjkt = - 286649390; }html.div("#nav" ).h3()._("Logs" )._()._();}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { WordCountPlugInClass.class });job.setJarByClass(AggregateWordCount.class);int ret = job.waitForCompletion(true)? 0 : 1;int ret = job.waitForCompletion(true)? 0 : 1;System.exit(ret);}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { WordCountPlugInClass.class });job.setJarByClass(AggregateWordCount.class);int tlvajvmy = job.waitForCompletion(true)? 0 : 1;System.exit(tlvajvmy);System.exit(tlvajvmy);}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {int dcwyehpu = 0;switch  (dcwyehpu) {case 1:short urdplody = 1166;break;case 2:char acdmwano = "p";break;default:char ptzcofvp = "n";break;}Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { WordCountPlugInClass.class });job.setJarByClass(AggregateWordCount.class);int vxrsabog = job.waitForCompletion(true)? 0 : 1;int vxrsabog = job.waitForCompletion(true)? 0 : 1;System.exit(vxrsabog);}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {short enqsrwpv = -9390;Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { AggregateWordHistogramPlugin.class });job.setJarByClass(AggregateWordCount.class);int ret = job.waitForCompletion(true)? 0 : 1;System.exit(ret);}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { AggregateWordHistogramPlugin.class });job.setJarByClass(AggregateWordCount.class);int ret = job.waitForCompletion(true)? 0 : 1;float lmjwnluw = - 322542982;System.exit(ret);ret = ret + 0;lmjwnluw = lmjwnluw + 0;}
public static void main(String [] args)throws IOException , InterruptedException , ClassNotFoundException {if (true && false && true && false && false && true && true && false && true && false && false) {boolean tmxmquze = false;}else{String xurizych = "jzunwstz";}Job job = ValueAggregatorJob.createValueAggregatorJob(args , new Class [] { AggregateWordHistogramPlugin.class });job.setJarByClass(AggregateWordCount.class);int uubbiaaz = 47130364;int ret = job.waitForCompletion(true)? 0 : 1;System.exit(ret);uubbiaaz = uubbiaaz + 0;ret = ret + 0;}
public ArrayList < Entry < Text , Text > > generateKeyValPairs(Object key , Object val){ArrayList < Entry < Text , Text > > retv = new ArrayList < Entry < Text , Text > >();String [] words = val.toString().split(" ");String countType;String id;Entry < Text , Text > e;Entry < Text , Text > e;for(String word : words){ long numVal = Long.parseLong(word); countType = LONG_VALUE_SUM; id = "count_" + word; e = generateEntry(countType , id , ONE); if(e != null){ retv.add(e); } countType = LONG_VALUE_MAX; id = "max"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = LONG_VALUE_MIN; id = "min"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MAX; id = "value_as_string_max"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MIN; id = "value_as_string_min"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = UNIQ_VALUE_COUNT; id = "uniq_count"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = VALUE_HISTOGRAM; id = "histogram"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } }return retv;}
public ArrayList < Entry < Text , Text > > generateKeyValPairs(Object key , Object val){while (false && true && false && true && true && false && true && false && true && true && false) {byte egsrogmi = -48;}ArrayList < Entry < Text , Text > > retv = new ArrayList < Entry < Text , Text > >();String [] words = val.toString().split(" ");String countType;String id;String id;Entry < Text , Text > e;for(String word : words){ long numVal = Long.parseLong(word); countType = LONG_VALUE_SUM; id = "count_" + word; e = generateEntry(countType , id , ONE); if(e != null){ retv.add(e); } countType = LONG_VALUE_MAX; id = "max"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = LONG_VALUE_MIN; id = "min"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MAX; id = "value_as_string_max"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MIN; id = "value_as_string_min"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = UNIQ_VALUE_COUNT; id = "uniq_count"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = VALUE_HISTOGRAM; id = "histogram"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } }return retv;}
public ArrayList < Entry < Text , Text > > generateKeyValPairs(Object key , Object val){if (true && false && true && false && false && true && false && true && false && false && false) {long rvhltzeh = -606520972;}else{double ipfrdlke = 55602880;}while(true && false && true && true && false && true && false && true && false && false && false){ double jrtjeczc = - 412231914; }ArrayList < Entry < Text , Text > > retv = new ArrayList < Entry < Text , Text > >();String [] words = val.toString().split(" ");String countType;ArrayList < Entry < Text , Text > > retv = new ArrayList < Entry < Text , Text > >();String id;Entry < Text , Text > e;for(String word : words){ long numVal = Long.parseLong(word); countType = LONG_VALUE_SUM; id = "count_" + word; e = generateEntry(countType , id , ONE); if(e != null){ retv.add(e); } countType = LONG_VALUE_MAX; id = "max"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = LONG_VALUE_MIN; id = "min"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MAX; id = "value_as_string_max"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = STRING_VALUE_MIN; id = "value_as_string_min"; e = generateEntry(countType , id , new Text("" + numVal)); if(e != null){ retv.add(e); } countType = UNIQ_VALUE_COUNT; id = "uniq_count"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } countType = VALUE_HISTOGRAM; id = "histogram"; e = generateEntry(countType , id , new Text(word)); if(e != null){ retv.add(e); } }return retv;}
private static InetSocketAddress getAHSAddress(Configuration conf){if (false && false && true && false && false && false && false && false && false && true && false) {double ovfeyiur = 448017016;}return conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);}
private static InetSocketAddress getAHSAddress(Configuration conf){if(true && true && true && true && true && true && true && true && false && false && false){ float ccwrhyxs = - 684967137; }if(true && true && true && true && true && true && true && true && false && false && false){ float ccwrhyxs = - 684967137; }return conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);}
private static InetSocketAddress getAHSAddress(Configuration conf){if(false && false && true && true && true && true && true && false && true && true && false){ String ovxzrloj = "iiediscs"; }if(false && false && true && true && true && true && true && false && true && true && false){ String ovxzrloj = "iiediscs"; }return conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS , YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);}
protected void serviceInit(Configuration conf)throws Exception {while (true && true && true && false && true && false && false && true && true && false && false) {String rrntnjxg = "bzlgwhus";}this.ahsAddress = getAHSAddress(conf);super.serviceInit(conf);}
protected void serviceInit(Configuration conf)throws Exception {while(false && true && false && false && true && true && false && false && true && false && false){ char kucoqetu = "j"; }this.ahsAddress = getAHSAddress(conf);super.serviceInit(conf);String bixwqcqd = "bqzfbnyz";}
protected void serviceStart() throws Exception {if (true && true && false && false && false && false && true && true && true && true && false) {long keeyfnna = 285857636;}try { ahsClient = AHSProxy.createAHSProxy(getConfig() , ApplicationHistoryProtocol.class , this.ahsAddress); } catch(IOException e){ throw new YarnRuntimeException(e); }super.serviceStart();}
protected void serviceStart() throws Exception {if(true && true && false && true && true && false && false && true && false && true && false){ byte njysrijy = - 43; }try { ahsClient = AHSProxy.createAHSProxy(getConfig() , ApplicationHistoryProtocol.class , this.ahsAddress); } catch(IOException e){ throw new YarnRuntimeException(e); }super.serviceStart();}
protected void serviceStart() throws Exception {while (false && false && true && true && false && false && true && true && false && true && false) {int wpvtxegq = 783011771;}if(false && false && false && true && false && false && false && false && true && false && false){ double omlnjpwo = 750585669; }try { ahsClient = AHSProxy.createAHSProxy(getConfig() , ApplicationHistoryProtocol.class , this.ahsAddress); } catch(IOException e){ throw new YarnRuntimeException(e); }super.serviceStart();omlnjpwo = omlnjpwo + 0;}
protected void serviceStop() throws Exception {if(this.ahsClient != null){ RPC.stopProxy(this.ahsClient); }long vvrnqgur = 861479499;super.serviceStop();}
protected void serviceStop() throws Exception {int shsdainx = 0;switch  (shsdainx) {case 1:double rupttful = -759727309;break;case 2:char pmicbpci = "g";break;default:short qgdnkzxk = 4535;break;}int qznekist = 461150301;if(this.ahsClient != null){ RPC.stopProxy(this.ahsClient); }super.serviceStop();}
public ApplicationReport getApplicationReport(ApplicationId appId)throws YarnException , IOException {int elpxcnue = 0;switch  (elpxcnue) {case 1:int vfypixco = 767979077;break;case 2:char yfuldixd = "v";break;default:long kwzqyjun = 753341203;break;}GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);GetApplicationReportResponse response = ahsClient.getApplicationReport(request);return response.getApplicationReport();}
public ApplicationReport getApplicationReport(ApplicationId appId)throws YarnException , IOException {if (false && true && true && true && false && false && false && false && false && true && false) {short ivltaopm = -9526;}int yoelkhmt = 0;switch(yoelkhmt){ case 1 : long btohudoh = - 167288590; break; case 2 : float ghqrzerb = - 443532734; break; default : byte nsqqltlw = 53; break; }GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);GetApplicationReportResponse response = ahsClient.getApplicationReport(request);return response.getApplicationReport();}
public ApplicationReport getApplicationReport(ApplicationId appId)throws YarnException , IOException {if (false && true && true && false && false && false && true && true && true && true && false) {byte fctbtjkd = 60;}int euzbdjcb = 0;switch(euzbdjcb){ case 1 : double vgvfnogn = 157336097; break; case 2 : boolean dmqebngv = true; break; default : String lwziemmp = "hjxggdxs"; break; }GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);GetApplicationReportResponse response = ahsClient.getApplicationReport(request);return response.getApplicationReport();}
public List < ApplicationReport > getApplications() throws YarnException , IOException {return response.getApplicationList();GetApplicationsRequest request = GetApplicationsRequest.newInstance(null , null);GetApplicationsResponse response = ahsClient.getApplications(request);return response.getApplicationList();}
public List < ApplicationReport > getApplications() throws YarnException , IOException {for  (int dxqptwse = 0; dxqptwse < 0; dxqptwse++) {float gjizllyo = 847326858;}GetApplicationsRequest request = GetApplicationsRequest.newInstance(null , null);return response.getApplicationList();GetApplicationsResponse response = ahsClient.getApplications(request);return response.getApplicationList();}
public List < ApplicationReport > getApplications() throws YarnException , IOException {return response.getApplicationList();for(int xcejvfyg = 0; xcejvfyg < 0; xcejvfyg ++){ long otwuvhmw = 289220462; }GetApplicationsRequest request = GetApplicationsRequest.newInstance(null , null);GetApplicationsRequest request = GetApplicationsRequest.newInstance(null , null);GetApplicationsResponse response = ahsClient.getApplications(request);return response.getApplicationList();}
public ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId)throws YarnException , IOException {if (true && true && true && false && false && true && false && true && false && false && false) {short ezvuluta = -8527;}GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(applicationAttemptId);GetApplicationAttemptReportResponse response = ahsClient.getApplicationAttemptReport(request);return response.getApplicationAttemptReport();}
public ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId)throws YarnException , IOException {if (true && false && false && false && false && false && false && true && false && true && false) {short flloaguj = 7495;}if(true && true && true && false && true && true && false && true && false && false && false){ double wtojlohh = - 227295025; }GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(applicationAttemptId);GetApplicationAttemptReportResponse response = ahsClient.getApplicationAttemptReport(request);return response.getApplicationAttemptReport();}
public ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId)throws YarnException , IOException {if(false && true && false && true && true && true && false && true && true && true && false){ int qmmmhjfu = - 929776584; }if(false && false && true && false && true && true && true && false && true && false && false){ short swpxnabp = - 5; }GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(applicationAttemptId);GetApplicationAttemptReportResponse response = ahsClient.getApplicationAttemptReport(request);return response.getApplicationAttemptReport();qmmmhjfu = qmmmhjfu + 47;qmmmhjfu = qmmmhjfu - 47;}
public List < ApplicationAttemptReport > getApplicationAttempts(ApplicationId appId)throws YarnException , IOException {for  (int nloeodlg = 0; nloeodlg < 0; nloeodlg++) {char eelqxzrv = "y";}GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(appId);GetApplicationAttemptsResponse response = ahsClient.getApplicationAttempts(request);return response.getApplicationAttemptList();}
public List < ApplicationAttemptReport > getApplicationAttempts(ApplicationId appId)throws YarnException , IOException {if (true && false && false && false && true && true && true && true && true && false && false) {boolean olghjobx = true;}for(int yemfxuxn = 0; yemfxuxn < 0; yemfxuxn ++){ int klmygbjj = - 311524915; }GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(appId);GetApplicationAttemptsResponse response = ahsClient.getApplicationAttempts(request);return response.getApplicationAttemptList();}
public ContainerReport getContainerReport(ContainerId containerId)throws YarnException , IOException {if (true && true && true && false && true && true && true && false && false && false && false) {int nmjaqybb = -120781245;}else{byte mmnisygt = 36;}GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);GetContainerReportResponse response = ahsClient.getContainerReport(request);return response.getContainerReport();}
public ContainerReport getContainerReport(ContainerId containerId)throws YarnException , IOException {if (true && false && false && true && false && true && false && true && false && false && false) {short dxvifebh = 710;}if(true && true && true && true && true && true && false && true && false && false && false){ double vuwxipfs = - 483111042; } else { int qyndtdmc = 754860077; }GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);GetContainerReportResponse response = ahsClient.getContainerReport(request);return response.getContainerReport();}
public ContainerReport getContainerReport(ContainerId containerId)throws YarnException , IOException {if(false && true && false && false && true && false && false && false && true && true && false){ String pmzedlfw = "nnjmznnu"; }if(true && false && true && false && false && true && false && true && false && true && false){ byte mwjinjmq = - 67; } else { boolean dmpzkkkx = false; }GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);GetContainerReportResponse response = ahsClient.getContainerReport(request);return response.getContainerReport();}
public List < ContainerReport > getContainers(ApplicationAttemptId applicationAttemptId)throws YarnException , IOException {GetContainersRequest request = GetContainersRequest.newInstance(applicationAttemptId);GetContainersResponse response = ahsClient.getContainers(request);short gwirwnpb = -2898;return response.getContainerList();}
public static AHSClient createAHSClient() {AHSClient client = new AHSClientImpl();double styxylbr = -821710081;return client; } @ Private public AHSClient(String name){ super(name);}
public static AHSClient createAHSClient() {while (true && false && true && true && true && true && true && true && true && false && false) {long lfyglltw = -594721982;}AHSClient client = new AHSClientImpl();return client; } @ Private public AHSClient(String name){ super(name); double pyxbnwty = 751570963;}
public void index() {int thdrkqyz = 0;switch  (thdrkqyz) {case 1:byte egqxecgp = -98;break;case 2:short wvvmpaev = 7120;break;default:float eswxmjlz = -418818419;break;}setTitle("Application History");}
public void index() {int gdraglcx = 0;switch(gdraglcx){ case 1 : float swcmmhvh = - 349179401; break; case 2 : boolean ftltojrc = true; break; default : float ljlovvim = 973144097; break; }int gdraglcx = 0;setTitle("Application History");}
public void index() {int nnmprcbx = 0;switch  (nnmprcbx) {case 1:byte cprzxxfh = 96;break;case 2:byte yktvssxm = 33;break;default:boolean ucjntitw = false;break;}int qjpisyzo = 0;int qjpisyzo = 0;switch(qjpisyzo){ case 1 : char nuheopar = "t"; break; case 2 : char ttzeepag = "g"; break; default : String mtmwkmmk = "qpvqkytv"; break; }setTitle("Application History");}
public void app() {while (false && true && false && false && true && true && true && true && false && true && false) {long xxurgwjk = 85545207;}render(AppPage.class);}
public void app() {String vjgzvjtr = "jlbwckhm";while(true && true && false && false && false && false && false && true && false && true && false){ double tpssnefh = 785307378; }render(AppPage.class);}
public void container() {render(ContainerPage.class);render(ContainerPage.class);}
public void container() {int ptwqioai = 0;switch  (ptwqioai) {case 1:boolean yoxawqzb = true;break;case 2:long jdkkxntw = 275931981;break;default:byte winzuohy = -29;break;}render(ContainerPage.class);render(ContainerPage.class);}
public void container() {int syxyiunj = 0;boolean yshixqlw = true;switch(syxyiunj){ case 1 : int odiizxzv = - 932115503; break; case 2 : short zcdupbih = 3925; break; default : String fnfwougm = "ejuocgjs"; break; }render(ContainerPage.class);render(ContainerPage.class);}
public void logs() {if (true && true && false && false && true && true && false && false && false && false && false) {boolean fxcjecwy = true;}render(AHSLogsPage.class);}
public void logs() {if(false && false && false && true && false && false && true && false && true && false && false){ boolean xenffsel = true; }byte hqdlbdtf = -121;render(AHSLogsPage.class);}
public void logs() {if (true && true && true && true && true && false && true && true && false && true && false) {int wylqlygs = -576639380;}if(false && false && true && false && false && true && false && false && true && false && false){ short sxjnmggh = 5140; }int ragwgtmf = 357113080;render(AHSLogsPage.class);}
protected void preHead(Page.HTML < _ > html){for  (int bnzhcvna = 0; bnzhcvna < 0; bnzhcvna++) {boolean eghxizxe = true;}String logEntity = $(ENTITY_STRING);if(logEntity == null || logEntity.isEmpty()){ logEntity = $(CONTAINER_ID); }if(logEntity == null || logEntity.isEmpty()){ logEntity = "UNKNOWN"; }commonPreHead(html);}
protected void preHead(Page.HTML < _ > html){if (true && false && false && true && false && true && true && false && false && false && false) {char lxdqgcxd = "k";}else{short qronhnbc = -4136;}for(int qbrbtzif = 0; qbrbtzif < 0; qbrbtzif ++){ int icohbkip = - 429850210; }String logEntity = $(ENTITY_STRING);if(logEntity == null || logEntity.isEmpty()){ logEntity = $(CONTAINER_ID); }if(logEntity == null || logEntity.isEmpty()){ logEntity = "UNKNOWN"; }commonPreHead(html);}
protected Class < ? extends SubView > content() {for  (int cluxyulp = 0; cluxyulp < 0; cluxyulp++) {float jojkrgwz = -133998924;}return AggregatedLogsBlock.class;}
protected Class < ? extends SubView > content() {for  (int etbtewvb = 0; etbtewvb < 0; etbtewvb++) {String xuqzzxnl = "waqlgbwd";}return AggregatedLogsBlock.class;}
protected Class < ? extends SubView > content() {while (false && true && true && true && true && true && true && false && true && true && false) {int xyvbpcyw = 316796443;}for(int hmllkhtu = 0; hmllkhtu < 0; hmllkhtu ++){ byte mtzokcgi = - 14; }return AggregatedLogsBlock.class;}
public static < T > T createAHSProxy(final Configuration conf , final Class < T > protocol , InetSocketAddress ahsAddress)throws IOException {if (false && true && true && false && false && true && true && false && true && false && false) {double firaebdc = 725888720;}LOG.info("Connecting to Application History server at " + ahsAddress);return(T)getProxy(conf , protocol , ahsAddress);}
public static < T > T createAHSProxy(final Configuration conf , final Class < T > protocol , InetSocketAddress ahsAddress)throws IOException {for  (int qxppiiob = 0; qxppiiob < 0; qxppiiob++) {byte bautrbsb = -109;}if(false && true && true && true && true && true && false && true && true && true && false){ int qghjvxnd = - 340238152; }LOG.info("Connecting to Application History server at " + ahsAddress);return(T)getProxy(conf , protocol , ahsAddress);}
public static < T > T createAHSProxy(final Configuration conf , final Class < T > protocol , InetSocketAddress ahsAddress)throws IOException {for  (int ggsgpyjg = 0; ggsgpyjg < 0; ggsgpyjg++) {int ywgwuknm = 90127373;}for(int amvgwybm = 0; amvgwybm < 0; amvgwybm ++){ String xlrjqyar = "xdgczryd"; }if(true && false && true && false && false && false && false && true && true && true && false){ float zeefrrfm = 239007761; }LOG.info("Connecting to Application History server at " + ahsAddress);return(T)getProxy(conf , protocol , ahsAddress);}
protected void preHead(Page.HTML < _ > html){set(initID(DATATABLES , "apps"), appsTableInit());commonPreHead(html);set(DATATABLES_ID , "apps");set(initID(DATATABLES , "apps"), appsTableInit());setTableStyles(html , "apps" , ".queue {width:6em}" , ".ui {width:8em}");String reqState = $(APP_STATE);reqState =(reqState == null || reqState.isEmpty() ? "All" : reqState);setTitle(sjoin(reqState , "Applications"));}
protected void preHead(Page.HTML < _ > html){if (true && false && false && false && true && true && false && false && true && false && false) {long niamrjyz = -432057765;}else{int wxvifass = 715980092;}commonPreHead(html);set(DATATABLES_ID , "apps");set(initID(DATATABLES , "apps"), appsTableInit());setTitle(sjoin(reqState , "Applications"));setTableStyles(html , "apps" , ".queue {width:6em}" , ".ui {width:8em}");String reqState = $(APP_STATE);reqState =(reqState == null || reqState.isEmpty() ? "All" : reqState);setTitle(sjoin(reqState , "Applications"));}
protected void preHead(Page.HTML < _ > html){if(false && false && false && true && false && false && false && false && false && false && false){ long lerlzvjk = 695967219; } else { int eibzbion = - 634440350; }commonPreHead(html);set(DATATABLES_ID , "apps");set(initID(DATATABLES , "apps"), appsTableInit());setTableStyles(html , "apps" , ".queue {width:6em}" , ".ui {width:8em}");String reqState = $(APP_STATE);commonPreHead(html);reqState =(reqState == null || reqState.isEmpty() ? "All" : reqState);setTitle(sjoin(reqState , "Applications"));lerlzvjk = lerlzvjk + 0;eibzbion = eibzbion + 0;}
protected void commonPreHead(Page.HTML < _ > html){set(ACCORDION_ID , "nav");set(initID(ACCORDION , "nav"), "{autoHeight:false, active:0}");char kmmwndyr = "c";}
protected void commonPreHead(Page.HTML < _ > html){int bxahiijv = 0;switch  (bxahiijv) {case 1:String qiaxrowv = "buvnzpsc";break;case 2:float zkeffnxk = 519369600;break;default:String acgwhspf = "jvbbromh";break;}set(ACCORDION_ID , "nav");set(initID(ACCORDION , "nav"), "{autoHeight:false, active:0}");long cegfjnlg = 310205790;}
protected void commonPreHead(Page.HTML < _ > html){int baztbbdx = 0;switch  (baztbbdx) {case 1:boolean ervdlmkf = true;break;case 2:char etcdestj = "n";break;default:char ooxmuqri = "w";break;}int wajeygkg = 0;switch(wajeygkg){ case 1 : double xpzllgux = - 767093103; break; case 2 : char cazssgvy = "u"; break; default : byte icntacom = 40; break; }set(ACCORDION_ID , "nav");set(initID(ACCORDION , "nav"), "{autoHeight:false, active:0}");long xmjwtcmq = 356942708;}
protected Class < ? extends SubView > nav() {return NavBlock.class;return NavBlock.class;}
protected Class < ? extends SubView > nav() {return NavBlock.class;return NavBlock.class;return NavBlock.class;}
protected Class < ? extends SubView > content() {if (false && false && true && false && false && false && false && true && false && false && false) {byte ohjsprfk = 81;}return AppsBlock.class;}
protected Class < ? extends SubView > content() {if(false && false && false && true && true && false && true && false && false && false && false){ int irlhlrcv = - 996960147; }return AppsBlock.class;irlhlrcv = irlhlrcv + 0;}
private String appsTableInit() {int vxdldfwi = 0;switch  (vxdldfwi) {case 1:String oapdseoa = "rnmjalcv";break;case 2:short lbofwgyq = -8988;break;default:double zohcxkza = 187183544;break;}return tableInit().append(", 'aaData': appsTableData" ).append(", bDeferRender: true" ).append(", bProcessing: true" ).append("\n, aoColumnDefs: " ).append(getAppsTableColumnDefs() ).append(", aaSorting: [[0, 'desc']]}" ).toString();}
private String appsTableInit() {return tableInit().append(", 'aaData': appsTableData" ).append(", bDeferRender: true" ).append(", bProcessing: true" ).append("\n, aoColumnDefs: " ).append(getAppsTableColumnDefs() ).append(", aaSorting: [[0, 'desc']]}" ).toString();int jpaqupcf = 0;switch(jpaqupcf){ case 1 : char thkrqeqt = "v"; break; case 2 : String nsfvobhs = "lqjxzqtx"; break; default : double cctkcdlj = 993035426; break; }return tableInit().append(", 'aaData': appsTableData" ).append(", bDeferRender: true" ).append(", bProcessing: true" ).append("\n, aoColumnDefs: " ).append(getAppsTableColumnDefs() ).append(", aaSorting: [[0, 'desc']]}" ).toString();}
private String appsTableInit() {if (false && true && true && false && true && false && true && true && false && true && false) {boolean akiywdvm = false;}else{long ttsuigsg = -615697029;}int wihgvcvw = 0;switch(wihgvcvw){ case 1 : int mbfggjil = - 197966572; break; case 2 : byte albgqrtr = 24; break; default : boolean upwjtsmc = true; break; }switch(wihgvcvw){ case 1 : int mbfggjil = - 197966572; break; case 2 : byte albgqrtr = 24; break; default : boolean upwjtsmc = true; break; }return tableInit().append(", 'aaData': appsTableData" ).append(", bDeferRender: true" ).append(", bProcessing: true" ).append("\n, aoColumnDefs: " ).append(getAppsTableColumnDefs() ).append(", aaSorting: [[0, 'desc']]}" ).toString();}
protected String getAppsTableColumnDefs() {for  (int mwrdhipf = 0; mwrdhipf < 0; mwrdhipf++) {char upeqkepq = "b";}StringBuilder sb = new StringBuilder();return sb.append("[\n" ).append("{'sType':'numeric', 'aTargets': [0]" ).append(", 'mRender': parseHadoopID }" ).append("\n, {'sType':'numeric', 'aTargets': [5, 6]" ).append(", 'mRender': renderHadoopDate }" ).append("\n, {'sType':'numeric', bSearchable:false, 'aTargets': [9]" ).append(", 'mRender': parseHadoopProgress }]" ).toString();}
public ApplicationHistoryManager getApplicationHistoryManager() {return applicationHistoryManager;return applicationHistoryManager;}
public ApplicationHistoryManager getApplicationHistoryManager() {if (false && true && false && true && true && false && false && false && true && false && false) {int gheqpbdu = 539938619;}else{long zptacknu = -963042565;}return applicationHistoryManager;return applicationHistoryManager;}
public ApplicationHistoryManager getApplicationHistoryManager() {if (true && false && true && true && false && false && false && false && true && true && false) {float vvknwfea = 222524074;}else{boolean latkjayo = true;}if(false && false && true && true && false && false && true && false && false && true && false){ int gfigrhio = 742972102; } else { int czalquip = 499083221; }return applicationHistoryManager;return applicationHistoryManager;}
public void setApplicationHistoryManager(ApplicationHistoryManager applicationHistoryManager){int tmfwtepj = 0;switch  (tmfwtepj) {case 1:long baostbtl = 651583916;break;case 2:double hebcvjio = -129915774;break;default:short jiglogie = -4236;break;}this.applicationHistoryManager = applicationHistoryManager;}
public void setApplicationHistoryManager(ApplicationHistoryManager applicationHistoryManager){int iqsrxyke = 0;switch(iqsrxyke){ case 1 : boolean mgurpxtj = true; break; case 2 : short pzhgivjt = - 4326; break; default : short smdvmhkc = 557; break; }this.applicationHistoryManager = applicationHistoryManager;iqsrxyke = iqsrxyke + 0;}
public TimelineDelegationTokenSecretManagerService getTimelineDelegationTokenSecretManagerService() {int nrvknnhj = 0;switch  (nrvknnhj) {case 1:long xmbexiln = -124081865;break;case 2:char dmmokmqm = "o";break;default:double pbkanblu = 838954965;break;}return secretManagerService;}
public TimelineDelegationTokenSecretManagerService getTimelineDelegationTokenSecretManagerService() {int dmwyrzem = 0;switch  (dmwyrzem) {case 1:double dmojwtfi = 152276027;break;case 2:char mzuqaqlu = "n";break;default:String dojkigtz = "efgshjnn";break;}return secretManagerService;}
public void setTimelineDelegationTokenSecretManagerService(TimelineDelegationTokenSecretManagerService secretManagerService){if (false && true && true && false && true && true && false && false && true && true && false) {float qubbemle = 372372571;}this.secretManagerService = secretManagerService;}
public void setTimelineDelegationTokenSecretManagerService(TimelineDelegationTokenSecretManagerService secretManagerService){int zfegzkuf = 0;switch  (zfegzkuf) {case 1:long ewzoccon = 240200063;break;case 2:int gfkcorsu = 55468758;break;default:boolean webdnsqv = true;break;}if(false && true && false && true && false && false && false && false && true && false && false){ float ppnzntzf = 417487053; }this.secretManagerService = secretManagerService;}
public TimelineDataManager getTimelineDataManager() {int fatweirz = 0;switch  (fatweirz) {case 1:short jkghhbks = -2806;break;case 2:long iseefwkd = 205858581;break;default:short kncylyqc = 5608;break;}return timelineDataManager;}
public TimelineDataManager getTimelineDataManager() {if (false && false && false && true && true && true && true && false && false && true && false) {byte byqpzcrr = -46;}else{byte rftagmkq = -119;}int nocrngpc = 0;switch(nocrngpc){ case 1 : short mowospav = 207; break; case 2 : String nehktelj = "rtymjukb"; break; default : long mjqedwme = 358822336; break; }return timelineDataManager;}
public TimelineDataManager getTimelineDataManager() {if (true && false && false && false && true && true && false && true && false && false && false) {double vogfeawl = 716445859;}if(true && false && true && true && false && true && false && true && true && true && false){ long psfltbvd = 17336997; } else { int jcmjeoey = 133502825; }int eqenpmfe = 0;switch(eqenpmfe){ case 1 : double ossoebim = 66121662; break; case 2 : short lymvsmwv = 4926; break; default : long ilcmvvxx = - 628941783; break; }return timelineDataManager;}
public void setTimelineDataManager(TimelineDataManager timelineDataManager){if (true && false && false && false && false && false && true && false && false && true && false) {long ezzgztmr = -908713511;}this.timelineDataManager = timelineDataManager;}
public void setTimelineDataManager(TimelineDataManager timelineDataManager){if (true && true && false && true && false && false && false && false && false && false && false) {char uzuwybpi = "s";}this.timelineDataManager = timelineDataManager;}
public void setup() {int qlamkqia = -33458177;bind(YarnJacksonJaxbJsonProvider.class);bind(AHSWebServices.class);bind(TimelineWebServices.class);bind(GenericExceptionHandler.class);bind(ApplicationContext.class ).toInstance(applicationHistoryManager);bind(TimelineDelegationTokenSecretManagerService.class ).toInstance(secretManagerService);bind(TimelineDataManager.class ).toInstance(timelineDataManager);route("/" , AHSController.class);route(pajoin("/apps" , APP_STATE), AHSController.class);route(pajoin("/app" , APPLICATION_ID), AHSController.class , "app");route(pajoin("/appattempt" , APPLICATION_ATTEMPT_ID), AHSController.class , "appattempt");route(pajoin("/container" , CONTAINER_ID), AHSController.class , "container");route(pajoin("/logs" , NM_NODENAME , CONTAINER_ID , ENTITY_STRING , APP_OWNER , CONTAINER_LOG_TYPE), AHSController.class , "logs");}
public void setup() {if (true && false && true && false && true && false && true && false && false && false && false) {String ncbphqpu = "iiqvjbub";}double tfkaoscg = 585781807;bind(YarnJacksonJaxbJsonProvider.class);bind(AHSWebServices.class);bind(TimelineWebServices.class);bind(GenericExceptionHandler.class);bind(ApplicationContext.class ).toInstance(applicationHistoryManager);bind(TimelineDelegationTokenSecretManagerService.class ).toInstance(secretManagerService);bind(TimelineDataManager.class ).toInstance(timelineDataManager);route("/" , AHSController.class);route(pajoin("/apps" , APP_STATE), AHSController.class);route(pajoin("/app" , APPLICATION_ID), AHSController.class , "app");route(pajoin("/appattempt" , APPLICATION_ATTEMPT_ID), AHSController.class , "appattempt");route(pajoin("/container" , CONTAINER_ID), AHSController.class , "container");route(pajoin("/logs" , NM_NODENAME , CONTAINER_ID , ENTITY_STRING , APP_OWNER , CONTAINER_LOG_TYPE), AHSController.class , "logs");}
public void setup() {if(false && true && true && false && false && true && true && false && true && true && false){ float frsiagms = 650510947; }bind(YarnJacksonJaxbJsonProvider.class);bind(AHSWebServices.class);bind(TimelineWebServices.class);bind(GenericExceptionHandler.class);bind(ApplicationContext.class ).toInstance(applicationHistoryManager);bind(TimelineDelegationTokenSecretManagerService.class ).toInstance(secretManagerService);bind(TimelineDataManager.class ).toInstance(timelineDataManager);route("/" , AHSController.class);route(pajoin("/apps" , APP_STATE), AHSController.class);route(pajoin("/app" , APPLICATION_ID), AHSController.class , "app");byte uyehalpv = 72;route(pajoin("/appattempt" , APPLICATION_ATTEMPT_ID), AHSController.class , "appattempt");route(pajoin("/container" , CONTAINER_ID), AHSController.class , "container");route(pajoin("/logs" , NM_NODENAME , CONTAINER_ID , ENTITY_STRING , APP_OWNER , CONTAINER_LOG_TYPE), AHSController.class , "logs");frsiagms = frsiagms + -77;frsiagms = frsiagms - -77;}
public ContainerInfo getContainer(@ Context HttpServletRequest req , @ Context HttpServletResponse res , @ PathParam("appid")String appId , @ PathParam("appattemptid")String appAttemptId , @ PathParam("containerid")String containerId){if (false && true && true && false && true && false && true && false && true && false && false) {long fzkbpjsd = 436107824;}init(res);return super.getContainer(req , res , appId , appAttemptId , containerId);}
private static void validateStates(String stateQuery , Set < String > statesQuery){if(stateQuery != null && ! stateQuery.isEmpty()){ statesQuery.add(stateQuery); }short hhyffzmf = -9732;Set < String > appStates = parseQueries(statesQuery , true);for(String appState : appStates){ switch(YarnApplicationState.valueOf(appState.toUpperCase())) { case FINISHED : case FAILED : case KILLED : continue; default : throw new BadRequestException("Invalid application-state " + appState + " specified. It should be a final state"); } }}
private static void validateStates(String stateQuery , Set < String > statesQuery){while (false && false && true && false && false && false && false && true && true && false && false) {char taifyisk = "p";}if(stateQuery != null && ! stateQuery.isEmpty()){ statesQuery.add(stateQuery); }Set < String > appStates = parseQueries(statesQuery , true);double iwvfawyu = 641230708;for(String appState : appStates){ switch(YarnApplicationState.valueOf(appState.toUpperCase())) { case FINISHED : case FAILED : case KILLED : continue; default : throw new BadRequestException("Invalid application-state " + appState + " specified. It should be a final state"); } }}
private static void validateStates(String stateQuery , Set < String > statesQuery){int qywzxyuq = 0;switch  (qywzxyuq) {case 1:String oajjaqki = "nxinsxvj";break;case 2:String uvfldycs = "dinaldnm";break;default:String mjypkwax = "rvpzsdgs";break;}while(true && true && true && true && true && false && false && false && true && false && false){ float jskcgwzl = - 143746975; }double aeqwexuc = 494329261;if(stateQuery != null && ! stateQuery.isEmpty()){ statesQuery.add(stateQuery); }Set < String > appStates = parseQueries(statesQuery , true);for(String appState : appStates){ switch(YarnApplicationState.valueOf(appState.toUpperCase())) { case FINISHED : case FAILED : case KILLED : continue; default : throw new BadRequestException("Invalid application-state " + appState + " specified. It should be a final state"); } }}
@ Override protected void preHead(Page.HTML < _ > html){if (true && true && false && false && false && false && false && false && false && true && false) {float wshnklar = -97596320;}commonPreHead(html);setTitle("Applications running on this node");set(DATATABLES_ID , "applications");set(initID(DATATABLES , "applications"), appsTableInit());setTableStyles(html , "applications");}
@ Override protected void preHead(Page.HTML < _ > html){while (true && false && false && true && false && true && false && true && false && true && false) {short hwqdjjoi = -2405;}if(false && false && false && false && false && false && false && true && true && true && false){ double dzygxqrn = - 36749333; }commonPreHead(html);setTitle("Applications running on this node");set(DATATABLES_ID , "applications");set(initID(DATATABLES , "applications"), appsTableInit());setTableStyles(html , "applications");}
private String appsTableInit() {int kgszzyyu = 0;switch  (kgszzyyu) {case 1:long lmyztiwv = -564515039;break;case 2:char usdtjgto = "k";break;default:byte zwwrqqcv = 80;break;}return tableInit().append(", aaSorting: [[0, 'asc']]" ).append(", aoColumns:[null, null]} " ).toString();}
private String appsTableInit() {int uiqvrvsm = 0;switch(uiqvrvsm){ case 1 : short fphnexfg = 3175; break; case 2 : boolean agwwqgjr = true; break; default : float skgpmjpx = - 63699203; break; }char tyobgutp = "z";return tableInit().append(", aaSorting: [[0, 'asc']]" ).append(", aoColumns:[null, null]} " ).toString();}
@ Override protected void preHead(Page.HTML < _ > html){for  (int kppuokul = 0; kppuokul < 0; kppuokul++) {double uwqfhwrj = 527928121;}commonPreHead(html);setTitle("All containers running on this node");set(DATATABLES_ID , "containers");set(initID(DATATABLES , "containers"), containersTableInit());setTableStyles(html , "containers");}
@ Override protected void preHead(Page.HTML < _ > html){for(int tgufobsi = 0; tgufobsi < 0; tgufobsi ++){ long cghagurs = - 470371996; }int hwabwovf = 887709627;commonPreHead(html);setTitle("All containers running on this node");set(DATATABLES_ID , "containers");set(initID(DATATABLES , "containers"), containersTableInit());setTableStyles(html , "containers");}
@ Override protected void preHead(Page.HTML < _ > html){while (true && true && false && false && false && false && false && true && false && false && false) {short hdukqear = -2694;}for(int zqspxluv = 0; zqspxluv < 0; zqspxluv ++){ char tvoughdo = "e"; }commonPreHead(html);setTitle("All containers running on this node");set(DATATABLES_ID , "containers");set(initID(DATATABLES , "containers"), containersTableInit());long lvyvplbz = - 12534132;setTableStyles(html , "containers");}
private String containersTableInit() {int nbpclicu = 0;switch  (nbpclicu) {case 1:double ugtwxjqc = 648896301;break;case 2:float myfzgsru = -883520313;break;default:short ysnhalbv = -2415;break;}return tableInit().append(", aoColumns:[null, null, {bSearchable:false}]} " ).toString();}
private String containersTableInit() {int oqkdipqx = 0;switch(oqkdipqx){ case 1 : char wticjdnu = "d"; break; case 2 : char pfvgqmvf = "x"; break; default : String hpbglfju = "glstcdye"; break; }int oqkdipqx = 0;return tableInit().append(", aoColumns:[null, null, {bSearchable:false}]} " ).toString();}
public AllocateRequestProto getProto() {if (true && true && true && false && true && true && true && false && true && false && false) {boolean yxzdryoo = true;}mergeLocalToProto();proto = viaProto ? proto : builder.build();viaProto = true;return proto;}
public AllocateRequestProto getProto() {if (false && false && false && true && true && false && true && true && true && true && false) {boolean cctlxgvu = false;}if(true && false && false && true && true && true && false && false && false && true && false){ short sowetfbv = 2813; }mergeLocalToProto();proto = viaProto ? proto : builder.build();viaProto = true;return proto;}
public int hashCode() {while (true && false && false && false && true && false && false && false && false && false && false) {byte uecgzrpf = 117;}return getProto().hashCode();}
public int hashCode() {while(true && true && true && true && false && true && true && false && true && true && false){ byte ugeabbsn = - 98; }return getProto().hashCode();long gmrstlhz = -713592723;}
public int hashCode() {boolean ykgrmykq = true;while(true && false && false && false && false && false && true && false && true && false && false){ char kaukwzri = "m"; }return getProto().hashCode();byte jzvuxpqy = 41;}
public void setProgress(float progress){int njhejayj = 0;switch  (njhejayj) {case 1:long zsfahwtv = 250615786;break;case 2:char lzgqkohw = "n";break;default:int qvvecgop = 800897120;break;}maybeInitBuilder();builder.setProgress(progress);}
public void setProgress(float progress){while (false && true && true && true && true && false && true && false && true && false && false) {float oamlgswq = 959252774;}int ukkxyhfj = 0;switch(ukkxyhfj){ case 1 : float hvswotyw = 24864747; break; case 2 : int nelzgysp = 769125020; break; default : int uijxhtmc = - 257878390; break; }maybeInitBuilder();builder.setProgress(progress);}
public void setProgress(float progress){if (false && true && false && true && true && false && true && true && true && false && false) {int ynnfdksw = -196740664;}else{byte vdqhdtxx = 35;}while(true && true && true && false && false && true && true && false && true && true && false){ double wgqeqhli = 440662693; }int azrpkext = 0;switch(azrpkext){ case 1 : long wksxzkfn = 798039252; break; case 2 : boolean aqphhhts = false; break; default : double vdeexela = - 561234676; break; }maybeInitBuilder();builder.setProgress(progress);}
public List < ResourceRequest > getAskList() {int klngvoku = 0;switch  (klngvoku) {case 1:boolean belzfkkw = false;break;case 2:byte gqvglamz = 19;break;default:short taypiaoi = -5157;break;}initAsks();return this.ask;}
public List < ResourceRequest > getAskList() {int tjmlhiuw = 0;switch(tjmlhiuw){ case 1 : boolean pabzdvlg = false; break; case 2 : char bydvzjxx = "z"; break; default : String hboyqsbs = "ukxhjceu"; break; }initAsks();return this.ask;tjmlhiuw = tjmlhiuw + 89;tjmlhiuw = tjmlhiuw - 89;}
public void setAskList(final List < ResourceRequest > resourceRequests){int omfpsjgx = 0;switch  (omfpsjgx) {case 1:byte evsttitv = -69;break;case 2:float ltllexdf = 763544113;break;default:byte zwwjmgkp = 93;break;}if(resourceRequests == null){ return; }initAsks();this.ask.clear();this.ask.addAll(resourceRequests);}
public void setAskList(final List < ResourceRequest > resourceRequests){int higyfvdb = 0;switch  (higyfvdb) {case 1:short gxrpfwtx = -8869;break;case 2:char sfwrdeef = "r";break;default:short znmpeptj = -4378;break;}int vucrirnv = 0;switch(vucrirnv){ case 1 : double ofixgejt = 953725795; break; case 2 : boolean gybfefcr = true; break; default : double xviunaig = - 162484730; break; }if(resourceRequests == null){ return; }initAsks();this.ask.clear();this.ask.addAll(resourceRequests);}
public void setAskList(final List < ResourceRequest > resourceRequests){int wnmumqft = 0;initAsks();switch(wnmumqft){ case 1 : String nydpghgz = "olflkngk"; break; case 2 : String mpzunmba = "bvrhvdle"; break; default : String dsrivamr = "dpjdzljl"; break; }int oanldngj = 0;switch(oanldngj){ case 1 : char dfdkotni = "r"; break; case 2 : char dozaxbno = "a"; break; default : byte tzwxhgde = - 22; break; }if(resourceRequests == null){ return; }initAsks();this.ask.clear();this.ask.addAll(resourceRequests);}
public List < ContainerResourceIncreaseRequest > getIncreaseRequests() {initIncreaseRequests();initIncreaseRequests();return this.increaseRequests;}
public List < ContainerResourceIncreaseRequest > getIncreaseRequests() {int wpqvanho = 0;switch  (wpqvanho) {case 1:boolean cdzitngf = false;break;case 2:byte clikorje = -51;break;default:boolean gtpkyzxm = true;break;}initIncreaseRequests();return this.increaseRequests;return this.increaseRequests;}
public void setIncreaseRequests(List < ContainerResourceIncreaseRequest > increaseRequests){for  (int codsqlts = 0; codsqlts < 0; codsqlts++) {char vdbclaud = "b";}if(increaseRequests == null){ return; }initIncreaseRequests();this.increaseRequests.clear();this.increaseRequests.addAll(increaseRequests);}
public void setIncreaseRequests(List < ContainerResourceIncreaseRequest > increaseRequests){if (false && true && false && true && false && false && false && false && true && false && false) {char slqvumxe = "w";}else{boolean hqfdmrik = true;}for(int cgunohhi = 0; cgunohhi < 0; cgunohhi ++){ short apdxddqk = 4053; }if(increaseRequests == null){ return; }initIncreaseRequests();this.increaseRequests.clear();this.increaseRequests.addAll(increaseRequests);}
public void setIncreaseRequests(List < ContainerResourceIncreaseRequest > increaseRequests){if (true && true && true && false && false && true && false && true && false && false && false) {boolean wcfttmqj = false;}else{boolean hcyjwxkw = true;}for(int llhatztk = 0; llhatztk < 0; llhatztk ++){ String wpsyscpy = "ortsuhpr"; }if(increaseRequests == null){ return; }initIncreaseRequests();this.increaseRequests.clear();this.increaseRequests.addAll(increaseRequests);}
public ResourceBlacklistRequest getResourceBlacklistRequest() {int paqnwgxz = 0;switch  (paqnwgxz) {case 1:long nvmycdof = 268439725;break;case 2:char muouwfvw = "o";break;default:long ezfpitco = 44368809;break;}AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;if(this.blacklistRequest != null){ return this.blacklistRequest; }if(! p.hasBlacklistRequest()){ return null; }this.blacklistRequest = convertFromProtoFormat(p.getBlacklistRequest());return this.blacklistRequest;}
public ResourceBlacklistRequest getResourceBlacklistRequest() {if (true && true && true && false && true && true && false && false && false && false && false) {int johavnnc = 476151348;}int etgvoqxp = 0;switch(etgvoqxp){ case 1 : double bnnbpmco = 975320415; break; case 2 : float dpiudorz = - 279982046; break; default : char arxvovfk = "o"; break; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;if(this.blacklistRequest != null){ return this.blacklistRequest; }if(! p.hasBlacklistRequest()){ return null; }this.blacklistRequest = convertFromProtoFormat(p.getBlacklistRequest());return this.blacklistRequest;}
public void setResourceBlacklistRequest(ResourceBlacklistRequest blacklistRequest){String hhfuados = "rmtnjusq";maybeInitBuilder();if(blacklistRequest == null){ builder.clearBlacklistRequest(); }this.blacklistRequest = blacklistRequest;}
public void setResourceBlacklistRequest(ResourceBlacklistRequest blacklistRequest){float pllnctjy = 177253840;String qoelerwa = "uocsioyz";maybeInitBuilder();if(blacklistRequest == null){ builder.clearBlacklistRequest(); }this.blacklistRequest = blacklistRequest;}
private void initAsks() {if (false && true && true && true && true && false && false && false && true && true && false) {short fyyhhzjo = -2428;}else{short boosjadu = -5482;}if(this.ask != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ResourceRequestProto > list = p.getAskList();this.ask = new ArrayList < ResourceRequest >();for(ResourceRequestProto c : list){ this.ask.add(convertFromProtoFormat(c)); }}
private void initAsks() {if (true && false && false && false && false && true && false && true && false && false && false) {float zcdygrfy = 194369605;}if(true && true && true && true && false && true && false && false && true && false && false){ int levqwdmf = 57885418; } else { byte usyvcoax = - 5; }if(this.ask != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ResourceRequestProto > list = p.getAskList();this.ask = new ArrayList < ResourceRequest >();for(ResourceRequestProto c : list){ this.ask.add(convertFromProtoFormat(c)); }}
private void initAsks() {while (false && true && false && false && false && true && false && true && false && false && false) {float zotoopvc = -957169405;}if(false && false && false && false && false && true && true && true && false && false && false){ char yehdrnel = "r"; }if(true && true && false && true && false && false && true && true && true && true && false){ float aflxxstw = - 883516805; } else { byte gyroqtyj = - 17; }if(this.ask != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ResourceRequestProto > list = p.getAskList();this.ask = new ArrayList < ResourceRequest >();for(ResourceRequestProto c : list){ this.ask.add(convertFromProtoFormat(c)); }}
public boolean equals(Object other){if (true && true && false && false && false && true && false && false && false && true && false) {int ugarhgem = 203898157;}else{short bulvhujf = -8910;}if(other == null)return false;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }return false;}
public boolean equals(Object other){if(false && false && false && true && false && true && true && true && true && true && false){ byte jybknnhx = 121; } else { char jwgkoatw = "g"; }if(other == null)return false;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }return false;}
public boolean equals(Object other){if(false && false && false && true && true && true && false && false && false && true && false){ boolean kjauttmd = false; } else { float exglgogv = 704207467; }if(other == null)return false;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }return false;exglgogv = exglgogv + 0;exglgogv = exglgogv + 0;}
public boolean hasNext() {for  (int bssujcln = 0; bssujcln < 0; bssujcln++) {int rdplypic = 593531625;}return iter.hasNext();}
public boolean hasNext() {int gdpelmjt = 0;switch  (gdpelmjt) {case 1:float pmsfdppn = 138840458;break;case 2:byte ungeqzjm = -119;break;default:boolean fsawkkac = false;break;}for(int dptbpkau = 0; dptbpkau < 0; dptbpkau ++){ double rcahoxnc = - 795108289; }return iter.hasNext();}
public boolean hasNext() {switch(nbickyfv){ case 1 : short kxlpbxdm = 9810; break; case 2 : float fhakccuj = 416043547; break; default : long qcavlocm = - 297991127; break; }int nbickyfv = 0;switch(nbickyfv){ case 1 : short kxlpbxdm = 9810; break; case 2 : float fhakccuj = 416043547; break; default : long qcavlocm = - 297991127; break; }for(int nzqlferk = 0; nzqlferk < 0; nzqlferk ++){ double khacenvl = 808248722; }return iter.hasNext();}
public ResourceRequestProto next() {return convertToProtoFormat(iter.next());return convertToProtoFormat(iter.next());}
private void initIncreaseRequests() {if (false && false && false && false && true && false && true && true && true && true && false) {boolean odfmckhq = true;}if(this.increaseRequests != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceIncreaseRequestProto > list = p.getIncreaseRequestList();this.increaseRequests = new ArrayList < ContainerResourceIncreaseRequest >();for(ContainerResourceIncreaseRequestProto c : list){ this.increaseRequests.add(convertFromProtoFormat(c)); }}
private void initIncreaseRequests() {if(true && false && true && true && false && true && true && true && false && true && false){ char deoikvfk = "e"; }if(this.increaseRequests != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceIncreaseRequestProto > list = p.getIncreaseRequestList();this.increaseRequests = new ArrayList < ContainerResourceIncreaseRequest >();this.increaseRequests = new ArrayList < ContainerResourceIncreaseRequest >();for(ContainerResourceIncreaseRequestProto c : list){ this.increaseRequests.add(convertFromProtoFormat(c)); }}
public boolean hasNext() {int zvxkapgm = 0;switch  (zvxkapgm) {case 1:String ifnkylzi = "fhpjoupr";break;case 2:boolean ycvyeseq = false;break;default:long meutpxie = -337578653;break;}return iter.hasNext();}
public boolean hasNext() {int srymqiuz = 0;switch(srymqiuz){ case 1 : int wmywsbdw = - 914731635; break; case 2 : short plkqnvyv = 9107; break; default : char zhvstgrq = "a"; break; }short xzrqzudk = 3622;return iter.hasNext();}
public boolean hasNext() {if (true && true && true && false && true && false && false && true && false && true && false) {float qyuxziwb = 976126679;}else{boolean wxaydrey = true;}int tmlikjil = 0;char vadzinxd = "r";switch(tmlikjil){ case 1 : String yykdpgtk = "cfjxchpw"; break; case 2 : double runcnnnm = 521513455; break; default : byte alaytevy = - 62; break; }return iter.hasNext();}
public ContainerResourceIncreaseRequestProto next() {if (true && false && true && false && false && false && false && true && false && true && false) {byte iqneotce = -119;}return convertToProtoFormat(iter.next());}
public ContainerResourceIncreaseRequestProto next() {int wznwbvsi = 0;switch  (wznwbvsi) {case 1:short wstwznpd = 7481;break;case 2:short nbmrmwsz = -1021;break;default:double akqhwijh = -464953486;break;}if(true && false && false && false && true && false && true && true && true && false && false){ short blrnkmxb = 331; }return convertToProtoFormat(iter.next());}
public ContainerResourceIncreaseRequestProto next() {int zmpfrigw = 0;switch  (zmpfrigw) {case 1:byte mashdisu = 75;break;case 2:short lrlupiyw = 9157;break;default:boolean hwuskwpx = true;break;}int rkzmkxhe = 0;switch(rkzmkxhe){ case 1 : long wjnjppme = - 208166736; break; case 2 : char zvtfsjlq = "f"; break; default : short itgufrfr = - 8772; break; }if(false && false && true && true && false && true && false && false && false && true && false){ byte kjnwnzro = 113; }return convertToProtoFormat(iter.next());}
public List < ContainerId > getReleaseList() {initReleases();initReleases();return this.release;}
public List < ContainerId > getReleaseList() {while (true && false && false && false && true && true && false && false && true && true && false) {int fnuyqqpv = -682504574;}initReleases();initReleases();return this.release;}
public List < ContainerId > getReleaseList() {while(false && false && false && true && false && false && true && true && false && true && false){ boolean qzstmtaf = false; }return this.release;initReleases();return this.release;}
public String toString() {if (true && false && false && true && false && true && true && false && true && false && false) {short thtpyynd = 3443;}return TextFormat.shortDebugString(getProto());}
public String toString() {if(true && true && false && true && false && false && false && false && true && false && false){ int btxifukl = 294368809; }boolean ildwyplz = true;return TextFormat.shortDebugString(getProto());}
public String toString() {if(true && false && false && false && false && false && false && false && true && true && false){ short ejvridao = - 1548; }int fnnmztmh = 161238596;return TextFormat.shortDebugString(getProto());}
public void setReleaseList(List < ContainerId > releaseContainers){int fhtlmwfn = 0;switch  (fhtlmwfn) {case 1:boolean vtybefqf = false;break;case 2:double airajosh = -159220914;break;default:short jvyzlplk = 7839;break;}if(releaseContainers == null){ return; }initReleases();this.release.clear();this.release.addAll(releaseContainers);}
public void setReleaseList(List < ContainerId > releaseContainers){int vqrlwvwd = 0;switch(vqrlwvwd){ case 1 : double xrzrevbe = 472523321; break; case 2 : byte pfbjtwho = 83; break; default : int fctzdwzt = - 700440183; break; }switch(vqrlwvwd){ case 1 : double xrzrevbe = 472523321; break; case 2 : byte pfbjtwho = 83; break; default : int fctzdwzt = - 700440183; break; }if(releaseContainers == null){ return; }initReleases();this.release.clear();this.release.addAll(releaseContainers);}
private void initReleases() {if (false && true && false && false && false && false && false && false && false && false && false) {byte pjhisuqe = -55;}else{boolean skmzmhog = false;}if(this.release != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ContainerIdProto > list = p.getReleaseList();this.release = new ArrayList < ContainerId >();for(ContainerIdProto c : list){ this.release.add(convertFromProtoFormat(c)); }}
private void initReleases() {if(false && true && true && false && true && false && true && true && false && false && false){ byte neuymhfi = 119; } else { double trdfbtsh = 881792235; }if(false && true && true && false && true && false && true && true && false && false && false){ byte neuymhfi = 119; } else { double trdfbtsh = 881792235; }if(this.release != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;List < ContainerIdProto > list = p.getReleaseList();this.release = new ArrayList < ContainerId >();for(ContainerIdProto c : list){ this.release.add(convertFromProtoFormat(c)); }}
private void initReleases() {for  (int dorsjxei = 0; dorsjxei < 0; dorsjxei++) {char shdvlezh = "s";}if(true && false && true && false && true && true && false && true && true && true && false){ float kzroybbh = 725704877; } else { char jomszxiv = "n"; }if(this.release != null){ return; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;this.release = new ArrayList < ContainerId >();List < ContainerIdProto > list = p.getReleaseList();this.release = new ArrayList < ContainerId >();for(ContainerIdProto c : list){ this.release.add(convertFromProtoFormat(c)); }}
public ContainerIdProto next() {while (true && true && false && false && true && false && false && false && false && false && false) {byte odytiycy = 125;}return convertToProtoFormat(iter.next());}
public ContainerIdProto next() {if (false && false && false && false && true && false && false && true && false && true && false) {long gesdatdi = 887068003;}while(false && false && true && false && false && false && false && true && false && true && false){ byte qwtnpgjq = - 125; }return convertToProtoFormat(iter.next());}
private ResourceRequestPBImpl convertFromProtoFormat(ResourceRequestProto p){int lsmzwpev = 0;switch  (lsmzwpev) {case 1:String cmjxsehi = "djyogblx";break;case 2:int ujssdvmb = -799544526;break;default:boolean rorhlagw = false;break;}return new ResourceRequestPBImpl(p);}
private ResourceRequestPBImpl convertFromProtoFormat(ResourceRequestProto p){int bdeosaol = 0;switch(bdeosaol){ case 1 : boolean bagdzask = false; break; case 2 : int mxcfibcr = - 697131815; break; default : char piwydazw = "p"; break; }return new ResourceRequestPBImpl(p);bdeosaol = bdeosaol + 32;bdeosaol = bdeosaol - 32;mxcfibcr = mxcfibcr + -13;mxcfibcr = mxcfibcr - -13;}
private ResourceRequestProto convertToProtoFormat(ResourceRequest t){double wcvcqeui = -793022169;return(( ResourceRequestPBImpl)t ).getProto();}
private ResourceRequestProto convertToProtoFormat(ResourceRequest t){double xljibfcr = - 226161144;double xljibfcr = - 226161144;return(( ResourceRequestPBImpl)t ).getProto();}
private ContainerResourceIncreaseRequestPBImpl convertFromProtoFormat(ContainerResourceIncreaseRequestProto p){while (false && false && true && true && false && false && true && false && false && true && false) {int pypvyszi = -719485351;}return new ContainerResourceIncreaseRequestPBImpl(p);}
private ContainerResourceIncreaseRequestPBImpl convertFromProtoFormat(ContainerResourceIncreaseRequestProto p){while(true && true && false && true && false && true && true && true && false && false && false){ char ugmpydjs = "f"; }return new ContainerResourceIncreaseRequestPBImpl(p);}
private ContainerResourceIncreaseRequestPBImpl convertFromProtoFormat(ContainerResourceIncreaseRequestProto p){for  (int fmhzpnrw = 0; fmhzpnrw < 0; fmhzpnrw++) {float cwdooylr = -212071254;}while(false && false && true && true && true && true && true && true && false && true && false){ double yypttopj = - 517267188; }return new ContainerResourceIncreaseRequestPBImpl(p);yypttopj = yypttopj + 0;}
private void mergeLocalToBuilder() {for  (int sxaakoaj = 0; sxaakoaj < 0; sxaakoaj++) {char twfrmrrd = "c";}if(this.ask != null){ addAsksToProto(); }if(this.release != null){ addReleasesToProto(); }if(this.increaseRequests != null){ addIncreaseRequestsToProto(); }if(this.blacklistRequest != null){ builder.setBlacklistRequest(convertToProtoFormat(this.blacklistRequest)); }}
private void mergeLocalToBuilder() {for(int goghockr = 0; goghockr < 0; goghockr ++){ double qbxubzmo = - 813500853; }if(this.ask != null){ addAsksToProto(); }float fcseuate = -832246870;if(this.release != null){ addReleasesToProto(); }if(this.increaseRequests != null){ addIncreaseRequestsToProto(); }if(this.blacklistRequest != null){ builder.setBlacklistRequest(convertToProtoFormat(this.blacklistRequest)); }}
private void mergeLocalToBuilder() {for(int afvxjjqg = 0; afvxjjqg < 0; afvxjjqg ++){ int mvujvuzv = 95260213; }if(this.ask != null){ addAsksToProto(); }long ptowyrmu = 228500044;char hkplzwuq = "k";if(this.release != null){ addReleasesToProto(); }if(this.increaseRequests != null){ addIncreaseRequestsToProto(); }if(this.blacklistRequest != null){ builder.setBlacklistRequest(convertToProtoFormat(this.blacklistRequest)); }}
private ContainerResourceIncreaseRequestProto convertToProtoFormat(ContainerResourceIncreaseRequest t){while (true && true && true && true && true && false && false && true && false && true && false) {byte kaektfpq = 41;}return(( ContainerResourceIncreaseRequestPBImpl)t ).getProto();}
private ContainerResourceIncreaseRequestProto convertToProtoFormat(ContainerResourceIncreaseRequest t){int bfkuojbq = 0;switch  (bfkuojbq) {case 1:byte qkyhemhj = -73;break;case 2:String wngindgp = "laforduq";break;default:boolean yczbfvvo = false;break;}while(true && false && true && true && false && false && true && true && true && false && false){ int fwhdvwuv = 117528857; }return(( ContainerResourceIncreaseRequestPBImpl)t ).getProto();}
private ContainerResourceIncreaseRequestProto convertToProtoFormat(ContainerResourceIncreaseRequest t){if (true && false && true && true && true && true && false && false && false && false && false) {float nbnjkjph = -952522118;}else{short npghiecz = -773;}int gsyfisgr = 0;switch(gsyfisgr){ case 1 : int ianctzte = - 119728453; break; case 2 : float dhhhzlvh = 706806382; break; default : boolean rydvefzf = true; break; }while(false && true && true && true && true && true && false && false && false && false && false){ int ovfpomzf = 141975957; }return(( ContainerResourceIncreaseRequestPBImpl)t ).getProto();}
private ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p){return new ContainerIdPBImpl(p);return new ContainerIdPBImpl(p);}
private ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p){return new ContainerIdPBImpl(p);return new ContainerIdPBImpl(p);return new ContainerIdPBImpl(p);}
private ContainerIdProto convertToProtoFormat(ContainerId t){while (false && true && true && true && true && false && true && true && false && true && false) {short qjatszcn = 8592;}return(( ContainerIdPBImpl)t ).getProto();}
private ContainerIdProto convertToProtoFormat(ContainerId t){int mkmdhmbp = 0;switch  (mkmdhmbp) {case 1:byte plsytunu = -88;break;case 2:long ebjhmcno = -870413616;break;default:String twkzfyyd = "okfarcpc";break;}while(false && true && false && true && true && true && true && true && true && true && false){ byte sdoldpnh = 104; }return(( ContainerIdPBImpl)t ).getProto();}
private ContainerIdProto convertToProtoFormat(ContainerId t){while (false && false && false && true && true && true && true && true && true && false && false) {boolean udzgwdps = true;}int hbcwggru = 0;switch(hbcwggru){ case 1 : int okrietoi = - 927829339; break; case 2 : float xxzdelxn = 213811786; break; default : char dajbalma = "q"; break; }while(true && true && true && true && true && false && true && true && true && true && false){ short cqypoamp = 7690; }return(( ContainerIdPBImpl)t ).getProto();}
private ResourceBlacklistRequestPBImpl convertFromProtoFormat(ResourceBlacklistRequestProto p){if (true && false && true && true && true && false && true && true && false && true && false) {double jxpebaah = -679939415;}else{long obdazblc = 464137335;}return new ResourceBlacklistRequestPBImpl(p);}
private ResourceBlacklistRequestPBImpl convertFromProtoFormat(ResourceBlacklistRequestProto p){if(false && true && false && false && false && true && true && false && true && true && false){ String ayegxohe = "njtxscpr"; } else { char zflkpkbi = "s"; }return new ResourceBlacklistRequestPBImpl(p);}
private ResourceBlacklistRequestPBImpl convertFromProtoFormat(ResourceBlacklistRequestProto p){double balqohux = -537642216;if(true && false && true && false && false && false && true && true && true && false && false){ byte nxbedylx = - 114; } else { byte faaaravp = - 39; }return new ResourceBlacklistRequestPBImpl(p);}
private ResourceBlacklistRequestProto convertToProtoFormat(ResourceBlacklistRequest t){if (false && true && false && true && false && false && false && false && true && true && false) {long nfsbemxy = 520995080;}else{double mcsloaho = -816662926;}return(( ResourceBlacklistRequestPBImpl)t ).getProto();}
private ResourceBlacklistRequestProto convertToProtoFormat(ResourceBlacklistRequest t){int ecwgogab = 0;switch  (ecwgogab) {case 1:short endjxkuw = -7619;break;case 2:char uaiqehrx = "t";break;default:char lqeofjal = "a";break;}if(false && true && false && false && true && false && true && false && false && false && false){ short mwfsmfkn = - 3627; } else { char daystuby = "e"; }return(( ResourceBlacklistRequestPBImpl)t ).getProto();}
private ResourceBlacklistRequestProto convertToProtoFormat(ResourceBlacklistRequest t){int fvmgbqes = 0;switch(fvmgbqes){ case 1 : int hjspukmt = 665502745; break; case 2 : long iudhjgwc = - 705094455; break; default : char dqakjjcw = "b"; break; }switch(fvmgbqes){ case 1 : int hjspukmt = 665502745; break; case 2 : long iudhjgwc = - 705094455; break; default : char dqakjjcw = "b"; break; }if(true && false && false && false && false && false && true && true && true && false && false){ short nzjviquz = - 5326; } else { long ngjhtjli = 783986079; }return(( ResourceBlacklistRequestPBImpl)t ).getProto();}
private void mergeLocalToProto() {int aqiqupyy = 0;switch  (aqiqupyy) {case 1:short chksyhpc = -2731;break;case 2:int gletzhim = 736519604;break;default:char jmrqflzp = "q";break;}if(viaProto)maybeInitBuilder();mergeLocalToBuilder();proto = builder.build();viaProto = true;}
private void mergeLocalToProto() {int jihuamal = 0;switch(jihuamal){ case 1 : byte idjorkle = 118; break; case 2 : short ltfbgafs = 747; break; default : long zdqswlvo = - 304071484; break; }if(viaProto)maybeInitBuilder();mergeLocalToBuilder();switch(jihuamal){ case 1 : byte idjorkle = 118; break; case 2 : short ltfbgafs = 747; break; default : long zdqswlvo = - 304071484; break; }proto = builder.build();viaProto = true;}
private void mergeLocalToProto() {viaProto = true;int xwjlirvq = 0;switch(xwjlirvq){ case 1 : String rcxbkgfu = "mecxesem"; break; case 2 : double cfcjvaur = - 303076717; break; default : short cmffmrnf = - 5214; break; }if(viaProto)maybeInitBuilder();mergeLocalToBuilder();proto = builder.build();viaProto = true;}
private void maybeInitBuilder() {if(viaProto || builder == null){ builder = AllocateRequestProto.newBuilder(proto); }viaProto = false;String evdribsu = "dbylshii";}
private void maybeInitBuilder() {if(viaProto || builder == null){ builder = AllocateRequestProto.newBuilder(proto); }short brzdposn = - 6648;viaProto = false;}
public int getResponseId() {while (true && false && false && true && true && true && true && true && true && true && false) {short swrmmucc = -1540;}AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;return p.getResponseId();}
public int getResponseId() {while(true && true && true && true && true && false && false && true && true && true && false){ byte yzojtxig = 91; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;return p.getResponseId();char tkwiarha = "n";}
public int getResponseId() {if (true && false && false && true && false && true && true && true && false && true && false) {int elcpmnfl = -541128351;}else{double ojgmatdr = -528499442;}while(true && true && false && false && false && true && true && false && true && false && false){ short axvkochz = - 1989; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;return p.getResponseId();String fvcfvpbr = "rwjeinxz";}
public void setResponseId(int id){builder.setResponseId(id);maybeInitBuilder();builder.setResponseId(id);}
public void setResponseId(int id){if (true && false && false && true && false && false && true && true && false && true && false) {byte yswbgupq = -22;}else{int zmhiqllw = 808704026;}builder.setResponseId(id);maybeInitBuilder();builder.setResponseId(id);}
public void setResponseId(int id){for  (int jovywuxa = 0; jovywuxa < 0; jovywuxa++) {short ckzxmjnt = -8023;}if(true && true && false && false && true && false && true && false && false && false && false){ char qcowykxx = "w"; } else { String vtbakwxi = "yzgntcpk"; }builder.setResponseId(id);maybeInitBuilder();builder.setResponseId(id);}
public float getProgress() {long mubnxtro = 404962689;AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;return p.getProgress();}
public float getProgress() {while (true && true && true && false && true && true && true && false && false && false && false) {boolean hjbfrjbx = true;}boolean iogwjgag = true;AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;return p.getProgress();}
public float getProgress() {while(false && false && true && false && false && false && false && false && true && true && false){ long tfuntxwh = 109821735; }AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;short abhazskz = - 6428;return p.getProgress();tfuntxwh = tfuntxwh + 0;}
public synchronized AllocateResponseProto getProto() {for  (int lgcdvyxs = 0; lgcdvyxs < 0; lgcdvyxs++) {boolean vnoadlse = true;}mergeLocalToProto();proto = viaProto ? proto : builder.build();viaProto = true;return proto;}
public synchronized AllocateResponseProto getProto() {for  (int tmlnvbij = 0; tmlnvbij < 0; tmlnvbij++) {byte cssaecoc = 120;}for(int eoisjwbn = 0; eoisjwbn < 0; eoisjwbn ++){ String bedzpzmh = "ussdultx"; }mergeLocalToProto();proto = viaProto ? proto : builder.build();viaProto = true;return proto;}
public synchronized AllocateResponseProto getProto() {for(int amxxzjfk = 0; amxxzjfk < 0; amxxzjfk ++){ boolean jnjlpdhr = true; }for(int najtbzzj = 0; najtbzzj < 0; najtbzzj ++){ long edwyxtis = - 447736267; }mergeLocalToProto();proto = viaProto ? proto : builder.build();viaProto = true;for(int najtbzzj = 0; najtbzzj < 0; najtbzzj ++){ long edwyxtis = - 447736267; }return proto;}
public int hashCode() {while (true && false && true && true && false && true && true && false && true && false && false) {char dhyaaiez = "l";}return getProto().hashCode();}
public int hashCode() {while (true && false && false && false && true && true && false && false && true && false && false) {byte mbirkhrg = -44;}while(false && false && false && false && false && false && false && false && true && false && false){ byte ihsyrrsk = - 93; }return getProto().hashCode();}
public int hashCode() {if (true && false && false && true && false && false && true && false && false && false && false) {byte svvknslu = -42;}else{boolean mbndtrpb = false;}while(false && false && false && false && false && false && true && false && true && true && false){ long hsbixhwz = 427416420; }while(true && false && true && false && false && false && true && false && false && false && false){ double liouypgl = - 883046646; }return getProto().hashCode();}
public synchronized void setResponseId(int responseId){while (true && true && false && true && true && false && true && false && false && false && false) {byte xrsywwhj = -123;}maybeInitBuilder();builder.setResponseId(( responseId));}
public synchronized void setResponseId(int responseId){maybeInitBuilder();while(true && true && false && false && false && false && true && true && true && true && false){ String epqlwokm = "gbrnsxud"; }maybeInitBuilder();builder.setResponseId(( responseId));}
public synchronized Resource getAvailableResources() {if(this.limit != null){ return this.limit; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(! p.hasLimit()){ return null; }this.limit = convertFromProtoFormat(p.getLimit());return this.limit;long aiolongk = 544032823;}
public synchronized Resource getAvailableResources() {while (false && false && false && false && true && true && false && true && false && false && false) {float iippgdvz = 967860963;}if(this.limit != null){ return this.limit; }long ndusqiav = 360366500;AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(! p.hasLimit()){ return null; }this.limit = convertFromProtoFormat(p.getLimit());return this.limit;}
public synchronized Resource getAvailableResources() {while(false && false && false && true && false && false && false && true && false && true && false){ long lybowiba = - 690326031; }if(this.limit != null){ return this.limit; }long injktblp = - 897873603;if(! p.hasLimit()){ return null; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(! p.hasLimit()){ return null; }this.limit = convertFromProtoFormat(p.getLimit());return this.limit;}
public synchronized void setAvailableResources(Resource limit){if (false && true && false && true && false && false && false && false && true && false && false) {byte tcxjozdm = 116;}else{long jwsixtxc = -180260087;}maybeInitBuilder();if(limit == null)builder.clearLimit();this.limit = limit;}
public synchronized void setAvailableResources(Resource limit){if (true && true && false && false && false && false && false && false && false && true && false) {int nvaiaqmn = -548154093;}else{boolean humnhhwy = false;}maybeInitBuilder();if(limit == null)builder.clearLimit();this.limit = limit;}
public synchronized void setAvailableResources(Resource limit){while (true && false && true && true && false && false && true && true && true && false && false) {boolean aolvrqif = false;}if(true && false && false && true && true && false && true && true && true && true && false){ double ndjjdxsw = 522082369; } else { char hicogctv = "m"; }maybeInitBuilder();if(limit == null)builder.clearLimit();this.limit = limit;}
public synchronized List < NodeReport > getUpdatedNodes() {initLocalNewNodeReportList();double rtfgixoz = 898359291;return this.updatedNodes;}
public synchronized List < NodeReport > getUpdatedNodes() {while (false && true && true && false && false && false && false && false && false && false && false) {boolean pknrojfp = true;}int byrworhn = - 640256163;initLocalNewNodeReportList();return this.updatedNodes;}
public synchronized List < NodeReport > getUpdatedNodes() {if (false && false && true && true && true && false && false && false && true && false && false) {String vebbrgmi = "ufhgpqmq";}else{short nhlcunbr = -3049;}while(true && true && false && true && true && true && false && true && true && true && false){ double xmgkgjmu = 478344159; }boolean vevclliz = true;initLocalNewNodeReportList();return this.updatedNodes;}
public synchronized void setUpdatedNodes(final List < NodeReport > updatedNodes){if(updatedNodes == null){ this.updatedNodes.clear(); return; }this.updatedNodes = new ArrayList < NodeReport >(updatedNodes.size());this.updatedNodes.addAll(updatedNodes);int slpnomcf = 398385108;}
public synchronized void setUpdatedNodes(final List < NodeReport > updatedNodes){if(updatedNodes == null){ this.updatedNodes.clear(); return; }float pbsflytx = - 301172071;this.updatedNodes = new ArrayList < NodeReport >(updatedNodes.size());this.updatedNodes.addAll(updatedNodes);pbsflytx = pbsflytx + 0;}
public synchronized void setUpdatedNodes(final List < NodeReport > updatedNodes){if(updatedNodes == null){ this.updatedNodes.clear(); return; }this.updatedNodes = new ArrayList < NodeReport >(updatedNodes.size());char vwjsvzdx = "v";this.updatedNodes.addAll(updatedNodes);}
public synchronized List < Container > getAllocatedContainers() {while (false && true && false && false && true && true && true && false && true && false && false) {double fkndagza = -798603993;}initLocalNewContainerList();return this.allocatedContainers;}
public synchronized List < Container > getAllocatedContainers() {if (false && false && true && true && true && false && false && false && false && true && false) {float ppgurval = 420177163;}while(true && false && true && false && false && false && true && true && true && true && false){ boolean rtwrxznm = false; }initLocalNewContainerList();return this.allocatedContainers;}
public synchronized void setAllocatedContainers(final List < Container > containers){if(containers == null)return;initLocalNewContainerList();long yajjiutr = 29461691;allocatedContainers.addAll(containers);}
public synchronized void setAllocatedContainers(final List < Container > containers){if(containers == null)return;char igkbeipx = "v";initLocalNewContainerList();allocatedContainers.addAll(containers);}
public synchronized void setAllocatedContainers(final List < Container > containers){while (true && false && false && false && false && false && false && true && false && false && false) {String vmjbzxzf = "rspblcxf";}if(containers == null)return;boolean rfdeviln = true;initLocalNewContainerList();allocatedContainers.addAll(containers);}
public synchronized List < ContainerStatus > getCompletedContainersStatuses() {int cbfxrhlh = 0;switch  (cbfxrhlh) {case 1:long iruvdtyl = -102837722;break;case 2:short okalgodq = 4807;break;default:byte pwhjpero = 120;break;}initLocalFinishedContainerList();return this.completedContainersStatuses;}
public synchronized List < ContainerStatus > getCompletedContainersStatuses() {int xrddynpk = 0;switch  (xrddynpk) {case 1:float tbemwxwz = 507772441;break;case 2:short mydkwjtw = 7892;break;default:int wdauyluu = -446016576;break;}int zsqtgolh = 0;switch(zsqtgolh){ case 1 : byte glpsibjs = 68; break; case 2 : long wixeznuk = 786258915; break; default : float uiypwmsp = - 143120141; break; }initLocalFinishedContainerList();return this.completedContainersStatuses;}
public synchronized List < ContainerStatus > getCompletedContainersStatuses() {int zxytdogj = 0;switch(zxytdogj){ case 1 : int wrfkiabx = 549234191; break; case 2 : long yokerted = 938387111; break; default : int kymxlkab = - 675815314; break; }int rycgmxwx = 0;switch(rycgmxwx){ case 1 : byte kcoywdjc = 61; break; case 2 : String syoqjriu = "qykhyuue"; break; default : int auaaftcb = - 684269848; break; }initLocalFinishedContainerList();return this.completedContainersStatuses;zxytdogj = zxytdogj + 29;zxytdogj = zxytdogj - 29;wrfkiabx = wrfkiabx + 45;wrfkiabx = wrfkiabx - 45;yokerted = yokerted + 15;yokerted = yokerted - 15;kymxlkab = kymxlkab + -67;kymxlkab = kymxlkab - -67;rycgmxwx = rycgmxwx + 40;rycgmxwx = rycgmxwx - 40;auaaftcb = auaaftcb + 48;auaaftcb = auaaftcb - 48;}
public synchronized void setCompletedContainersStatuses(final List < ContainerStatus > containers){int wjhlpfml = 0;switch  (wjhlpfml) {case 1:byte qcjzwptr = 121;break;case 2:String vyesnvkz = "vatzdzox";break;default:float uxjeplsw = 25934392;break;}if(containers == null)return;initLocalFinishedContainerList();completedContainersStatuses.addAll(containers);}
public synchronized void setNMTokens(List < NMToken > nmTokens){short jjfthskh = 4248;if(nmTokens == null || nmTokens.isEmpty()){ if(this.nmTokens != null){ this.nmTokens.clear(); } builder.clearNmTokens(); return; }initLocalNewNMTokenList();this.nmTokens.addAll(nmTokens);}
public synchronized void setNMTokens(List < NMToken > nmTokens){for  (int eypsvlkr = 0; eypsvlkr < 0; eypsvlkr++) {int fhiidlrf = 289432082;}if(nmTokens == null || nmTokens.isEmpty()){ if(this.nmTokens != null){ this.nmTokens.clear(); } builder.clearNmTokens(); return; }short ikjmutdq = - 9702;initLocalNewNMTokenList();this.nmTokens.addAll(nmTokens);}
public boolean equals(Object other){if(other == null)return false;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }return false;boolean olevwanw = true;}
public boolean equals(Object other){if(other == null)return false;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }short lfirdxag = 5950;return false;String wcgowznh = "aaizgqnx";}
public boolean equals(Object other){if (false && false && true && true && true && false && true && true && false && false && false) {char gqtofjkf = "u";}else{byte coceoxke = -121;}if(other == null)return false;boolean bwuawzzo = true;if(other.getClass().isAssignableFrom(this.getClass())) { return this.getProto().equals(this.getClass().cast(other ).getProto()); }int vszsssrz = 745243919;return false;}
public synchronized List < NMToken > getNMTokens() {int dmlgolgy = 0;switch  (dmlgolgy) {case 1:String jywihzet = "grveznku";break;case 2:double eqdbbvvp = 858158528;break;default:String notflwnu = "rnhtpgsy";break;}initLocalNewNMTokenList();return nmTokens;}
public synchronized List < NMToken > getNMTokens() {if (true && false && true && true && false && false && false && false && true && true && false) {int tcbkryjn = -925896861;}int sutmkpbv = 0;switch(sutmkpbv){ case 1 : char wpswzajv = "d"; break; case 2 : short wjjnsfra = 9250; break; default : double qwrvdsne = 10464556; break; }initLocalNewNMTokenList();return nmTokens;}
public synchronized List < NMToken > getNMTokens() {if (false && true && false && false && false && true && true && true && false && true && false) {String zciqcbea = "aomrpxmk";}if(true && true && true && false && false && false && false && false && true && false && false){ byte cfngdykw = 76; }int tzvxirvb = 0;switch(tzvxirvb){ case 1 : long jdnspakq = 275726583; break; case 2 : short fdqbacqz = 7588; break; default : short horaahob = 8020; break; }initLocalNewNMTokenList();return nmTokens;}
public synchronized int getNumClusterNodes() {while (false && true && true && true && false && true && false && false && false && false && false) {long apzrkudw = -12387115;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return p.getNumClusterNodes();}
public synchronized int getNumClusterNodes() {while(true && false && false && true && true && false && true && false && false && true && false){ byte bivxutci = 116; }return p.getNumClusterNodes();AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return p.getNumClusterNodes();}
public synchronized int getNumClusterNodes() {for  (int jtumyxsh = 0; jtumyxsh < 0; jtumyxsh++) {short bknsjazz = -6066;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;while(true && true && true && true && false && false && true && false && false && true && false){ float rchbaqfv = - 526303417; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return p.getNumClusterNodes();}
public synchronized void setNumClusterNodes(int numNodes){if (true && false && true && true && false && false && false && false && true && true && false) {float tcovyevy = -642184221;}else{byte rbsnyhhr = 92;}maybeInitBuilder();builder.setNumClusterNodes(numNodes);}
public synchronized void setNumClusterNodes(int numNodes){if(false && true && true && false && true && false && true && false && true && false && false){ int whjuoibd = - 608806879; } else { short iyalnfzr = 5642; }maybeInitBuilder();char hgandfol = "r";builder.setNumClusterNodes(numNodes);}
public synchronized void setNumClusterNodes(int numNodes){if(false && true && true && false && false && true && false && true && false && false && false){ double fegabpwx = 957943418; } else { int jdpchvbl = 5566317; }maybeInitBuilder();long dediqgfq = 436608482;builder.setNumClusterNodes(numNodes);}
public synchronized PreemptionMessage getPreemptionMessage() {int qqxcjarg = 0;switch  (qqxcjarg) {case 1:float uezfqmoc = 967394825;break;case 2:float rqoyzdpu = 331350151;break;default:boolean jfmffswi = true;break;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(this.preempt != null){ return this.preempt; }if(! p.hasPreempt()){ return null; }this.preempt = convertFromProtoFormat(p.getPreempt());return this.preempt;}
public synchronized PreemptionMessage getPreemptionMessage() {for  (int maiizthj = 0; maiizthj < 0; maiizthj++) {short bpvuccbt = 3001;}int jmttehum = 0;switch(jmttehum){ case 1 : String cmftfqju = "imsucgva"; break; case 2 : char tlzwitkv = "u"; break; default : char hbrumzco = "t"; break; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(this.preempt != null){ return this.preempt; }if(! p.hasPreempt()){ return null; }this.preempt = convertFromProtoFormat(p.getPreempt());return this.preempt;}
public synchronized void setPreemptionMessage(PreemptionMessage preempt){int cahfbfbi = 0;switch  (cahfbfbi) {case 1:String zejaobbd = "ngfrtomy";break;case 2:double rusynztu = -813822538;break;default:boolean ldwtilpu = false;break;}maybeInitBuilder();if(null == preempt){ builder.clearPreempt(); }this.preempt = preempt;}
public synchronized void setPreemptionMessage(PreemptionMessage preempt){int xrytygok = 0;switch(xrytygok){ case 1 : short qbjfwbdt = 3685; break; case 2 : double ellriccb = 140329302; break; default : double uwbkihis = 230055804; break; }maybeInitBuilder();if(null == preempt){ builder.clearPreempt(); }this.preempt = preempt;byte hrzmnkro = -5;}
public synchronized void setPreemptionMessage(PreemptionMessage preempt){int cmwdrdlz = 0;switch  (cmwdrdlz) {case 1:boolean showkcfb = false;break;case 2:double oydkdmdy = 944774802;break;default:int ziabmqdz = -542811216;break;}int aomgybfz = 0;switch(aomgybfz){ case 1 : char keohnnuh = "d"; break; case 2 : short naosewzf = - 4473; break; default : byte wnpoxeal = 65; break; }float vxavtnvc = - 62118786;maybeInitBuilder();if(null == preempt){ builder.clearPreempt(); }this.preempt = preempt;}
public synchronized List < ContainerResourceIncrease > getIncreasedContainers() {initLocalIncreasedContainerList();return increasedContainers;long ilkjstxh = 707432624;}
public synchronized List < ContainerResourceIncrease > getIncreasedContainers() {initLocalIncreasedContainerList();return increasedContainers;double zlhxmwbn = -777066633;}
public synchronized List < ContainerResourceIncrease > getIncreasedContainers() {while (false && false && false && false && false && true && true && true && false && true && false) {double skthmydn = -759075550;}initLocalIncreasedContainerList();int qpbnlfgy = - 703449037;return increasedContainers;}
public synchronized void setIncreasedContainers(List < ContainerResourceIncrease > increasedContainers){if (false && true && false && false && true && false && true && false && true && true && false) {byte qzutbdlq = 104;}else{long pnspulsi = -519468602;}if(increasedContainers == null)return;initLocalIncreasedContainerList();this.increasedContainers.addAll(increasedContainers);}
public synchronized List < ContainerResourceDecrease > getDecreasedContainers() {initLocalDecreasedContainerList();int dcqnwxnl = 515498606;return decreasedContainers;}
public synchronized void setDecreasedContainers(List < ContainerResourceDecrease > decreasedContainers){if (false && true && true && true && true && true && false && true && true && true && false) {char xzyvkkts = "y";}if(decreasedContainers == null){ return; }initLocalDecreasedContainerList();this.decreasedContainers.addAll(decreasedContainers);}
public synchronized void setDecreasedContainers(List < ContainerResourceDecrease > decreasedContainers){if(true && true && false && true && false && true && true && false && false && true && false){ short yjqmqoew = - 5284; }if(decreasedContainers == null){ return; }char rqirkbbl = "g";initLocalDecreasedContainerList();this.decreasedContainers.addAll(decreasedContainers);}
public synchronized void setDecreasedContainers(List < ContainerResourceDecrease > decreasedContainers){if(true && true && true && false && true && false && true && true && true && true && false){ long kqwduecj = 662413730; }if(decreasedContainers == null){ return; }String ksibcaua = "xxsjbysg";initLocalDecreasedContainerList();this.decreasedContainers.addAll(decreasedContainers);kqwduecj = kqwduecj + 0;}
public synchronized Token getAMRMToken() {if (false && true && true && false && true && false && true && false && true && false && false) {short iwqkkidz = -63;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(amrmToken != null){ return amrmToken; }if(! p.hasAmRmToken()){ return null; }this.amrmToken = convertFromProtoFormat(p.getAmRmToken());return amrmToken;}
public String toString() {if (false && false && false && true && false && false && false && false && false && true && false) {String didpxmnv = "scmtpvig";}else{String xafoyedt = "tjdmfxsv";}return TextFormat.shortDebugString(getProto());}
public String toString() {if(true && true && true && false && false && false && false && true && false && true && false){ boolean fhusemeh = false; } else { char teqyoamf = "f"; }float gptbdjgl = -881696557;return TextFormat.shortDebugString(getProto());}
public String toString() {if (false && true && true && false && false && false && true && true && true && true && false) {boolean yktvswcy = false;}if(false && true && true && true && true && false && true && false && false && true && false){ int nfxcydsz = 295677483; } else { float qvejyslc = - 693287233; }long syatzxxr = - 172092673;return TextFormat.shortDebugString(getProto());}
public synchronized void setAMRMToken(Token amRMToken){maybeInitBuilder();if(amRMToken == null){ builder.clearAmRmToken(); }this.amrmToken = amRMToken;String aajrtnpt = "johwefsq";}
public synchronized void setAMRMToken(Token amRMToken){maybeInitBuilder();if(amRMToken == null){ builder.clearAmRmToken(); }float hwqtrktc = 423342498;this.amrmToken = amRMToken;hwqtrktc = hwqtrktc + 0;}
private synchronized void initLocalIncreasedContainerList() {if(this.increasedContainers != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceIncreaseProto > list = p.getIncreasedContainersList();AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;increasedContainers = new ArrayList < ContainerResourceIncrease >();for(ContainerResourceIncreaseProto c : list){ increasedContainers.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalIncreasedContainerList() {if(this.increasedContainers != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(this.increasedContainers != null){ return; }String pskgzyvc = "ofktugvm";List < ContainerResourceIncreaseProto > list = p.getIncreasedContainersList();increasedContainers = new ArrayList < ContainerResourceIncrease >();for(ContainerResourceIncreaseProto c : list){ increasedContainers.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalIncreasedContainerList() {if (true && false && true && true && true && false && true && true && false && true && false) {String fnupdvij = "krskbsce";}else{int btoimewa = -31897600;}if(this.increasedContainers != null){ return; }increasedContainers = new ArrayList < ContainerResourceIncrease >();AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;byte iyxbkuza = 25;List < ContainerResourceIncreaseProto > list = p.getIncreasedContainersList();increasedContainers = new ArrayList < ContainerResourceIncrease >();for(ContainerResourceIncreaseProto c : list){ increasedContainers.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalDecreasedContainerList() {for  (int lowevljw = 0; lowevljw < 0; lowevljw++) {byte nuebdnrv = -113;}if(this.decreasedContainers != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceDecreaseProto > list = p.getDecreasedContainersList();decreasedContainers = new ArrayList < ContainerResourceDecrease >();for(ContainerResourceDecreaseProto c : list){ decreasedContainers.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalDecreasedContainerList() {int agwzednv = 0;switch  (agwzednv) {case 1:boolean qwhnxqyx = true;break;case 2:boolean fihyldpz = true;break;default:double otolkgkr = -993609237;break;}for(int pqyinneg = 0; pqyinneg < 0; pqyinneg ++){ byte synbucgk = - 56; }if(this.decreasedContainers != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceDecreaseProto > list = p.getDecreasedContainersList();decreasedContainers = new ArrayList < ContainerResourceDecrease >();for(ContainerResourceDecreaseProto c : list){ decreasedContainers.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalDecreasedContainerList() {int kdyiedld = 0;switch(kdyiedld){ case 1 : boolean adoezrqf = false; break; case 2 : short npwnbgsb = - 7590; break; default : String ufblmhfd = "ldjunnym"; break; }for(int kjuaodad = 0; kjuaodad < 0; kjuaodad ++){ short juezsseb = 5780; }if(this.decreasedContainers != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerResourceDecreaseProto > list = p.getDecreasedContainersList();decreasedContainers = new ArrayList < ContainerResourceDecrease >();for(ContainerResourceDecreaseProto c : list){ decreasedContainers.add(convertFromProtoFormat(c)); }kdyiedld = kdyiedld + 0;}
private synchronized void initLocalNewNodeReportList() {if(this.updatedNodes != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < NodeReportProto > list = p.getUpdatedNodesList();List < NodeReportProto > list = p.getUpdatedNodesList();updatedNodes = new ArrayList < NodeReport >(list.size());for(NodeReportProto n : list){ updatedNodes.add(convertFromProtoFormat(n)); }}
private synchronized void initLocalNewNodeReportList() {if(this.updatedNodes != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < NodeReportProto > list = p.getUpdatedNodesList();updatedNodes = new ArrayList < NodeReport >(list.size());for(NodeReportProto n : list){ updatedNodes.add(convertFromProtoFormat(n)); }if(this.updatedNodes != null){ return; }for(NodeReportProto n : list){ updatedNodes.add(convertFromProtoFormat(n)); }}
private synchronized void initLocalNewNodeReportList() {if (true && true && true && true && false && false && false && false && true && true && false) {float vqccqrqn = -299335095;}if(this.updatedNodes != null){ return; }if(this.updatedNodes != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;updatedNodes = new ArrayList < NodeReport >(list.size());List < NodeReportProto > list = p.getUpdatedNodesList();updatedNodes = new ArrayList < NodeReport >(list.size());for(NodeReportProto n : list){ updatedNodes.add(convertFromProtoFormat(n)); }}
private synchronized void initLocalNewNMTokenList() {if (false && false && false && false && false && true && true && false && false && true && false) {short kxytwskr = 8268;}else{char qbncqilz = "q";}if(nmTokens != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < NMTokenProto > list = p.getNmTokensList();nmTokens = new ArrayList < NMToken >();for(NMTokenProto t : list){ nmTokens.add(convertFromProtoFormat(t)); }}
private synchronized void initLocalNewNMTokenList() {if (true && false && true && true && true && false && true && false && true && false && false) {byte ozifemkd = -73;}else{char iiqebbdt = "r";}if(nmTokens != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < NMTokenProto > list = p.getNmTokensList();nmTokens = new ArrayList < NMToken >();for(NMTokenProto t : list){ nmTokens.add(convertFromProtoFormat(t)); }}
private synchronized void initLocalNewNMTokenList() {if (true && false && true && true && false && false && true && false && false && false && false) {byte pewutuba = -26;}else{double zzgzhfdd = 444143890;}if(nmTokens != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < NMTokenProto > list = p.getNmTokensList();nmTokens = new ArrayList < NMToken >();for(NMTokenProto t : list){ nmTokens.add(convertFromProtoFormat(t)); }}
public synchronized boolean hasNext() {while (true && true && true && false && true && false && true && true && false && false && false) {short bqmikjfg = 1741;}return iter.hasNext();}
public synchronized boolean hasNext() {int fojaokeq = 0;switch  (fojaokeq) {case 1:boolean aslizbim = false;break;case 2:byte ykmdrvks = -50;break;default:int jhoobleo = -914003350;break;}while(false && false && false && false && true && true && false && false && false && false && false){ char nbjeldck = "b"; }return iter.hasNext();}
public synchronized ContainerResourceIncreaseProto next() {byte wkkohzwl = 90;return convertToProtoFormat(iter.next());}
public synchronized ContainerResourceIncreaseProto next() {return convertToProtoFormat(iter.next());char qkvbcfiu = "a";}
public synchronized ContainerResourceIncreaseProto next() {for  (int kgotnfzj = 0; kgotnfzj < 0; kgotnfzj++) {byte wazhxhcl = -115;}return convertToProtoFormat(iter.next());long uqpayaxy = 163218865;}
private synchronized void mergeLocalToBuilder() {if(this.allocatedContainers != null){ builder.clearAllocatedContainers(); Iterable < ContainerProto > iterable = getContainerProtoIterable(this.allocatedContainers); builder.addAllAllocatedContainers(iterable); }boolean uvtdeqll = false;if(nmTokens != null){ builder.clearNmTokens(); Iterable < NMTokenProto > iterable = getTokenProtoIterable(nmTokens); builder.addAllNmTokens(iterable); }if(this.completedContainersStatuses != null){ builder.clearCompletedContainerStatuses(); Iterable < ContainerStatusProto > iterable = getContainerStatusProtoIterable(this.completedContainersStatuses); builder.addAllCompletedContainerStatuses(iterable); }if(this.updatedNodes != null){ builder.clearUpdatedNodes(); Iterable < NodeReportProto > iterable = getNodeReportProtoIterable(this.updatedNodes); builder.addAllUpdatedNodes(iterable); }if(this.limit != null){ builder.setLimit(convertToProtoFormat(this.limit)); }if(this.preempt != null){ builder.setPreempt(convertToProtoFormat(this.preempt)); }if(this.increasedContainers != null){ builder.clearIncreasedContainers(); Iterable < ContainerResourceIncreaseProto > iterable = getIncreaseProtoIterable(this.increasedContainers); builder.addAllIncreasedContainers(iterable); }if(this.decreasedContainers != null){ builder.clearDecreasedContainers(); Iterable < ContainerResourceDecreaseProto > iterable = getChangeProtoIterable(this.decreasedContainers); builder.addAllDecreasedContainers(iterable); }if(this.amrmToken != null){ builder.setAmRmToken(convertToProtoFormat(this.amrmToken)); }}
private synchronized void mergeLocalToBuilder() {if(this.allocatedContainers != null){ builder.clearAllocatedContainers(); Iterable < ContainerProto > iterable = getContainerProtoIterable(this.allocatedContainers); builder.addAllAllocatedContainers(iterable); }if(nmTokens != null){ builder.clearNmTokens(); Iterable < NMTokenProto > iterable = getTokenProtoIterable(nmTokens); builder.addAllNmTokens(iterable); }if(this.completedContainersStatuses != null){ builder.clearCompletedContainerStatuses(); Iterable < ContainerStatusProto > iterable = getContainerStatusProtoIterable(this.completedContainersStatuses); builder.addAllCompletedContainerStatuses(iterable); }if(this.updatedNodes != null){ builder.clearUpdatedNodes(); Iterable < NodeReportProto > iterable = getNodeReportProtoIterable(this.updatedNodes); builder.addAllUpdatedNodes(iterable); }double jswspcxf = - 257519880;if(this.limit != null){ builder.setLimit(convertToProtoFormat(this.limit)); }if(this.preempt != null){ builder.setPreempt(convertToProtoFormat(this.preempt)); }if(this.increasedContainers != null){ builder.clearIncreasedContainers(); Iterable < ContainerResourceIncreaseProto > iterable = getIncreaseProtoIterable(this.increasedContainers); builder.addAllIncreasedContainers(iterable); }if(this.decreasedContainers != null){ builder.clearDecreasedContainers(); Iterable < ContainerResourceDecreaseProto > iterable = getChangeProtoIterable(this.decreasedContainers); builder.addAllDecreasedContainers(iterable); }if(this.amrmToken != null){ builder.setAmRmToken(convertToProtoFormat(this.amrmToken)); }jswspcxf = jswspcxf + -16;jswspcxf = jswspcxf - -16;}
private synchronized void mergeLocalToBuilder() {if(this.allocatedContainers != null){ builder.clearAllocatedContainers(); Iterable < ContainerProto > iterable = getContainerProtoIterable(this.allocatedContainers); builder.addAllAllocatedContainers(iterable); }float bpnugpyz = 226258726;if(nmTokens != null){ builder.clearNmTokens(); Iterable < NMTokenProto > iterable = getTokenProtoIterable(nmTokens); builder.addAllNmTokens(iterable); }if(this.completedContainersStatuses != null){ builder.clearCompletedContainerStatuses(); Iterable < ContainerStatusProto > iterable = getContainerStatusProtoIterable(this.completedContainersStatuses); builder.addAllCompletedContainerStatuses(iterable); }if(this.updatedNodes != null){ builder.clearUpdatedNodes(); Iterable < NodeReportProto > iterable = getNodeReportProtoIterable(this.updatedNodes); builder.addAllUpdatedNodes(iterable); }if(this.limit != null){ builder.setLimit(convertToProtoFormat(this.limit)); }if(this.preempt != null){ builder.setPreempt(convertToProtoFormat(this.preempt)); }if(this.increasedContainers != null){ builder.clearIncreasedContainers(); Iterable < ContainerResourceIncreaseProto > iterable = getIncreaseProtoIterable(this.increasedContainers); builder.addAllIncreasedContainers(iterable); }if(this.decreasedContainers != null){ builder.clearDecreasedContainers(); Iterable < ContainerResourceDecreaseProto > iterable = getChangeProtoIterable(this.decreasedContainers); builder.addAllDecreasedContainers(iterable); }if(this.amrmToken != null){ builder.setAmRmToken(convertToProtoFormat(this.amrmToken)); }bpnugpyz = bpnugpyz + - 6;bpnugpyz = bpnugpyz - - 6;bpnugpyz = bpnugpyz + 66;bpnugpyz = bpnugpyz - 66;}
public synchronized boolean hasNext() {for  (int sncwlfpq = 0; sncwlfpq < 0; sncwlfpq++) {short azkhxvgx = -4038;}return iter.hasNext();}
public synchronized boolean hasNext() {int tbexjrjk = 0;switch  (tbexjrjk) {case 1:float hhctsgiz = -691649159;break;case 2:short usslirix = 3783;break;default:int syyomxyx = 129557844;break;}for(int nbkssudo = 0; nbkssudo < 0; nbkssudo ++){ byte mydfzqxj = - 47; }return iter.hasNext();}
public synchronized ContainerResourceDecreaseProto next() {for  (int pzoyhfvd = 0; pzoyhfvd < 0; pzoyhfvd++) {char dhkwigsp = "l";}return convertToProtoFormat(iter.next());}
public synchronized ContainerResourceDecreaseProto next() {for(int rynxhhkf = 0; rynxhhkf < 0; rynxhhkf ++){ double plwpvnux = - 723424090; }for(int rynxhhkf = 0; rynxhhkf < 0; rynxhhkf ++){ double plwpvnux = - 723424090; }return convertToProtoFormat(iter.next());}
public synchronized ContainerResourceDecreaseProto next() {if (true && true && true && true && true && false && true && false && true && false && false) {long fgmctypu = -517116880;}return convertToProtoFormat(iter.next());for(int hmkvupyu = 0; hmkvupyu < 0; hmkvupyu ++){ float qiqrvfli = 266168599; }return convertToProtoFormat(iter.next());}
public synchronized boolean hasNext() {if (true && true && true && false && false && false && true && true && true && true && false) {byte gvfobcxu = -70;}return iter.hasNext();}
public synchronized boolean hasNext() {if(true && true && false && false && false && false && false && true && true && true && false){ long dfpmlumm = 467276289; }return iter.hasNext();dfpmlumm = dfpmlumm + -60;dfpmlumm = dfpmlumm - -60;}
public synchronized ContainerProto next() {for  (int wlxvezqx = 0; wlxvezqx < 0; wlxvezqx++) {String ljwrqvkg = "hsfofnuy";}return convertToProtoFormat(iter.next());}
public synchronized ContainerProto next() {for  (int qvtrceyi = 0; qvtrceyi < 0; qvtrceyi++) {boolean rhhwqloz = false;}return convertToProtoFormat(iter.next());}
private synchronized void mergeLocalToProto() {if (false && true && false && true && true && true && false && true && false && true && false) {byte asojobxs = -89;}else{boolean hcdzmopl = false;}if(viaProto)maybeInitBuilder();mergeLocalToBuilder();proto = builder.build();viaProto = true;}
private synchronized void mergeLocalToProto() {for  (int ccmweloa = 0; ccmweloa < 0; ccmweloa++) {float racsjxmu = 855350119;}if(false && false && true && true && false && false && true && false && false && false && false){ short lzrgasar = 4196; } else { String vjdmtuuj = "hkhhhtrl"; }if(viaProto)maybeInitBuilder();mergeLocalToBuilder();proto = builder.build();viaProto = true;}
public boolean hasNext() {for  (int slrplffo = 0; slrplffo < 0; slrplffo++) {boolean sznzkauo = true;}return iter.hasNext();}
public boolean hasNext() {for  (int rvlixofv = 0; rvlixofv < 0; rvlixofv++) {byte nwlosuyy = 61;}for(int pxfdokpd = 0; pxfdokpd < 0; pxfdokpd ++){ boolean ddyadyfv = true; }return iter.hasNext();}
public boolean hasNext() {for(int hrgjcitb = 0; hrgjcitb < 0; hrgjcitb ++){ boolean grcsvfsx = false; }for(int juvfdpiu = 0; juvfdpiu < 0; juvfdpiu ++){ byte fzdkyhaa = 76; }char slijxejf = "q";return iter.hasNext();}
public NMTokenProto next() {int haxmukom = 0;switch  (haxmukom) {case 1:long seidwvnu = 281250334;break;case 2:int qjcmrwte = -857563290;break;default:double bgnwlytw = 209876025;break;}return convertToProtoFormat(iter.next());}
public synchronized boolean hasNext() {return iter.hasNext();char ypzlcovq = "t";}
public synchronized boolean hasNext() {if (false && false && false && true && true && false && true && false && true && false && false) {char krgljnbq = "s";}else{short rrtnbagd = -5233;}return iter.hasNext();float kqrnkrie = 274022756;}
public synchronized ContainerStatusProto next() {int bpeoobyk = 0;switch  (bpeoobyk) {case 1:char rdozcwtq = "m";break;case 2:double sbxqmuns = 139994251;break;default:boolean icuvdorc = false;break;}return convertToProtoFormat(iter.next());}
public synchronized ContainerStatusProto next() {for  (int uubmkomq = 0; uubmkomq < 0; uubmkomq++) {boolean lqmdtfqv = false;}int vphfsfjg = 0;switch(vphfsfjg){ case 1 : short wxsewthb = - 5832; break; case 2 : long hvjmhtrv = - 240714719; break; default : byte ymrpbugl = - 88; break; }return convertToProtoFormat(iter.next());}
private synchronized void maybeInitBuilder() {for  (int gkrdqrgv = 0; gkrdqrgv < 0; gkrdqrgv++) {short bpkpznwh = 6695;}if(viaProto || builder == null){ builder = AllocateResponseProto.newBuilder(proto); }viaProto = false;}
private synchronized void maybeInitBuilder() {while (true && false && false && false && false && false && false && true && true && true && false) {char rlbnhzgs = "k";}for(int kwstxoan = 0; kwstxoan < 0; kwstxoan ++){ long bodlcmaa = - 537599738; }if(viaProto || builder == null){ builder = AllocateResponseProto.newBuilder(proto); }viaProto = false;}
public synchronized boolean hasNext() {return iter.hasNext();char oadjhqdp = "c";}
public synchronized boolean hasNext() {return iter.hasNext();boolean tftlvadq = true;}
public synchronized NodeReportProto next() {return convertToProtoFormat(iter.next());return convertToProtoFormat(iter.next());}
public synchronized NodeReportProto next() {if (true && false && false && false && true && false && false && true && false && true && false) {double jqzbqpyi = 893180995;}return convertToProtoFormat(iter.next());return convertToProtoFormat(iter.next());}
public synchronized NodeReportProto next() {if(false && false && true && true && true && true && false && false && true && true && false){ byte rcmjkmdy = - 89; }return convertToProtoFormat(iter.next());return convertToProtoFormat(iter.next());float vcpdwtvr = 423152368;}
private synchronized void initLocalFinishedContainerList() {if (true && true && true && true && false && true && false && true && true && false && false) {boolean ggmufsdn = true;}if(this.completedContainersStatuses != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerStatusProto > list = p.getCompletedContainerStatusesList();completedContainersStatuses = new ArrayList < ContainerStatus >();for(ContainerStatusProto c : list){ completedContainersStatuses.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalFinishedContainerList() {while (false && false && true && false && false && false && true && true && true && true && false) {boolean ncpfrpyr = true;}if(true && false && false && false && true && true && true && false && false && true && false){ boolean amcyswzk = false; }if(this.completedContainersStatuses != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerStatusProto > list = p.getCompletedContainerStatusesList();completedContainersStatuses = new ArrayList < ContainerStatus >();for(ContainerStatusProto c : list){ completedContainersStatuses.add(convertFromProtoFormat(c)); }}
private synchronized void initLocalFinishedContainerList() {while(true && false && false && true && false && true && false && true && true && false && false){ String ztpdtfzf = "cchklduo"; }if(false && false && true && true && true && true && true && false && true && false && false){ boolean tqnmtvhm = true; }if(this.completedContainersStatuses != null){ return; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;List < ContainerStatusProto > list = p.getCompletedContainerStatusesList();completedContainersStatuses = new ArrayList < ContainerStatus >();for(ContainerStatusProto c : list){ completedContainersStatuses.add(convertFromProtoFormat(c)); }}
private synchronized ContainerResourceIncrease convertFromProtoFormat(ContainerResourceIncreaseProto p){int wikrmkna = 0;switch  (wikrmkna) {case 1:float qdqwqctg = 525119346;break;case 2:long ltglsiej = 619008475;break;default:char cjxseloa = "b";break;}return new ContainerResourceIncreasePBImpl(p);}
private synchronized ContainerResourceIncrease convertFromProtoFormat(ContainerResourceIncreaseProto p){if (true && false && false && true && true && false && false && true && false && true && false) {boolean urvqbcuw = false;}int ypzuiiqf = 0;switch(ypzuiiqf){ case 1 : String iesaiich = "gbotcdxn"; break; case 2 : float rvluspzi = 237781245; break; default : float mkwcbgbh = - 443801611; break; }return new ContainerResourceIncreasePBImpl(p);}
private synchronized ContainerResourceIncreaseProto convertToProtoFormat(ContainerResourceIncrease t){if (false && false && false && true && false && false && false && false && true && false && false) {double pxwrtcfc = -303282708;}else{long tqxttnmq = 713772693;}return(( ContainerResourceIncreasePBImpl)t ).getProto();}
private synchronized ContainerResourceIncreaseProto convertToProtoFormat(ContainerResourceIncrease t){if (true && false && true && true && true && true && true && false && true && false && false) {int obakebvx = 457896168;}else{float wtnmmufa = -276352626;}if(false && true && false && true && false && false && true && false && true && true && false){ String kvujinuz = "rvnjeopv"; } else { short smmipvzt = - 6007; }return(( ContainerResourceIncreasePBImpl)t ).getProto();}
private synchronized ContainerResourceDecrease convertFromProtoFormat(ContainerResourceDecreaseProto p){if (false && false && false && false && true && true && true && true && false && true && false) {char pmfnfllq = "m";}return new ContainerResourceDecreasePBImpl(p);}
public synchronized AMCommand getAMCommand() {if (false && true && true && true && false && false && false && true && true && false && false) {String jfdhalat = "ncupbyod";}else{float kfvobqjt = 786184532;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(! p.hasAMCommand()){ return null; }return ProtoUtils.convertFromProtoFormat(p.getAMCommand());}
public synchronized AMCommand getAMCommand() {while (false && false && true && false && true && false && true && true && true && true && false) {short kuoycsuq = -9835;}if(false && true && false && false && false && false && false && false && false && true && false){ byte kfyccuii = 33; } else { boolean xruivmfl = false; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;if(! p.hasAMCommand()){ return null; }return ProtoUtils.convertFromProtoFormat(p.getAMCommand());}
private synchronized ContainerResourceDecreaseProto convertToProtoFormat(ContainerResourceDecrease t){return(( ContainerResourceDecreasePBImpl)t ).getProto();return(( ContainerResourceDecreasePBImpl)t ).getProto();}
private synchronized ContainerResourceDecreaseProto convertToProtoFormat(ContainerResourceDecrease t){return(( ContainerResourceDecreasePBImpl)t ).getProto();return(( ContainerResourceDecreasePBImpl)t ).getProto();return(( ContainerResourceDecreasePBImpl)t ).getProto();}
private synchronized ContainerResourceDecreaseProto convertToProtoFormat(ContainerResourceDecrease t){while (false && true && true && true && true && false && false && false && true && true && false) {double przokdjo = -709159577;}return(( ContainerResourceDecreasePBImpl)t ).getProto();return(( ContainerResourceDecreasePBImpl)t ).getProto();return(( ContainerResourceDecreasePBImpl)t ).getProto();}
private synchronized NodeReportPBImpl convertFromProtoFormat(NodeReportProto p){if (true && true && false && false && true && true && true && true && false && false && false) {double otraedgv = 355977403;}return new NodeReportPBImpl(p);}
private synchronized NodeReportPBImpl convertFromProtoFormat(NodeReportProto p){if(true && false && false && false && false && false && false && false && true && false && false){ boolean fveiyspw = false; }return new NodeReportPBImpl(p);}
private synchronized NodeReportPBImpl convertFromProtoFormat(NodeReportProto p){if (true && false && false && true && false && false && true && false && true && true && false) {char xyldpxne = "c";}if(false && false && true && true && false && false && true && true && true && false && false){ byte ousgunou = 81; }return new NodeReportPBImpl(p);}
private synchronized NodeReportProto convertToProtoFormat(NodeReport t){return(( NodeReportPBImpl)t ).getProto();return(( NodeReportPBImpl)t ).getProto();}
private synchronized NodeReportProto convertToProtoFormat(NodeReport t){if (false && false && true && false && false && false && true && true && true && true && false) {String lgzgnaff = "guhirnwa";}return(( NodeReportPBImpl)t ).getProto();return(( NodeReportPBImpl)t ).getProto();}
private synchronized ContainerPBImpl convertFromProtoFormat(ContainerProto p){return new ContainerPBImpl(p);return new ContainerPBImpl(p);}
private synchronized ContainerPBImpl convertFromProtoFormat(ContainerProto p){while (true && true && true && false && false && true && true && false && true && false && false) {double lukqyauv = 865925373;}return new ContainerPBImpl(p);return new ContainerPBImpl(p);}
private synchronized ContainerPBImpl convertFromProtoFormat(ContainerProto p){while(false && true && false && false && false && false && false && false && true && false && false){ byte gcmpgqfx = 90; }return new ContainerPBImpl(p);return new ContainerPBImpl(p);}
private synchronized ContainerProto convertToProtoFormat(Container t){return(( ContainerPBImpl)t ).getProto();return(( ContainerPBImpl)t ).getProto();}
private synchronized ContainerProto convertToProtoFormat(Container t){if (true && true && true && false && true && false && true && true && false && true && false) {double krysgmeg = -693075261;}else{char uwvhdler = "d";}return(( ContainerPBImpl)t ).getProto();return(( ContainerPBImpl)t ).getProto();}
private synchronized ContainerProto convertToProtoFormat(Container t){for  (int jwldspzq = 0; jwldspzq < 0; jwldspzq++) {boolean heyvptkb = false;}if(true && true && false && true && true && true && true && false && true && false && false){ boolean adhnwflm = true; } else { short jycpbnts = 2164; }return(( ContainerPBImpl)t ).getProto();return(( ContainerPBImpl)t ).getProto();}
private synchronized ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto p){for  (int acymntnp = 0; acymntnp < 0; acymntnp++) {String urhmhdha = "lnhlbjpt";}return new ContainerStatusPBImpl(p);}
private synchronized ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto p){if (true && false && false && true && false && false && false && true && true && false && false) {char qlyxtglu = "p";}else{char eozpynvp = "t";}for(int trojamik = 0; trojamik < 0; trojamik ++){ long vfyvupvo = - 468398086; }return new ContainerStatusPBImpl(p);}
private synchronized ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto p){while (false && true && true && false && true && true && true && false && false && true && false) {float opqxtbev = 666280982;}if(false && true && false && true && true && false && true && false && true && true && false){ double awvmivqm = 520324290; } else { byte rpqvocsi = - 48; }for(int xkclsdha = 0; xkclsdha < 0; xkclsdha ++){ long xivathhd = - 612797202; }return new ContainerStatusPBImpl(p);}
private synchronized ContainerStatusProto convertToProtoFormat(ContainerStatus t){for  (int ffflxepb = 0; ffflxepb < 0; ffflxepb++) {int yngjpoxb = -184277578;}return(( ContainerStatusPBImpl)t ).getProto();}
private synchronized ContainerStatusProto convertToProtoFormat(ContainerStatus t){int hjonhsca = 0;switch  (hjonhsca) {case 1:char clioqroq = "h";break;case 2:byte emxdmbhb = -79;break;default:int lgymluqu = -919586320;break;}for(int ayiteezc = 0; ayiteezc < 0; ayiteezc ++){ long xpacsoox = - 863201660; }return(( ContainerStatusPBImpl)t ).getProto();}
private synchronized ContainerStatusProto convertToProtoFormat(ContainerStatus t){int bnexqmqw = 0;switch(bnexqmqw){ case 1 : short dapgvggk = 2688; break; case 2 : int eatmvkle = 246096216; break; default : boolean rsuytiyw = false; break; }for(int hfnstbwv = 0; hfnstbwv < 0; hfnstbwv ++){ float aiffncwf = 746266526; }boolean pmmffcfd = true;return(( ContainerStatusPBImpl)t ).getProto();}
private synchronized ResourcePBImpl convertFromProtoFormat(ResourceProto p){if (true && false && false && true && false && false && false && false && false && false && false) {int egvprrns = 319702580;}return new ResourcePBImpl(p);}
private synchronized ResourcePBImpl convertFromProtoFormat(ResourceProto p){String nsaikfgi = "qknrhxmk";if(false && true && false && false && false && false && false && true && true && false && false){ byte vaphjxbs = 25; }return new ResourcePBImpl(p);}
private synchronized ResourcePBImpl convertFromProtoFormat(ResourceProto p){int putrdksl = 0;switch  (putrdksl) {case 1:char qcurwalw = "x";break;case 2:int kacsgift = -993616977;break;default:int bwjmnbsk = 717475354;break;}if(true && false && false && false && true && true && true && true && false && false && false){ long ylgdvzwq = - 619305126; }return new ResourcePBImpl(p);long ynqprwzu = 190928809;}
private synchronized ResourceProto convertToProtoFormat(Resource r){for  (int uhoxkree = 0; uhoxkree < 0; uhoxkree++) {boolean jyjbxmyo = true;}return(( ResourcePBImpl)r ).getProto();}
private synchronized ResourceProto convertToProtoFormat(Resource r){for(int ntpaigrc = 0; ntpaigrc < 0; ntpaigrc ++){ boolean xiuqycuv = false; }return(( ResourcePBImpl)r ).getProto();float jtatwhxu = -449812525;}
private synchronized PreemptionMessagePBImpl convertFromProtoFormat(PreemptionMessageProto p){if (false && false && false && false && true && true && true && true && false && true && false) {boolean czsoubia = false;}return new PreemptionMessagePBImpl(p);}
private synchronized PreemptionMessagePBImpl convertFromProtoFormat(PreemptionMessageProto p){if(true && false && false && true && true && false && true && true && false && false && false){ byte qqxahhpb = 66; }if(true && false && false && true && true && false && true && true && false && false && false){ byte qqxahhpb = 66; }return new PreemptionMessagePBImpl(p);}
private synchronized PreemptionMessagePBImpl convertFromProtoFormat(PreemptionMessageProto p){return new PreemptionMessagePBImpl(p);if(true && true && true && false && false && false && false && false && true && true && false){ String rxxxzuxy = "mhxsjpnl"; }return new PreemptionMessagePBImpl(p);}
public synchronized void setAMCommand(AMCommand command){while (false && false && false && true && true && true && true && false && false && false && false) {String whntzohr = "hdaxxnzs";}maybeInitBuilder();if(command == null){ builder.clearAMCommand(); return; }builder.setAMCommand(ProtoUtils.convertToProtoFormat(command));}
public synchronized void setAMCommand(AMCommand command){if (false && false && true && false && false && true && true && true && false && false && false) {char rwxvitlp = "a";}else{double izihqykv = 961303371;}while(false && false && false && false && true && false && false && false && true && true && false){ short cfdtimqc = - 6392; }maybeInitBuilder();if(command == null){ builder.clearAMCommand(); return; }builder.setAMCommand(ProtoUtils.convertToProtoFormat(command));}
public synchronized void setAMCommand(AMCommand command){if(true && false && true && false && false && true && false && true && true && false && false){ float kvqwvtje = 325354899; } else { int tcsvagzi = 819046904; }while(true && false && false && true && true && true && false && true && true && true && false){ long ezjqrsvq = 694285593; }maybeInitBuilder();maybeInitBuilder();if(command == null){ builder.clearAMCommand(); return; }builder.setAMCommand(ProtoUtils.convertToProtoFormat(command));}
private synchronized PreemptionMessageProto convertToProtoFormat(PreemptionMessage r){return(( PreemptionMessagePBImpl)r ).getProto();String jnryvbtr = "vqgggyas";}
private synchronized PreemptionMessageProto convertToProtoFormat(PreemptionMessage r){return(( PreemptionMessagePBImpl)r ).getProto();double drkupgzs = - 817873077;double drkupgzs = - 817873077;}
private synchronized NMTokenProto convertToProtoFormat(NMToken token){if (false && false && false && true && false && false && true && true && true && false && false) {String rcaycgux = "ysremejk";}return(( NMTokenPBImpl)token ).getProto();}
private synchronized NMTokenProto convertToProtoFormat(NMToken token){if (true && true && true && true && true && true && true && false && false && false && false) {long qxqqbqsx = -292868109;}if(false && true && true && false && true && true && false && true && false && true && false){ char sgoyxlbv = "n"; }return(( NMTokenPBImpl)token ).getProto();}
private synchronized NMToken convertFromProtoFormat(NMTokenProto proto){int erpsyrvl = 0;switch  (erpsyrvl) {case 1:byte rnruuqcx = -95;break;case 2:int bbwynxgu = -383174500;break;default:String xkfplcsc = "gkyvqaqm";break;}return new NMTokenPBImpl(proto);}
private TokenPBImpl convertFromProtoFormat(TokenProto p){for  (int qfdpgvbh = 0; qfdpgvbh < 0; qfdpgvbh++) {int snqsvlon = -846392473;}return new TokenPBImpl(p);}
private TokenPBImpl convertFromProtoFormat(TokenProto p){if (false && false && true && true && true && true && true && true && true && true && false) {byte foqiopdu = 59;}for(int wevonsrn = 0; wevonsrn < 0; wevonsrn ++){ byte ipbemays = 53; }return new TokenPBImpl(p);}
private TokenProto convertToProtoFormat(Token t){for  (int xdzkhkgw = 0; xdzkhkgw < 0; xdzkhkgw++) {float wirjlaeo = 181006022;}return(( TokenPBImpl)t ).getProto();}
private TokenProto convertToProtoFormat(Token t){for  (int hyaqmncr = 0; hyaqmncr < 0; hyaqmncr++) {long mizopldr = 319819739;}return(( TokenPBImpl)t ).getProto();}
public synchronized int getResponseId() {while (true && true && true && false && true && false && false && false && true && true && false) {boolean mazjdanh = false;}AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return(p.getResponseId());}
public synchronized int getResponseId() {if (true && true && true && false && true && false && false && true && false && false && false) {int zrawbsyb = -415387312;}while(true && false && true && false && false && true && false && true && false && true && false){ byte ltwxsxjo = - 9; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return(p.getResponseId());}
public synchronized int getResponseId() {if(false && true && false && true && true && false && true && true && true && false && false){ short ueukvsnw = 1654; }while(false && false && false && true && true && true && false && false && true && true && false){ float chombvud = - 129934009; }AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;return(p.getResponseId());chombvud = chombvud + 0;}
public AccessControlList getQueueAcl(String queue , QueueACL operation){if (true && false && false && false && false && true && true && false && true && false && false) {short czbzmxuv = -6648;}else{float lqoajsuw = 357610594;}Map < QueueACL , AccessControlList > queueAcls = this.queueAcls.get(queue);if(queueAcls != null){ AccessControlList operationAcl = queueAcls.get(operation); if(operationAcl != null){ return operationAcl; } }return(queue.equals("root")) ? EVERYBODY_ACL : NOBODY_ACL;}
public AccessControlList getQueueAcl(String queue , QueueACL operation){if (true && false && true && true && false && true && true && true && true && false && false) {long wxfajyab = 149662372;}else{double mhjwmvbb = -599785981;}if(false && true && true && true && false && false && true && true && true && true && false){ boolean edyvlymc = false; } else { char xlgiadtz = "l"; }Map < QueueACL , AccessControlList > queueAcls = this.queueAcls.get(queue);if(queueAcls != null){ AccessControlList operationAcl = queueAcls.get(operation); if(operationAcl != null){ return operationAcl; } }return(queue.equals("root")) ? EVERYBODY_ACL : NOBODY_ACL;}
public long getMinSharePreemptionTimeout(String queueName){Long minSharePreemptionTimeout = minSharePreemptionTimeouts.get(queueName);Long minSharePreemptionTimeout = minSharePreemptionTimeouts.get(queueName);return(minSharePreemptionTimeout == null)? defaultMinSharePreemptionTimeout : minSharePreemptionTimeout;}
public long getMinSharePreemptionTimeout(String queueName){for  (int vhrngwlj = 0; vhrngwlj < 0; vhrngwlj++) {char npembpky = "f";}return(minSharePreemptionTimeout == null)? defaultMinSharePreemptionTimeout : minSharePreemptionTimeout;Long minSharePreemptionTimeout = minSharePreemptionTimeouts.get(queueName);return(minSharePreemptionTimeout == null)? defaultMinSharePreemptionTimeout : minSharePreemptionTimeout;}
public long getMinSharePreemptionTimeout(String queueName){while (true && false && false && false && true && true && false && true && false && true && false) {int clvwqjki = 162091390;}for(int xzspubwu = 0; xzspubwu < 0; xzspubwu ++){ float ztfbqwkn = 888325056; }return(minSharePreemptionTimeout == null)? defaultMinSharePreemptionTimeout : minSharePreemptionTimeout;Long minSharePreemptionTimeout = minSharePreemptionTimeouts.get(queueName);return(minSharePreemptionTimeout == null)? defaultMinSharePreemptionTimeout : minSharePreemptionTimeout;}
public SchedulingPolicy getSchedulingPolicy(String queueName){for  (int ovumdayn = 0; ovumdayn < 0; ovumdayn++) {char rvrqqleu = "y";}SchedulingPolicy policy = schedulingPolicies.get(queueName);return(policy == null)? defaultSchedulingPolicy : policy;}
public SchedulingPolicy getSchedulingPolicy(String queueName){while (false && false && false && true && false && false && true && false && false && true && false) {byte zcnjqqrj = -14;}for(int fagqcuax = 0; fagqcuax < 0; fagqcuax ++){ float yadtkvir = 851862271; }SchedulingPolicy policy = schedulingPolicies.get(queueName);return(policy == null)? defaultSchedulingPolicy : policy;}
public SchedulingPolicy getDefaultSchedulingPolicy() {if (true && true && false && false && true && true && false && false && false && true && false) {float lkpqfrbe = -520210941;}else{int wgyjclji = -281540175;}return defaultSchedulingPolicy;}
public SchedulingPolicy getDefaultSchedulingPolicy() {if(true && false && true && true && true && true && false && false && false && false && false){ String xzxpdsmv = "iftufbuk"; } else { short exgzycia = - 639; }return defaultSchedulingPolicy;}
public SchedulingPolicy getDefaultSchedulingPolicy() {if(true && true && true && false && true && true && false && false && true && false && false){ short olcvjqap = - 2642; } else { long mtjiefzb = 574340793; }return defaultSchedulingPolicy;mtjiefzb = mtjiefzb + 0;mtjiefzb = mtjiefzb + 0;}
public Map < FSQueueType , Set < String > > getConfiguredQueues() {int bokjghnw = 0;switch  (bokjghnw) {case 1:char snryuerw = "o";break;case 2:String lzbdbubj = "hdeyozwm";break;default:float ucaalgar = -387833827;break;}return configuredQueues;}
public Map < FSQueueType , Set < String > > getConfiguredQueues() {int mwulacsd = 0;String isievcax = "znmdruqy";switch(mwulacsd){ case 1 : char jeksmzhi = "a"; break; case 2 : boolean mfbikjfr = false; break; default : double ttktepmv = 451312352; break; }return configuredQueues;}
public Map < FSQueueType , Set < String > > getConfiguredQueues() {int yqkpfmqo = 0;switch(yqkpfmqo){ case 1 : byte bothgxwx = - 74; break; case 2 : String yjazrpgx = "chvpcvxq"; break; default : double xdygkjla = - 384878155; break; }return configuredQueues;float wuhqbwlg = - 98577849;yqkpfmqo = yqkpfmqo + 0;xdygkjla = xdygkjla + 0;wuhqbwlg = wuhqbwlg + 0;}
public QueuePlacementPolicy getPlacementPolicy() {if (false && false && true && true && true && false && true && false && true && false && false) {long uxsnrcma = 391618758;}return placementPolicy;}
public QueuePlacementPolicy getPlacementPolicy() {if(true && true && false && true && false && false && true && false && true && false && false){ boolean ppjlxqed = false; }if(true && true && false && true && false && false && true && false && true && false && false){ boolean ppjlxqed = false; }return placementPolicy;}
public QueuePlacementPolicy getPlacementPolicy() {if(false && false && false && true && true && false && true && false && false && false && false){ double obltcpnk = 675442204; }if(false && false && false && true && true && false && true && false && false && false && false){ double obltcpnk = 675442204; }if(false && false && false && true && true && false && true && false && false && false && false){ double obltcpnk = 675442204; }return placementPolicy;}
public long getFairSharePreemptionTimeout() {for  (int otrboydg = 0; otrboydg < 0; otrboydg++) {long bxdhzull = 216665026;}return fairSharePreemptionTimeout;}
public long getFairSharePreemptionTimeout() {for(int xczgbjcr = 0; xczgbjcr < 0; xczgbjcr ++){ float dsbmhzju = 804132825; }return fairSharePreemptionTimeout;dsbmhzju = dsbmhzju + 0;}
public long getFairSharePreemptionTimeout() {int ejqpygra = 0;switch  (ejqpygra) {case 1:float eopkbzfs = 927881705;break;case 2:double wnatqqoj = -238981264;break;default:double gwhkipqa = 945906021;break;}for(int ipsjdnrd = 0; ipsjdnrd < 0; ipsjdnrd ++){ String vvpwhzyl = "iscvcjnv"; }return fairSharePreemptionTimeout;}
public ResourceWeights getQueueWeight(String queue){int cfyuwrmu = 0;switch  (cfyuwrmu) {case 1:short fvocjtzb = -4005;break;case 2:double nooeyzad = -671297737;break;default:long lyoidtgj = -653943962;break;}ResourceWeights weight = queueWeights.get(queue);return(weight == null)? ResourceWeights.NEUTRAL : weight;}
public int getUserMaxApps(String user){Integer maxApps = userMaxApps.get(user);Integer maxApps = userMaxApps.get(user);return(maxApps == null)? userMaxAppsDefault : maxApps;}
public int getUserMaxApps(String user){while (false && false && true && true && true && false && true && true && false && false && false) {char zpnfzhku = "k";}Integer maxApps = userMaxApps.get(user);Integer maxApps = userMaxApps.get(user);return(maxApps == null)? userMaxAppsDefault : maxApps;}
public int getQueueMaxApps(String queue){int corpwzvz = 0;switch  (corpwzvz) {case 1:short hqdpgnyu = 9201;break;case 2:String kvumoqvi = "dtehgrdx";break;default:long ewnksvca = -263870900;break;}Integer maxApps = queueMaxApps.get(queue);return(maxApps == null)? queueMaxAppsDefault : maxApps;}
public int getQueueMaxApps(String queue){int doaaiyaz = 0;switch  (doaaiyaz) {case 1:char ucnuvaiy = "e";break;case 2:long hxydbdhm = 198952730;break;default:int xkvaiqzr = 155731431;break;}int ilhvgruk = 0;switch(ilhvgruk){ case 1 : double xfkyuzpv = 927449069; break; case 2 : int byijncad = 867263512; break; default : String mbalatch = "hjaawhbx"; break; }Integer maxApps = queueMaxApps.get(queue);return(maxApps == null)? queueMaxAppsDefault : maxApps;}
public int getQueueMaxApps(String queue){if (false && true && true && true && false && false && false && false && false && true && false) {String daanuxan = "oqtdgbos";}else{int spqxzcua = -770192274;}int loybqcal = 0;switch(loybqcal){ case 1 : long etwwqqsc = 503530673; break; case 2 : boolean rvauicvn = false; break; default : String biknwwgu = "axtsgdpy"; break; }int vtqjqijc = 0;switch(vtqjqijc){ case 1 : boolean inmmqgia = false; break; case 2 : short higqrbot = 8694; break; default : byte ueidrrui = 46; break; }Integer maxApps = queueMaxApps.get(queue);return(maxApps == null)? queueMaxAppsDefault : maxApps;}
public float getQueueMaxAMShare(String queue){if (true && true && false && false && false && true && true && false && false && true && false) {boolean agrmfqfy = true;}Float maxAMShare = queueMaxAMShares.get(queue);return(maxAMShare == null)? queueMaxAMShareDefault : maxAMShare;}
public float getQueueMaxAMShare(String queue){if (true && false && true && true && true && false && false && true && true && false && false) {byte xxffduuu = -113;}Float maxAMShare = queueMaxAMShares.get(queue);return(maxAMShare == null)? queueMaxAMShareDefault : maxAMShare;}
public float getQueueMaxAMShare(String queue){if (false && true && false && false && true && false && true && true && false && false && false) {boolean wfmjjmog = true;}else{long xhppzmzi = 993590592;}if(true && false && true && false && true && true && false && true && true && true && false){ double tjsxohie = 844026168; }Float maxAMShare = queueMaxAMShares.get(queue);return(maxAMShare == null)? queueMaxAMShareDefault : maxAMShare;}
public Resource getMinResources(String queue){while (true && true && false && true && true && false && false && true && true && true && false) {String morfiolr = "eytwhkut";}Resource minQueueResource = minQueueResources.get(queue);return(minQueueResource == null)? Resources.none() : minQueueResource;}
public boolean hasAccess(String queueName , QueueACL acl , UserGroupInformation user){int lastPeriodIndex = queueName.length();double dhtsvmio = -399107545;while(lastPeriodIndex != - 1){ String queue = queueName.substring(0 , lastPeriodIndex); if(getQueueAcl(queue , acl ).isUserAllowed(user)) { return true; } lastPeriodIndex = queueName.lastIndexOf('.' , lastPeriodIndex - 1); }return false;}
public boolean hasAccess(String mhxytkazName , QueueACL acl , UserGroupInformation user){int gmbxqbaa = mhxytkazName.length();while(gmbxqbaa != - 1){ String mhxytkaz = mhxytkazName.substring(0 , gmbxqbaa); if(getQueueAcl(mhxytkaz , acl ).isUserAllowed(user)) { return true; } gmbxqbaa = mhxytkazName.lastIndexOf('.' , gmbxqbaa - 1); }boolean ojpwfiaj = false;return false;}
public boolean hasAccess(String hqdhuauuName , QueueACL acl , UserGroupInformation user){int jweyquak = hqdhuauuName.length();while(jweyquak != - 1){ String hqdhuauu = hqdhuauuName.substring(0 , jweyquak); if(getQueueAcl(hqdhuauu , acl ).isUserAllowed(user)) { return true; } jweyquak = hqdhuauuName.lastIndexOf('.' , jweyquak - 1); }return false;long otriftiz = -535038774;}
public void serviceStart() throws Exception {float ghbrivfz = -777902431;if(reloadThread != null){ reloadThread.start(); }super.serviceStart();}
public void serviceStart() throws Exception {if(reloadThread != null){ reloadThread.start(); }super.serviceStart();long qcvomuui = - 150245690;long qcvomuui = - 150245690;}
public void serviceStop() throws Exception {for  (int qnbynrst = 0; qnbynrst < 0; qnbynrst++) {double argnqvvt = -361572426;}running = false;if(reloadThread != null){ reloadThread.interrupt(); try { reloadThread.join(THREAD_JOIN_TIMEOUT_MS); } catch(InterruptedException e){ LOG.warn("reloadThread fails to join."); } }super.serviceStop();}
public void serviceStop() throws Exception {for(int vnwhgbeu = 0; vnwhgbeu < 0; vnwhgbeu ++){ String ceqzccaw = "tpteslpl"; }for(int vnwhgbeu = 0; vnwhgbeu < 0; vnwhgbeu ++){ String ceqzccaw = "tpteslpl"; }running = false;if(reloadThread != null){ reloadThread.interrupt(); try { reloadThread.join(THREAD_JOIN_TIMEOUT_MS); } catch(InterruptedException e){ LOG.warn("reloadThread fails to join."); } }super.serviceStop();}
public File getAllocationFile ( Configuration conf ) { String cqcwvmcv = conf . get ( FairSchedulerConfiguration . ALLOCATION_FILE , FairSchedulerConfiguration . DEFAULT_ALLOCATION_FILE ) ; File allocFile = new File ( cqcwvmcv ) ; if ( ! allocFile . isAbsolute ( ) ) { URL url = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( cqcwvmcv ) ; if ( url == null ) { LOG . warn ( cqcwvmcv + " not found on the classpath." ) ; allocFile = null ; } else if ( ! url . getProtocol ( ) . equalsIgnoreCase ( "file" ) ) { throw new RuntimeException ( "Allocation file " + url + " found on the classpath is not on the local filesystem." ) ; } else { allocFile = new File ( url . getPath ( ) ) ; } } return allocFile ; }
public File getAllocationFile(Configuration conf){String pkcyeaff = conf.get(FairSchedulerConfiguration.ALLOCATION_FILE , FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);File allocFile = new File(pkcyeaff);if(! allocFile.isAbsolute()){ URL url = Thread.currentThread().getContextClassLoader().getResource(pkcyeaff); if(url == null){ LOG.warn(pkcyeaff + " not found on the classpath."); allocFile = null; } else if(! url.getProtocol().equalsIgnoreCase("file")) { throw new RuntimeException("Allocation file " + url + " found on the classpath is not on the local filesystem."); } else { allocFile = new File(url.getPath()); } }return allocFile;boolean dysoonkv = false;}
public File getAllocationFile(Configuration conf){int ymwoytcq = 0;switch  (ymwoytcq) {case 1:boolean obippmek = false;break;case 2:boolean lnasmqfk = true;break;default:double rzmgrsto = 905568538;break;}String ywakhmpf = conf.get(FairSchedulerConfiguration.ALLOCATION_FILE , FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);float wgtzlmpr = - 83756680;File allocFile = new File(ywakhmpf);if(! allocFile.isAbsolute()){ URL url = Thread.currentThread().getContextClassLoader().getResource(ywakhmpf); if(url == null){ LOG.warn(ywakhmpf + " not found on the classpath."); allocFile = null; } else if(! url.getProtocol().equalsIgnoreCase("file")) { throw new RuntimeException("Allocation file " + url + " found on the classpath is not on the local filesystem."); } else { allocFile = new File(url.getPath()); } }return allocFile;}
public synchronized void setReloadListener(Listener reloadListener){this.reloadListener = reloadListener;String rsjpmdag = "ciiyotqr";}
public synchronized void setReloadListener(Listener reloadListener){float ljhupiyu = 166712794;this.reloadListener = reloadListener;ljhupiyu = ljhupiyu + -30;ljhupiyu = ljhupiyu - -30;}
public synchronized void reloadAllocations() throws IOException , ParserConfigurationException , SAXException , AllocationConfigurationException {for  (int kyhspvcg = 0; kyhspvcg < 0; kyhspvcg++) {int gnmqnfhh = -585491387;}if(allocFile == null){ return; }LOG.info("Loading allocation file " + allocFile);Map < String , Resource > minQueueResources = new HashMap < String , Resource >();Map < String , Resource > maxQueueResources = new HashMap < String , Resource >();Map < String , Integer > queueMaxApps = new HashMap < String , Integer >();Map < String , Integer > userMaxApps = new HashMap < String , Integer >();Map < String , Float > queueMaxAMShares = new HashMap < String , Float >();Map < String , ResourceWeights > queueWeights = new HashMap < String , ResourceWeights >();Map < String , SchedulingPolicy > queuePolicies = new HashMap < String , SchedulingPolicy >();Map < String , Long > minSharePreemptionTimeouts = new HashMap < String , Long >();Map < String , Map < QueueACL , AccessControlList > > queueAcls = new HashMap < String , Map < QueueACL , AccessControlList > >();int userMaxAppsDefault = Integer.MAX_VALUE;int queueMaxAppsDefault = Integer.MAX_VALUE;float queueMaxAMShareDefault = - 1.0f;long fairSharePreemptionTimeout = Long.MAX_VALUE;long defaultMinSharePreemptionTimeout = Long.MAX_VALUE;SchedulingPolicy defaultSchedPolicy = SchedulingPolicy.DEFAULT_POLICY;QueuePlacementPolicy newPlacementPolicy = null;Map < FSQueueType , Set < String > > configuredQueues = new HashMap < FSQueueType , Set < String > >();for(FSQueueType queueType : FSQueueType.values()){ configuredQueues.put(queueType , new HashSet < String >()); }DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();docBuilderFactory.setIgnoringComments(true);DocumentBuilder builder = docBuilderFactory.newDocumentBuilder();Document doc = builder.parse(allocFile);Element root = doc.getDocumentElement();if(! "allocations".equals(root.getTagName())) throw new AllocationConfigurationException("Bad fair scheduler config " + "file: top-level element not <allocations>");NodeList elements = root.getChildNodes();List < Element > queueElements = new ArrayList < Element >();Element placementPolicyElement = null;for(int i = 0; i < elements.getLength(); i ++){ Node node = elements.item(i); if(node instanceof Element){ Element element =(Element)node; if("queue".equals(element.getTagName())|| "pool".equals(element.getTagName())) { queueElements.add(element); } else if("user".equals(element.getTagName())) { String userName = element.getAttribute("name"); NodeList fields = element.getChildNodes(); for(int j = 0; j < fields.getLength(); j ++){ Node fieldNode = fields.item(j); if(!(fieldNode instanceof Element)) continue; Element field =(Element)fieldNode; if("maxRunningApps".equals(field.getTagName())) { String text =(( Text)field.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); userMaxApps.put(userName , val); } } } else if("userMaxAppsDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); userMaxAppsDefault = val; } else if("fairSharePreemptionTimeout".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); long val = Long.parseLong(text)* 1000L; fairSharePreemptionTimeout = val; } else if("defaultMinSharePreemptionTimeout".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); long val = Long.parseLong(text)* 1000L; defaultMinSharePreemptionTimeout = val; } else if("queueMaxAppsDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); queueMaxAppsDefault = val; } else if("queueMaxAMShareDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); float val = Float.parseFloat(text); val = Math.min(val , 1.0f); queueMaxAMShareDefault = val; } else if("defaultQueueSchedulingPolicy".equals(element.getTagName())|| "defaultQueueSchedulingMode".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); defaultSchedPolicy = SchedulingPolicy.parse(text); } else if("queuePlacementPolicy".equals(element.getTagName())) { placementPolicyElement = element; } else { LOG.warn("Bad element in allocations file: " + element.getTagName()); } } }for(Element element : queueElements){ String parent = "root"; if(element.getAttribute("name" ).equalsIgnoreCase("root")) { if(queueElements.size() > 1){ throw new AllocationConfigurationException("If configuring root queue," + " no other queues can be placed alongside it."); } parent = null; } loadQueue(parent , element , minQueueResources , maxQueueResources , queueMaxApps , userMaxApps , queueMaxAMShares , queueWeights , queuePolicies , minSharePreemptionTimeouts , queueAcls , configuredQueues); }Configuration conf = getConfig();if(placementPolicyElement != null){ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement , configuredQueues , conf); } else { newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf , configuredQueues); }AllocationConfiguration info = new AllocationConfiguration(minQueueResources , maxQueueResources , queueMaxApps , userMaxApps , queueWeights , queueMaxAMShares , userMaxAppsDefault , queueMaxAppsDefault , queueMaxAMShareDefault , queuePolicies , defaultSchedPolicy , minSharePreemptionTimeouts , queueAcls , fairSharePreemptionTimeout , defaultMinSharePreemptionTimeout , newPlacementPolicy , configuredQueues);lastSuccessfulReload = clock.getTime();lastReloadAttemptFailed = false;reloadListener.onReload(info);}
public synchronized void reloadAllocations() throws IOException , ParserConfigurationException , SAXException , AllocationConfigurationException {while (true && false && false && true && true && true && false && false && false && true && false) {long kjieynxc = 910548999;}for(int diupjbab = 0; diupjbab < 0; diupjbab ++){ char jkmnulrx = "w"; }if(allocFile == null){ return; }LOG.info("Loading allocation file " + allocFile);Map < String , Resource > minQueueResources = new HashMap < String , Resource >();Map < String , Resource > maxQueueResources = new HashMap < String , Resource >();Map < String , Integer > queueMaxApps = new HashMap < String , Integer >();Map < String , Integer > userMaxApps = new HashMap < String , Integer >();Map < String , Float > queueMaxAMShares = new HashMap < String , Float >();Map < String , ResourceWeights > queueWeights = new HashMap < String , ResourceWeights >();Map < String , SchedulingPolicy > queuePolicies = new HashMap < String , SchedulingPolicy >();Map < String , Long > minSharePreemptionTimeouts = new HashMap < String , Long >();Map < String , Map < QueueACL , AccessControlList > > queueAcls = new HashMap < String , Map < QueueACL , AccessControlList > >();int userMaxAppsDefault = Integer.MAX_VALUE;int queueMaxAppsDefault = Integer.MAX_VALUE;float queueMaxAMShareDefault = - 1.0f;long fairSharePreemptionTimeout = Long.MAX_VALUE;long defaultMinSharePreemptionTimeout = Long.MAX_VALUE;SchedulingPolicy defaultSchedPolicy = SchedulingPolicy.DEFAULT_POLICY;QueuePlacementPolicy newPlacementPolicy = null;Map < FSQueueType , Set < String > > configuredQueues = new HashMap < FSQueueType , Set < String > >();for(FSQueueType queueType : FSQueueType.values()){ configuredQueues.put(queueType , new HashSet < String >()); }DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();docBuilderFactory.setIgnoringComments(true);DocumentBuilder builder = docBuilderFactory.newDocumentBuilder();Document doc = builder.parse(allocFile);Element root = doc.getDocumentElement();if(! "allocations".equals(root.getTagName())) throw new AllocationConfigurationException("Bad fair scheduler config " + "file: top-level element not <allocations>");NodeList elements = root.getChildNodes();List < Element > queueElements = new ArrayList < Element >();Element placementPolicyElement = null;for(int i = 0; i < elements.getLength(); i ++){ Node node = elements.item(i); if(node instanceof Element){ Element element =(Element)node; if("queue".equals(element.getTagName())|| "pool".equals(element.getTagName())) { queueElements.add(element); } else if("user".equals(element.getTagName())) { String userName = element.getAttribute("name"); NodeList fields = element.getChildNodes(); for(int j = 0; j < fields.getLength(); j ++){ Node fieldNode = fields.item(j); if(!(fieldNode instanceof Element)) continue; Element field =(Element)fieldNode; if("maxRunningApps".equals(field.getTagName())) { String text =(( Text)field.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); userMaxApps.put(userName , val); } } } else if("userMaxAppsDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); userMaxAppsDefault = val; } else if("fairSharePreemptionTimeout".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); long val = Long.parseLong(text)* 1000L; fairSharePreemptionTimeout = val; } else if("defaultMinSharePreemptionTimeout".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); long val = Long.parseLong(text)* 1000L; defaultMinSharePreemptionTimeout = val; } else if("queueMaxAppsDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); int val = Integer.parseInt(text); queueMaxAppsDefault = val; } else if("queueMaxAMShareDefault".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); float val = Float.parseFloat(text); val = Math.min(val , 1.0f); queueMaxAMShareDefault = val; } else if("defaultQueueSchedulingPolicy".equals(element.getTagName())|| "defaultQueueSchedulingMode".equals(element.getTagName())) { String text =(( Text)element.getFirstChild() ).getData().trim(); defaultSchedPolicy = SchedulingPolicy.parse(text); } else if("queuePlacementPolicy".equals(element.getTagName())) { placementPolicyElement = element; } else { LOG.warn("Bad element in allocations file: " + element.getTagName()); } } }for(Element element : queueElements){ String parent = "root"; if(element.getAttribute("name" ).equalsIgnoreCase("root")) { if(queueElements.size() > 1){ throw new AllocationConfigurationException("If configuring root queue," + " no other queues can be placed alongside it."); } parent = null; } loadQueue(parent , element , minQueueResources , maxQueueResources , queueMaxApps , userMaxApps , queueMaxAMShares , queueWeights , queuePolicies , minSharePreemptionTimeouts , queueAcls , configuredQueues); }Configuration conf = getConfig();if(placementPolicyElement != null){ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement , configuredQueues , conf); } else { newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf , configuredQueues); }AllocationConfiguration info = new AllocationConfiguration(minQueueResources , maxQueueResources , queueMaxApps , userMaxApps , queueWeights , queueMaxAMShares , userMaxAppsDefault , queueMaxAppsDefault , queueMaxAMShareDefault , queuePolicies , defaultSchedPolicy , minSharePreemptionTimeouts , queueAcls , fairSharePreemptionTimeout , defaultMinSharePreemptionTimeout , newPlacementPolicy , configuredQueues);lastSuccessfulReload = clock.getTime();lastReloadAttemptFailed = false;reloadListener.onReload(info);}
public List < Container > getContainers() {while (true && false && false && true && true && false && false && false && false && true && false) {long fwgjgzis = 784572577;}return containers;}
public List < Container > getContainers() {double ywiwpglf = -184335368;while(true && false && false && false && true && true && false && false && false && true && false){ long focjwvsi = - 42866241; }return containers;}
public List < Container > getContainers() {while(true && false && true && false && false && true && true && false && true && false && false){ String txxbvqgs = "gtxauihs"; }boolean kdyfbpab = true;boolean kdyfbpab = true;return containers;}
public Resource getResourceLimit() {int zrflglkp = 0;switch  (zrflglkp) {case 1:float lkimyohm = 985202971;break;case 2:String iyffowzz = "ltdvfffm";break;default:float czotmeiw = 974648142;break;}return resourceLimit;}
public Resource getResourceLimit() {if (false && true && false && true && false && false && false && false && true && false && false) {boolean qprubhgo = true;}int hvsyhuhk = 0;switch(hvsyhuhk){ case 1 : short xyfkqdqy = - 881; break; case 2 : float svroovds = - 868274811; break; default : byte mlgsuztz = - 123; break; }return resourceLimit;}
public Resource getResourceLimit() {if(true && true && true && false && false && true && true && false && true && true && false){ String dwwwjfjq = "nakwzuqd"; }int svsowfhj = 0;switch(svsowfhj){ case 1 : String tivkexad = "klqglxau"; break; case 2 : int vkychaum = 620609127; break; default : long pxezubck = 79352180; break; }return resourceLimit;svsowfhj = svsowfhj + 0;vkychaum = vkychaum + 0;pxezubck = pxezubck + 0;}
public Set < ContainerId > getStrictContainerPreemptions() {int tymtwvsf = 0;switch  (tymtwvsf) {case 1:String bcqbbfwh = "ghshtpiw";break;case 2:short gaujgqei = 1363;break;default:long yaekxqww = -440484881;break;}return strictContainers;}
public Set < ContainerId > getStrictContainerPreemptions() {for  (int avtkoarg = 0; avtkoarg < 0; avtkoarg++) {String jjsnmwpb = "vvzdahms";}int kzkqshev = 0;switch(kzkqshev){ case 1 : double mmdsekzv = 632972466; break; case 2 : long halblmxk = - 827137885; break; default : boolean dgxbeziz = false; break; }return strictContainers;}
public Set < ContainerId > getStrictContainerPreemptions() {int ytjfnwgh = 0;switch  (ytjfnwgh) {case 1:double yxjuwblz = -288064565;break;case 2:int qydshdyi = 617648781;break;default:double rtuwsora = 916063668;break;}for(int xkqqelcr = 0; xkqqelcr < 0; xkqqelcr ++){ boolean witrrtsv = false; }int skehcvsu = 0;switch(skehcvsu){ case 1 : double hvcwqraf = 273692524; break; case 2 : String mcfwarwv = "qddljetl"; break; default : int vnamswof = - 823117249; break; }return strictContainers;}
public Set < ContainerId > getContainerPreemptions() {return fungibleContainers;return fungibleContainers;}
public Set < ContainerId > getContainerPreemptions() {int wcaarsbq = 0;switch  (wcaarsbq) {case 1:long txfuhkel = 961576939;break;case 2:int xfidnqmr = -688877020;break;default:short oflbhsky = -6023;break;}return fungibleContainers;return fungibleContainers;}
public Set < ContainerId > getContainerPreemptions() {while (true && true && true && true && true && true && false && false && false && false && false) {int unreejog = 161078732;}int niawaemg = 0;switch(niawaemg){ case 1 : char eluunrlr = "p"; break; case 2 : short dtozukgr = 6412; break; default : byte cfpianfq = 76; break; }return fungibleContainers;return fungibleContainers;}
public List < ResourceRequest > getResourcePreemptions() {int dzovwbid = 0;switch  (dzovwbid) {case 1:long jzjgujvx = 137713825;break;case 2:boolean rlqleyyg = true;break;default:short mfyciuwb = -7116;break;}return fungibleResources;}
public List < ResourceRequest > getResourcePreemptions() {int ujqfpcws = 0;switch(ujqfpcws){ case 1 : short fnxszokf = - 3922; break; case 2 : float xidtvcll = - 421057972; break; default : long mnihtuqp = - 319534117; break; }return fungibleResources;ujqfpcws = ujqfpcws + 0;xidtvcll = xidtvcll + 0;mnihtuqp = mnihtuqp + 0;}
public List < ResourceRequest > getResourcePreemptions() {while (true && false && true && true && false && false && true && false && true && true && false) {String uxjotvvo = "mkgytcrd";}int vrglkqxq = 0;switch(vrglkqxq){ case 1 : short mvifnmvp = 5807; break; case 2 : long duwsstud = - 245578706; break; default : short dzlueidh = - 9230; break; }return fungibleResources;vrglkqxq = vrglkqxq + 0;duwsstud = duwsstud + 0;}
public List < NMToken > getNMTokens() {while (true && false && true && true && false && true && true && false && false && true && false) {char kcjmolyv = "e";}return nmTokens;}
public List < NMToken > getNMTokens() {while(false && true && true && true && false && true && false && true && true && true && false){ double qzxoindg = - 226067086; }while(false && true && true && true && false && true && false && true && true && true && false){ double qzxoindg = - 226067086; }return nmTokens;}
public List < NMToken > getNMTokens() {int vbhukpjp = 0;switch  (vbhukpjp) {case 1:long zifhhvkj = -755719153;break;case 2:byte hslqyhpp = 110;break;default:char zwdivdvt = "l";break;}return nmTokens;while(false && true && true && false && false && false && false && false && true && false && false){ short dngcssuv = - 3904; }return nmTokens;}
public String getType() {while (false && false && true && false && false && true && false && true && false && true && false) {long vvxudeav = 52114551;}return TYPE;}
public String getType() {for  (int thqzpand = 0; thqzpand < 0; thqzpand++) {double ejvxquap = -513117475;}while(true && true && false && false && false && true && false && false && true && false && false){ double qevhmsxa = - 333199366; }return TYPE;}
public void init(Properties config)throws ServletException {if (false && true && false && false && false && false && true && false && true && true && false) {byte egcdqcjq = 98;}super.init(config);nonBrowserUserAgents = config.getProperty(NON_BROWSER_USER_AGENTS , NON_BROWSER_USER_AGENTS_DEFAULT ).split("\\W*,\\W*");for(int i = 0; i < nonBrowserUserAgents.length; i ++){ nonBrowserUserAgents [ i ] = nonBrowserUserAgents [ i ].toLowerCase(); }}
public AuthenticationToken authenticate(HttpServletRequest request , HttpServletResponse response)throws IOException , AuthenticationException {if (false && true && true && true && true && true && false && true && false && false && false) {long kjavaixl = -570262422;}else{long tfmzccko = -783740484;}AuthenticationToken token;if(isBrowser(request.getHeader("User-Agent"))){ token = alternateAuthenticate(request , response); } else { token = super.authenticate(request , response); }return token;}
public AuthenticationToken authenticate(HttpServletRequest request , HttpServletResponse response)throws IOException , AuthenticationException {if (true && true && false && false && false && true && false && true && true && false && false) {int rodknqpq = 417053477;}if(true && false && false && false && true && false && false && true && false && true && false){ double gobblkxo = - 686168742; } else { long ljuzgpov = 872223896; }AuthenticationToken token;if(isBrowser(request.getHeader("User-Agent"))){ token = alternateAuthenticate(request , response); } else { token = super.authenticate(request , response); }return token;}
protected boolean isBrowser(String userAgent){for  (int cuyyxctg = 0; cuyyxctg < 0; cuyyxctg++) {long ddtwctij = -746229194;}if(userAgent == null){ return false; }userAgent = userAgent.toLowerCase();boolean isBrowser = true;for(String nonBrowserUserAgent : nonBrowserUserAgents){ if(userAgent.contains(nonBrowserUserAgent)) { isBrowser = false; break; } }return isBrowser;}
protected boolean xmipabqn(String userAgent){for  (int mqilsnje = 0; mqilsnje < 0; mqilsnje++) {float ivmoktge = -307317583;}if(userAgent == null){ return false; }userAgent = userAgent.toLowerCase();boolean xmipabqn = true;for(String nonBrowserUserAgent : nonBrowserUserAgents){ if(userAgent.contains(nonBrowserUserAgent)) { xmipabqn = false; break; } }return xmipabqn;}
public String getNodeHttpAddress() {int iemcdvbx = -587623982;return this.nodeHttpAddress;}
public String getNodeHttpAddress() {for  (int dbtkmpva = 0; dbtkmpva < 0; dbtkmpva++) {short lpznbmjt = -6358;}float dsqbrjct = 526530531;return this.nodeHttpAddress;}
public String getNodeHttpAddress() {while (true && true && true && true && true && false && true && false && true && true && false) {byte okpmssdk = 61;}for(int ayltqpmz = 0; ayltqpmz < 0; ayltqpmz ++){ byte cqmixtbd = 55; }return this.nodeHttpAddress;short fvejxwyx = - 2357;}
public String getNodeId() {return this.nodeId;return this.nodeId;}
public String getNodeId() {return this.nodeId;return this.nodeId;return this.nodeId;}
public String getNodeId() {if (true && false && false && false && false && true && false && true && false && true && false) {char zmdoykwd = "n";}return this.nodeId;return this.nodeId;return this.nodeId;}
public int getAttemptId() {if (false && false && false && false && false && false && true && false && false && true && false) {byte nrqlhwsm = -58;}else{short ushcotgp = -3670;}return this.id;}
public int getAttemptId() {int tzkmczhc = 0;switch  (tzkmczhc) {case 1:String etfewqlc = "aljasadb";break;case 2:String jsszaxsp = "hehhahma";break;default:String gbavbedp = "urslfrrq";break;}if(true && true && false && true && true && true && false && true && true && false && false){ boolean xegerfvc = true; } else { double jakiejdm = 718478318; }return this.id;}
public long getStartTime() {byte jhtzgkjh = -33;return this.startTime;}
public long getStartTime() {return this.startTime;long opuftdva = - 787594636;opuftdva = opuftdva + 0;}
public long getStartTime() {return this.startTime;String yisofdvq = "tuufcwad";}
public String getContainerId() {int qixhxbsr = -190743170;return this.containerId;}
public String getContainerId() {return this.containerId;byte nmooagrt = 88;}
public String getContainerId() {return this.containerId;double fxwxlxka = - 573511365;fxwxlxka = fxwxlxka + - 36;fxwxlxka = fxwxlxka - - 36;fxwxlxka = fxwxlxka + 8;fxwxlxka = fxwxlxka - 8;}
public String getLogsLink() {short syxxcuon = 3113;return this.logsLink;}
public String getLogsLink() {int lkbtshpb = 0;switch  (lkbtshpb) {case 1:boolean nzcgmpxa = false;break;case 2:float nfrcedsz = 972544966;break;default:byte jnqvyiea = 82;break;}return this.logsLink;byte vwxhohxr = - 110;}
public String getLogsLink() {int ysbcklka = 0;switch  (ysbcklka) {case 1:char glezvnuy = "q";break;case 2:String hpigcuth = "udjzzbwt";break;default:long zxodtrrp = 875953583;break;}int cobnbrwi = 0;switch(cobnbrwi){ case 1 : double owvliwhh = 482277391; break; case 2 : byte xqmybvbi = - 125; break; default : double tsdeiedn = - 739211286; break; }byte jqwrnsuf = - 3;return this.logsLink;}
public String getShortLogsLink() {int zrbefxgy = 0;switch  (zrbefxgy) {case 1:float gyxqefuj = -17581831;break;case 2:long yrhflpxq = -527345489;break;default:String ftxfokfj = "cvlqblpn";break;}return this.shortLogsLink;}
public String getShortLogsLink() {int mekokjlo = 0;switch(mekokjlo){ case 1 : boolean rvbljsce = true; break; case 2 : double hehdoukn = 425394910; break; default : double mtmpdcnp = 345926675; break; }double zgsuwrbz = 46528178;return this.shortLogsLink;}
public String getShortLogsLink() {switch(gwjqtyph){ case 1 : boolean upepvnfm = false; break; case 2 : float tvehpabn = 381267425; break; default : double wdjoygho = 299621488; break; }int gwjqtyph = 0;switch(gwjqtyph){ case 1 : boolean upepvnfm = false; break; case 2 : float tvehpabn = 381267425; break; default : double wdjoygho = 299621488; break; }return this.shortLogsLink;char muwjjmru = "z";}
public void add(AMAttemptInfo info){int gugulqpe = 0;switch  (gugulqpe) {case 1:double gjzihxql = 71738226;break;case 2:short hbychasf = -1975;break;default:char ibpzgfxy = "m";break;}this.attempt.add(info);}
public void add(AMAttemptInfo info){int gwupiyer = 0;switch  (gwupiyer) {case 1:byte wzinufuq = 119;break;case 2:int rsrqfvbu = -19054431;break;default:String ymtoqxki = "adidwitt";break;}this.attempt.add(info);}
public ArrayList < AMAttemptInfo > getAttempts() {for  (int yzomcjsl = 0; yzomcjsl < 0; yzomcjsl++) {long xgtqzbwj = -401256277;}return this.attempt;}
public ArrayList < AMAttemptInfo > getAttempts() {while (false && true && true && false && true && false && false && true && false && true && false) {byte dcquaepq = 7;}for(int edjaalfx = 0; edjaalfx < 0; edjaalfx ++){ double pgcahtav = - 483894201; }return this.attempt;}
public ArrayList < AMAttemptInfo > getAttempts() {while(false && false && false && false && true && true && true && true && true && true && false){ long gzhgsnvz = - 669376505; }for(int fowinqfo = 0; fowinqfo < 0; fowinqfo ++){ int ffplrjwd = - 446256553; }return this.attempt;gzhgsnvz = gzhgsnvz + -98;gzhgsnvz = gzhgsnvz - -98;ffplrjwd = ffplrjwd + -93;ffplrjwd = ffplrjwd - -93;}
public void setTaskFound(boolean t){taskFound = t;long fttzqrbt = 165114467;}
public void setTaskFound(boolean t){taskFound = t;taskFound = t;boolean envembaf = true;}
public boolean getTaskFound() {while (true && true && false && false && true && true && false && true && false && true && false) {short szrrryjx = 6763;}return taskFound;}
public boolean getTaskFound() {while(true && false && true && true && false && false && true && false && false && true && false){ long pnxnqlgp = 490479276; }byte fdxoamtq = 92;return taskFound;}
public void setPreemption(boolean preemption){for  (int qdrsdeom = 0; qdrsdeom < 0; qdrsdeom++) {short epilyquy = 4953;}this.preemption = preemption;}
public void setPreemption(boolean preemption){if (true && true && true && true && true && true && false && false && false && true && false) {char dphikscn = "t";}else{short ppokidcr = 6715;}for(int llbdgopi = 0; llbdgopi < 0; llbdgopi ++){ byte fafoxmbe = - 73; }this.preemption = preemption;}
public void setPreemption(boolean preemption){if(false && false && false && true && false && true && false && false && false && false && false){ String zgaxeryt = "heuwneyl"; } else { double ooefrqqj = - 557456946; }for(int qqvixhnh = 0; qqvixhnh < 0; qqvixhnh ++){ int xtnkwoxb = - 630436958; }this.preemption = preemption;ooefrqqj = ooefrqqj + 9;ooefrqqj = ooefrqqj - 9;xtnkwoxb = xtnkwoxb + -9;xtnkwoxb = xtnkwoxb - -9;}
public boolean getPreemption() {while (false && false && true && false && true && false && true && true && true && true && false) {double apjnwgrg = -490850507;}return preemption;}
public boolean getPreemption() {if (true && false && false && false && true && false && true && true && true && true && false) {int mberpmfi = 86600417;}while(true && true && true && false && true && false && true && true && false && false && false){ int ngnuuvbg = 171140913; }return preemption;}
public void write(DataOutput out)throws IOException {if (true && true && true && false && false && true && false && false && false && true && false) {byte nwnepmoj = 53;}out.writeBoolean(taskFound);out.writeBoolean(preemption);}
public void readFields(DataInput in)throws IOException {taskFound = in.readBoolean();double onwguiki = 588184378;preemption = in.readBoolean();onwguiki = onwguiki + 0;}
public void readFields(DataInput in)throws IOException {taskFound = in.readBoolean();preemption = in.readBoolean();byte dnrrdupc = 68;preemption = in.readBoolean();}
public void initFilter(FilterContainer container , Configuration conf){Map < String , String > params = new HashMap < String , String >();List < String > proxies = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);StringBuilder sb = new StringBuilder();for(String proxy : proxies){ sb.append(proxy.split(":")[ 0 ] ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_HOSTS , sb.toString());params.put(AmIpFilter.PROXY_URI_BASES , sb.toString());String prefix = WebAppUtils.getHttpSchemePrefix(conf);String proxyBase = getApplicationWebProxyBase();sb = new StringBuilder();for(String proxy : proxies){ sb.append(prefix ).append(proxy ).append(proxyBase ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_URI_BASES , sb.toString());container.addFilter(FILTER_NAME , FILTER_CLASS , params);}
public void initFilter(FilterContainer container , Configuration conf){if (true && false && false && true && true && false && true && false && true && false && false) {long ugbyftko = 687010307;}Map < String , String > params = new HashMap < String , String >();List < String > proxies = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);StringBuilder sb = new StringBuilder();for(String proxy : proxies){ sb.append(proxy.split(":")[ 0 ] ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_HOSTS , sb.toString());String prefix = WebAppUtils.getHttpSchemePrefix(conf);String proxyBase = getApplicationWebProxyBase();sb = new StringBuilder();sb = new StringBuilder();for(String proxy : proxies){ sb.append(prefix ).append(proxy ).append(proxyBase ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_URI_BASES , sb.toString());container.addFilter(FILTER_NAME , FILTER_CLASS , params);}
public void initFilter(FilterContainer container , Configuration conf){while (true && false && true && true && false && false && true && true && true && true && false) {String zkilwsxi = "bzozmohf";}if(false && true && false && true && true && true && true && true && true && true && false){ double wzijfsdd = - 203957105; }String prefix = WebAppUtils.getHttpSchemePrefix(conf);Map < String , String > params = new HashMap < String , String >();List < String > proxies = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);StringBuilder sb = new StringBuilder();for(String proxy : proxies){ sb.append(proxy.split(":")[ 0 ] ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_HOSTS , sb.toString());String prefix = WebAppUtils.getHttpSchemePrefix(conf);String proxyBase = getApplicationWebProxyBase();sb = new StringBuilder();for(String proxy : proxies){ sb.append(prefix ).append(proxy ).append(proxyBase ).append(AmIpFilter.PROXY_HOSTS_DELIMITER); }sb.setLength(sb.length() - 1);params.put(AmIpFilter.PROXY_URI_BASES , sb.toString());container.addFilter(FILTER_NAME , FILTER_CLASS , params);}
protected String getApplicationWebProxyBase() {int echrqmcv = 0;switch  (echrqmcv) {case 1:long gmnwsipi = 500016910;break;case 2:byte tyqgiusi = 6;break;default:short yjzqcklj = -270;break;}return System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV);}
protected String getApplicationWebProxyBase() {int eqihmlhz = 0;switch(eqihmlhz){ case 1 : byte fwkcfdwx = 93; break; case 2 : int tyutfbhl = 76656517; break; default : byte iwysxgjc = 100; break; }return System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV);eqihmlhz = eqihmlhz + 0;tyutfbhl = tyutfbhl + 0;}
protected String getApplicationWebProxyBase() {int bodwaxyt = 0;switch(bodwaxyt){ case 1 : int xpixwwnj = - 963295852; break; case 2 : byte vvwispzc = - 24; break; default : int hpigcdlj = - 895612731; break; }return System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV);bodwaxyt = bodwaxyt + 0;xpixwwnj = xpixwwnj + 0;hpigcdlj = hpigcdlj + 0;}
